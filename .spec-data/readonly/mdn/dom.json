{
    "dom-abortcontroller-abortcontroller": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "AbortController",
            "slug": "API/AbortController/AbortController",
            "summary": "The AbortController() constructor creates a new AbortController object instance.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "12.2"
                    },
                    {
                        "version_added": "11.3",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController.AbortController()"
        }
    ],
    "dom-abortcontroller-abort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "abort",
            "slug": "API/AbortController/abort",
            "summary": "The abort() method of the AbortController interface aborts a DOM request (e.g. a Fetch request) before it has completed. This is able to abort fetch requests, consumption of any response Body, and streams.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "12.2"
                    },
                    {
                        "version_added": "11.3",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController.abort()"
        }
    ],
    "dom-abortcontroller-signal": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "signal",
            "slug": "API/AbortController/signal",
            "summary": "The signal read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort a DOM request as desired.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "12.2"
                    },
                    {
                        "version_added": "11.3",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController.signal"
        }
    ],
    "interface-abortcontroller": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "AbortController",
            "slug": "API/AbortController",
            "summary": "The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "12.2"
                    },
                    {
                        "version_added": "11.3",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController"
        }
    ],
    "dom-abortsignal-onabort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "abort_event",
            "slug": "API/AbortSignal/abort_event",
            "summary": "The abort event of the Fetch API is fired when a fetch request is aborted, i.e. using AbortController.abort().",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal: abort event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "aborted",
            "slug": "API/AbortSignal/aborted",
            "summary": "The aborted read-only property returns a Boolean that indicates whether the DOM request(s) the signal is communicating with is/are aborted (true) or not (false).",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal.aborted"
        }
    ],
    "dom-abortsignal-aborted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "onabort",
            "slug": "API/AbortSignal/onabort",
            "summary": "The onabort read-only property of the FetchSignal interface is an event handler Invoked when an abort event fires, i.e. when the fetch request(s) the signal is communicating with is/are aborted.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal.onabort"
        }
    ],
    "interface-AbortSignal": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "AbortSignal",
            "slug": "API/AbortSignal",
            "summary": "The AbortSignal interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal"
        }
    ],
    "dom-range-collapsed": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/AbstractRange.json",
            "name": "collapsed",
            "slug": "API/AbstractRange/collapsed",
            "summary": "The collapsed read-only property of the AbstractRange interface returns true if the range's start position and end position are the same.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "AbstractRange.collapsed"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "collapsed",
            "slug": "API/Range/collapsed",
            "summary": "The Range.collapsed read-only property returns a Boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.collapsed"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "collapsed",
            "slug": "API/StaticRange/collapsed",
            "summary": "The collapsed read-only property of the StaticRange interface returns true if the range's start position and end position are the same.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange.collapsed"
        }
    ],
    "dom-range-endcontainer": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/AbstractRange.json",
            "name": "endContainer",
            "slug": "API/AbstractRange/endContainer",
            "summary": "The endContainer property of the AbstractRange interface returns the Node in which the end of the range is located.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "AbstractRange.endContainer"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "endContainer",
            "slug": "API/Range/endContainer",
            "summary": "The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.endContainer"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "endContainer",
            "slug": "API/StaticRange/endContainer",
            "summary": "The endContainer property of the StaticRange interface returns the end Node for the range.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange.endContainer"
        }
    ],
    "dom-range-endoffset": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/AbstractRange.json",
            "name": "endOffset",
            "slug": "API/AbstractRange/endOffset",
            "summary": "The endOffset property of the AbstractRange interface returns the offset into the end node of the range's end position.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "AbstractRange.endOffset"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "endOffset",
            "slug": "API/Range/endOffset",
            "summary": "The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.endOffset"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "endOffset",
            "slug": "API/StaticRange/endOffset",
            "summary": "The endOffset property of the StaticRange interface returns the offset into the end node of the range's end position.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange.endOffset"
        }
    ],
    "dom-range-startcontainer": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/AbstractRange.json",
            "name": "startContainer",
            "slug": "API/AbstractRange/startContainer",
            "summary": "The read-only startContainer property of the AbstractRange interface returns the start Node for the range.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "AbstractRange.startContainer"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "startContainer",
            "slug": "API/Range/startContainer",
            "summary": "The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.startContainer"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "startContainer",
            "slug": "API/StaticRange/startContainer",
            "summary": "The read-only startContainer property of the StaticRange interface returns the start Node for the range.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange.startContainer"
        }
    ],
    "dom-range-startoffset": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/AbstractRange.json",
            "name": "startOffset",
            "slug": "API/AbstractRange/startOffset",
            "summary": "The read-only startOffset property of the AbstractRange interface returns the offset into the start node of the range's start position.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "AbstractRange.startOffset"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "startOffset",
            "slug": "API/Range/startOffset",
            "summary": "The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.startOffset"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "startOffset",
            "slug": "API/StaticRange/startOffset",
            "summary": "The read-only startOffset property of the StaticRange interface returns the offset into the start node of the range's start position.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange.startOffset"
        }
    ],
    "abstractrange": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/AbstractRange.json",
            "name": "AbstractRange",
            "slug": "API/AbstractRange",
            "summary": "The AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "AbstractRange"
        }
    ],
    "dom-attr-localname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "localName",
            "slug": "API/Attr/localName",
            "summary": "The Attr.localName read-only property returns the local part of the qualified name of an attribute.",
            "support": {
                "chrome": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "chrome_android": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "firefox_android": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "33",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "opera_android": {
                    "version_added": "33",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "webview_android": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                }
            },
            "title": "Attr.localName"
        }
    ],
    "dom-attr-namespaceuri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "namespaceURI",
            "slug": "API/Attr/namespaceURI",
            "summary": "The Attr.namespaceURI read-only property returns the namespace URI of the attribute, or null if the element is not in a namespace.",
            "support": {
                "chrome": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "chrome_android": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "firefox_android": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "33",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "opera_android": {
                    "version_added": "33",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "webview_android": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                }
            },
            "title": "Attr.namespaceURI"
        }
    ],
    "dom-attr-prefix": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "prefix",
            "slug": "API/Attr/prefix",
            "summary": "The Attr.prefix read-only property returns the namespace prefix of the specified attribute, or null if no prefix is specified.",
            "support": {
                "chrome": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "chrome_android": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "firefox_android": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "33",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "opera_android": {
                    "version_added": "33",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "webview_android": {
                    "version_added": "46",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API."
                }
            },
            "title": "Attr.prefix"
        }
    ],
    "interface-attr": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "Attr",
            "slug": "API/Attr",
            "summary": "The Attr interface represents one of a DOM element's attributes as an object. In most DOM methods, you will directly retrieve the attribute as a string (e.g., Element.getAttribute()), but certain functions (e.g., Element.getAttributeNode()) or means of iterating return Attr types.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr"
        }
    ],
    "interface-cdatasection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CDATASection.json",
            "name": "CDATASection",
            "slug": "API/CDATASection",
            "summary": "The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols < and & don’t need escaping as they normally do when inside a CDATA section.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CDATASection"
        }
    ],
    "characterdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "CharacterData",
            "slug": "API/CharacterData",
            "summary": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData"
        }
    ],
    "dom-childnode-after": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChildNode.json",
            "name": "after",
            "slug": "API/ChildNode/after",
            "summary": "The ChildNode.after() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just after this ChildNode. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ChildNode.after()"
        }
    ],
    "dom-childnode-before": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChildNode.json",
            "name": "before",
            "slug": "API/ChildNode/before",
            "summary": "The ChildNode.before() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just before this ChildNode. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ChildNode.before()"
        }
    ],
    "dom-childnode-remove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChildNode.json",
            "name": "remove",
            "slug": "API/ChildNode/remove",
            "summary": "The ChildNode.remove() method removes the object from the tree it belongs to.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "23"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "childnode-remove",
                "title": "ChildNode.remove()"
            },
            "title": "ChildNode.remove()"
        }
    ],
    "dom-childnode-replacewith": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChildNode.json",
            "name": "replaceWith",
            "slug": "API/ChildNode/replaceWith",
            "summary": "The ChildNode.replaceWith() method replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ChildNode.replaceWith()"
        }
    ],
    "interface-childnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChildNode.json",
            "name": "ChildNode",
            "slug": "API/ChildNode",
            "summary": "The ChildNode mixin contains methods and properties that are common to all types of Node objects that can have a parent.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "23"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "dom-manip-convenience",
                "title": "DOM manipulation convenience methods"
            },
            "title": "ChildNode"
        }
    ],
    "dom-comment-comment": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Comment.json",
            "name": "Comment",
            "slug": "API/Comment/Comment",
            "summary": "The Comment() constructor returns a newly created Comment object with the optional DOMString given in parameter as its textual content.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Comment()"
        }
    ],
    "comment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Comment.json",
            "name": "Comment",
            "slug": "API/Comment",
            "summary": "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Comment"
        }
    ],
    "dom-customevent-customevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomEvent.json",
            "name": "CustomEvent",
            "slug": "API/CustomEvent/CustomEvent",
            "summary": "The CustomEvent() constructor creates a new CustomEvent.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "6.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomEvent()"
        }
    ],
    "dom-customevent-detail": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomEvent.json",
            "name": "detail",
            "slug": "API/CustomEvent/detail",
            "summary": "The detail readonly property of the CustomEvent interface returns any data passed when initializing the event.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "6.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomEvent.detail"
        }
    ],
    "interface-customevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomEvent.json",
            "name": "CustomEvent",
            "slug": "API/CustomEvent",
            "summary": "The CustomEvent interface represents events initialized by an application for any purpose.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "customevent",
                "title": "CustomEvent"
            },
            "title": "CustomEvent"
        }
    ],
    "dom-domimplementation-createdocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "createDocument",
            "slug": "API/DOMImplementation/createDocument",
            "summary": "The DOMImplementation.createDocument() method creates and returns an XMLDocument.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation.createDocument()"
        }
    ],
    "dom-domimplementation-createdocumenttype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "createDocumentType",
            "slug": "API/DOMImplementation/createDocumentType",
            "summary": "The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation.createDocumentType()"
        }
    ],
    "dom-domimplementation-createhtmldocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "createHTMLDocument",
            "slug": "API/DOMImplementation/createHTMLDocument",
            "summary": "The DOMImplementation.createHTMLDocument() method creates a new HTML Document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9",
                    "notes": "The <code>title</code> parameter is required, but can be empty string."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation.createHTMLDocument()"
        }
    ],
    "domimplementation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "DOMImplementation",
            "slug": "API/DOMImplementation",
            "summary": "The DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation"
        }
    ],
    "dom-domtokenlist-add": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "add",
            "slug": "API/DOMTokenList/add",
            "summary": "The add() method of the DOMTokenList interface adds the given token to the list.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.add()"
        }
    ],
    "dom-domtokenlist-contains": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "contains",
            "slug": "API/DOMTokenList/contains",
            "summary": "The contains() method of the DOMTokenList interface returns a Boolean — true if the underlying list contains the given token, otherwise false.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.contains()"
        }
    ],
    "domtokenlist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "entries",
            "slug": "API/DOMTokenList/entries",
            "summary": "The DOMTokenList.entries() method returns an iterator allowing you to go through all key/value pairs contained in this object. The values are DOMString objects, each representing a single token.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.entries()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "forEach",
            "slug": "API/DOMTokenList/forEach",
            "summary": "The forEach() method of the DOMTokenList interface calls the callback given in parameter once for each value pair in the list, in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.forEach()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "keys",
            "slug": "API/DOMTokenList/keys",
            "summary": "The keys() method of the DOMTokenList interface returns an iterator allowing to go through all keys contained in this object. The keys are of type unsigned integer.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.keys()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "values",
            "slug": "API/DOMTokenList/values",
            "summary": "The values() method of the DOMTokenList interface returns an iterator allowing developers to go through all values contained in the DOMTokenList. The individual values are DOMString objects.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.values()"
        }
    ],
    "dom-domtokenlist-item": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "item",
            "slug": "API/DOMTokenList/item",
            "summary": "The item() method of the DOMTokenList interface returns an item in the list by its index.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.item()"
        }
    ],
    "dom-domtokenlist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "length",
            "slug": "API/DOMTokenList/length",
            "summary": "The length read-only property of the DOMTokenList interface is an integer representing the number of objects stored in the object.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.length"
        }
    ],
    "dom-domtokenlist-remove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "remove",
            "slug": "API/DOMTokenList/remove",
            "summary": "The remove() method of the DOMTokenList interface removes the specified tokens from the list.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.remove()"
        }
    ],
    "dom-domtokenlist-replace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "replace",
            "slug": "API/DOMTokenList/replace",
            "summary": "The replace() method of the DOMTokenList interface replaces an existing token with a new token. If the first token doesn't exist, replace() returns false immediately, without adding the new token to the token list.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "48"
                },
                "opera_android": {
                    "version_added": "45"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "61"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.replace()"
        }
    ],
    "dom-domtokenlist-toggle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "toggle",
            "slug": "API/DOMTokenList/toggle",
            "summary": "The toggle() method of the DOMTokenList interface removes a given token from the list and returns false. If token doesn't exist it's added and the function returns true.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList.toggle()"
        }
    ],
    "dom-domtokenlist-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "value",
            "slug": "API/DOMTokenList/value",
            "summary": "The value property of the DOMTokenList interface is a stringifier that returns the value of the list as a DOMString, or clears and sets the list to the given value.",
            "support": {
                "chrome": {
                    "version_added": "50",
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                },
                "chrome_android": {
                    "version_added": "50",
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "47"
                },
                "firefox_android": {
                    "version_added": "47"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "37",
                    "notes": "Before Opera 37, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                },
                "opera_android": {
                    "version_added": "37",
                    "notes": "Before Opera 37, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Before Samsung Internet 5.0, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                },
                "webview_android": {
                    "version_added": "50",
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                }
            },
            "title": "DOMTokenList.value"
        }
    ],
    "interface-domtokenlist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "DOMTokenList",
            "slug": "API/DOMTokenList",
            "summary": "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList"
        }
    ],
    "dom-document-document": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "Document",
            "slug": "API/Document/Document",
            "summary": "The Document constructor creates a new Document object that is a web page loaded in the browser and serving as an entry point into the page's content.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": "20"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "6.1"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document()"
        }
    ],
    "dom-document-url": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "URL",
            "slug": "API/Document/URL",
            "summary": "The URL read-only property of the Document interface returns the document location as a string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.URL"
        }
    ],
    "dom-document-adoptnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "adoptNode",
            "slug": "API/Document/adoptNode",
            "summary": "Document.adoptNode() transfers a node from another document into the method's document. The adopted node and its subtree is removed from its original document (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.adoptNode()"
        }
    ],
    "dom-document-characterset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "characterSet",
            "slug": "API/Document/characterSet",
            "summary": "The Document.characterSet read-only property returns the character encoding of the document that it's currently rendered with.",
            "support": {
                "chrome": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "1",
                        "notes": "<code>charset</code> alias was made read-only in Chrome 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "18"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "18",
                        "notes": "<code>charset</code> alias was made read-only in Chrome 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "18"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1.5"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "4"
                    }
                ],
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "4"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "9"
                    }
                ],
                "opera": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": null
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "opera_android": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": null
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "safari": [
                    {
                        "version_added": "3"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "3"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "3"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.0"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "1.0",
                        "notes": "<code>charset</code> alias was made read-only in Samsung Internet 5.0."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1.0"
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "1",
                        "notes": "<code>charset</code> alias was made read-only in WebView 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "79",
                        "notes": "<code>charset</code> alias was made read-only in Chrome 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "79"
                    }
                ]
            },
            "title": "Document.characterSet"
        }
    ],
    "dom-document-compatmode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "compatMode",
            "slug": "API/Document/compatMode",
            "summary": "The Document.compatMode property indicates whether the document is rendered in Quirks mode or Standards mode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.compatMode"
        }
    ],
    "dom-document-contenttype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "contentType",
            "slug": "API/Document/contentType",
            "summary": "The Document.contentType read-only property returns the MIME type that the document is being rendered as. This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": {
                    "version_added": "36"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.contentType"
        }
    ],
    "dom-document-createattribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createAttribute",
            "slug": "API/Document/createAttribute",
            "summary": "The Document.createAttribute() method creates a new attribute node, and returns it. The object created a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "44"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "44",
                        "notes": "The parameter was not converted to its lowercase variant."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "44"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "44",
                        "notes": "The parameter was not converted to its lowercase variant."
                    }
                ],
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createAttribute()"
        }
    ],
    "dom-document-createcdatasection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createCDATASection",
            "slug": "API/Document/createCDATASection",
            "summary": "createCDATASection() creates a new CDATA section node, and returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createCDATASection()"
        }
    ],
    "dom-document-createcomment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createComment",
            "slug": "API/Document/createComment",
            "summary": "createComment() creates a new comment node, and returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createComment()"
        }
    ],
    "dom-document-createdocumentfragment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createDocumentFragment",
            "slug": "API/Document/createDocumentFragment",
            "summary": "Creates a new empty DocumentFragment into which DOM nodes can be added to build an offscreen DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createDocumentFragment()"
        }
    ],
    "dom-document-createelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createElement",
            "slug": "API/Document/createElement",
            "summary": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Doesn't conform to the DOM spec for XUL and XHTML documents: <code>localName</code> and <code>namespaceURI</code> are not set to null on the created element."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "6"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createElement()"
        }
    ],
    "dom-document-createelementns": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createElementNS",
            "slug": "API/Document/createElementNS",
            "summary": "Creates an element with the specified namespace URI and qualified name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Doesn't conform to the DOM spec for XUL and XHTML documents: <code>localName</code> and <code>namespaceURI</code> are not set to null on the created element."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createElementNS()"
        }
    ],
    "dom-document-createevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createEvent",
            "slug": "API/Document/createEvent",
            "summary": "Creates an event of the type specified. The returned object should be first initialized and can then be passed to EventTarget.dispatchEvent.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "From version 67, creating touch events using this method is no longer supported."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createEvent()"
        }
    ],
    "dom-document-createnodeiterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createNodeIterator",
            "slug": "API/Document/createNodeIterator",
            "summary": "Returns a new NodeIterator object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createNodeIterator()"
        }
    ],
    "dom-document-createprocessinginstruction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createProcessingInstruction",
            "slug": "API/Document/createProcessingInstruction",
            "summary": "createProcessingInstruction() generates a new processing instruction node and returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createProcessingInstruction()"
        }
    ],
    "dom-document-createrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createRange",
            "slug": "API/Document/createRange",
            "summary": "The Document.createRange() method returns a new Range object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createRange()"
        }
    ],
    "dom-document-createtextnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createTextNode",
            "slug": "API/Document/createTextNode",
            "summary": "Creates a new Text node. This method can be used to escape HTML characters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createTextNode()"
        }
    ],
    "dom-document-createtreewalker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createTreeWalker",
            "slug": "API/Document/createTreeWalker",
            "summary": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.createTreeWalker()"
        }
    ],
    "dom-document-doctype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "doctype",
            "slug": "API/Document/doctype",
            "summary": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.doctype"
        }
    ],
    "dom-document-documentelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "documentElement",
            "slug": "API/Document/documentElement",
            "summary": "Document.documentElement returns the Element that is the root element of the document (for example, the <html> element for HTML documents).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.documentElement"
        }
    ],
    "dom-document-documenturi": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "documentURI",
            "slug": "API/Document/documentURI",
            "summary": "The documentURI read-only property of the Document interface returns the document location as a string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.documentURI"
        }
    ],
    "dom-nonelementparentnode-getelementbyid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementById",
            "slug": "API/Document/getElementById",
            "summary": "The Document method getElementById() returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.getElementById()"
        }
    ],
    "dom-document-getelementsbyclassname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByClassName",
            "slug": "API/Document/getElementsByClassName",
            "summary": "returns an array-like object of all child elements which have all of the given class name(s).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "getelementsbyclassname",
                "title": "getElementsByClassName"
            },
            "title": "Document.getElementsByClassName()"
        }
    ],
    "dom-document-getelementsbytagname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByTagName",
            "slug": "API/Document/getElementsByTagName",
            "summary": "returns an HTMLCollection of elements with the given tag name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "5.1"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.getElementsByTagName()"
        }
    ],
    "dom-document-getelementsbytagnamens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByTagNameNS",
            "slug": "API/Document/getElementsByTagNameNS",
            "summary": "Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.getElementsByTagNameNS()"
        }
    ],
    "dom-document-implementation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "implementation",
            "slug": "API/Document/implementation",
            "summary": "The Document.implementation property returns a DOMImplementation object associated with the current document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.implementation"
        }
    ],
    "dom-document-importnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "importNode",
            "slug": "API/Document/importNode",
            "summary": "The Document object's importNode() method creates a copy of a Node or DocumentFragment from another document, to be inserted into the current document later.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.importNode()"
        }
    ],
    "dom-parentnode-queryselector": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "querySelector",
            "slug": "API/Document/querySelector",
            "summary": "The Document method querySelector() returns the first Element within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "queryselector",
                "title": "querySelector/querySelectorAll"
            },
            "title": "Document.querySelector()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "querySelector",
            "slug": "API/ParentNode/querySelector",
            "summary": "The ParentNode mixin defines the querySelector() method as returning an Element representing the first element matching the specified group of selectors which are descendants of the object on which the method was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9",
                    "notes": "Internet Explorer 8 only supported CSS2 selectors."
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "queryselector",
                "title": "querySelector/querySelectorAll"
            },
            "title": "ParentNode.querySelector()"
        }
    ],
    "dom-parentnode-queryselectorall": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "querySelectorAll",
            "slug": "API/Document/querySelectorAll",
            "summary": "The Document method querySelectorAll() returns a static (not live) NodeList representing a list of the document's elements that match the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.querySelectorAll()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "querySelector",
            "slug": "API/Element/querySelector",
            "summary": "The querySelector() method of the Element interface returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelector()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.querySelector()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "querySelectorAll",
            "slug": "API/Element/querySelectorAll",
            "summary": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelectorAll()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.querySelectorAll()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "querySelectorAll",
            "slug": "API/ParentNode/querySelectorAll",
            "summary": "The ParentNode mixin defines the querySelectorAll() method as returning a NodeList representing a list of elements matching the specified group of selectors which are descendants of the object on which the method was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9",
                    "notes": "Internet Explorer 8 only supported CSS2 selectors."
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode.querySelectorAll()"
        }
    ],
    "interface-document": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "Document",
            "slug": "API/Document",
            "summary": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document"
        }
    ],
    "dom-documentfragment-documentfragment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "DocumentFragment",
            "slug": "API/DocumentFragment/DocumentFragment",
            "summary": "The DocumentFragment() constructor returns a new, empty DocumentFragment object .",
            "support": {
                "chrome": {
                    "version_added": "28"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment()"
        }
    ],
    "interface-documentfragment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "DocumentFragment",
            "slug": "API/DocumentFragment",
            "summary": "The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment"
        }
    ],
    "mixin-documentorshadowroot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentOrShadowRoot.json",
            "name": "DocumentOrShadowRoot",
            "slug": "API/DocumentOrShadowRoot",
            "summary": "The DocumentOrShadowRoot mixin of the Shadow DOM API provides APIs that are shared between documents and shadow roots. The following features are included in both Document and ShadowRoot. ",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentOrShadowRoot"
        }
    ],
    "documenttype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "DocumentType",
            "slug": "API/DocumentType",
            "summary": "The DocumentType interface represents a Node containing a doctype.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DocumentType"
        }
    ],
    "dom-element-attachshadow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "attachShadow",
            "slug": "API/Element/attachShadow",
            "summary": "The Element.attachShadow() method attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.attachShadow()"
        }
    ],
    "dom-element-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "attributes",
            "slug": "API/Element/attributes",
            "summary": "The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.attributes"
        }
    ],
    "dom-element-classlist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "classList",
            "slug": "API/Element/classList",
            "summary": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.",
            "support": {
                "chrome": [
                    {
                        "version_added": "22"
                    },
                    {
                        "version_added": "8",
                        "version_removed": "22",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "25"
                    },
                    {
                        "version_added": "18",
                        "version_removed": "25",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10",
                    "notes": "Not supported for SVG elements.",
                    "partial_implementation": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": [
                    {
                        "version_added": "6.1"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "6.1",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "version_added": "1.0",
                        "version_removed": "1.5",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "3",
                        "version_removed": "4.4",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "22",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ]
            },
            "caniuse": {
                "feature": "classlist",
                "title": "classList (DOMTokenList)"
            },
            "title": "Element.classList"
        }
    ],
    "dom-element-classname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "className",
            "slug": "API/Element/className",
            "summary": "The className property of the Element interface gets and sets the value of the class attribute of the specified element.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.className"
        }
    ],
    "dom-element-closest": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "closest",
            "slug": "API/Element/closest",
            "summary": "For browsers that do not support Element.closest(), but carry support for element.matches() (or a prefixed equivalent, meaning IE9+), a polyfill exists:",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "41"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "35"
                },
                "firefox_android": {
                    "version_added": "35"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "28"
                },
                "opera_android": {
                    "version_added": "28"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "41"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "element-closest",
                "title": "Element.closest()"
            },
            "title": "Element.closest()"
        }
    ],
    "dom-element-getattribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttribute",
            "slug": "API/Element/getAttribute",
            "summary": "The getAttribute() method of the Element interface returns the value of a specified attribute on the element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "23"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.getAttribute()"
        }
    ],
    "dom-element-getattributenames": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNames",
            "slug": "API/Element/getAttributeNames",
            "summary": "The getAttributeNames() method of the Element interface returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "48"
                },
                "opera_android": {
                    "version_added": "45"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "61"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.getAttributeNames()"
        }
    ],
    "dom-element-getattributenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNode",
            "slug": "API/Element/getAttributeNode",
            "summary": "Returns the specified attribute of the specified element, as an Attr node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.getAttributeNode()"
        }
    ],
    "dom-element-getattributenodens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNodeNS",
            "slug": "API/Element/getAttributeNodeNS",
            "summary": "Returns the Attr node for the attribute with the given namespace and name.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.getAttributeNodeNS()"
        }
    ],
    "dom-element-getattributens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNS",
            "slug": "API/Element/getAttributeNS",
            "summary": "The getAttributeNS() method of the Element interface returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true,
                    "notes": "Starting in Firefox 13, <code>null</code> is always returned instead of the empty string, as per the DOM4 specification. Previously, there were cases in which an empty string could be returned."
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.getAttributeNS()"
        }
    ],
    "dom-element-getelementsbyclassname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getElementsByClassName",
            "slug": "API/Element/getElementsByClassName",
            "summary": "The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "3",
                    "notes": "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9",
                    "notes": "This function is implemented in the <code>HTMLElement</code> API, meaning non-HTML elements (like SVG elements) cannot use this function."
                },
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.getElementsByClassName()"
        }
    ],
    "dom-element-getelementsbytagname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getElementsByTagName",
            "slug": "API/Element/getElementsByTagName",
            "summary": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec."
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "8",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "safari_ios": {
                    "version_added": "6",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                }
            },
            "title": "Element.getElementsByTagName()"
        }
    ],
    "dom-element-getelementsbytagnamens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getElementsByTagNameNS",
            "slug": "API/Element/getElementsByTagNameNS",
            "summary": "The Element.getElementsByTagNameNS() method returns a live HTMLCollection of elements with the given tag name belonging to the given namespace. It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true,
                    "notes": [
                        "The behavior of <code>element.getElementsByTagNameNS</code> changed between Firefox 3.5 and Firefox 3.6. In Firefox 3.5 and before, this function would automatically case-fold any queries so that a search for \"foo\" would match \"Foo\" or \"foo\". In Firefox 3.6 and later this function is now case-sensitive so that a query for \"foo\" will only match \"foo\" and not \"Foo\". For more background on this, please see the <a href='https://bugzil.la/542185#c5'>comment from Henri Sivonen about the change</a>. You can also look at the <a href='https://developer.mozilla.org/docs/Case_Sensitivity_in_class_and_id_Names'>relevant part of the standard, which states which parts of the API are case-sensitive and which parts aren't.</a>",
                        "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflects the spec change."
                    ]
                },
                "firefox_android": {
                    "version_added": true,
                    "notes": [
                        "The behavior of <code>element.getElementsByTagNameNS</code> changed between Firefox 3.5 and Firefox 3.6. In Firefox 3.5 and before, this function would automatically case-fold any queries so that a search for \"foo\" would match \"Foo\" or \"foo\". In Firefox 3.6 and later this function is now case-sensitive so that a query for \"foo\" will only match \"foo\" and not \"Foo\". For more background on this, please see the <a href='https://bugzil.la/542185#c5'>comment from Henri Sivonen about the change</a>. You can also look at the <a href='https://developer.mozilla.org/docs/Case_Sensitivity_in_class_and_id_Names'>relevant part of the standard, which states which parts of the API are case-sensitive and which parts aren't.</a>",
                        "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflects the spec change."
                    ]
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                }
            },
            "title": "Element.getElementsByTagNameNS()"
        }
    ],
    "dom-element-hasattribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "hasAttribute",
            "slug": "API/Element/hasAttribute",
            "summary": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.hasAttribute()"
        }
    ],
    "dom-element-hasattributens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "hasAttributeNS",
            "slug": "API/Element/hasAttributeNS",
            "summary": "hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.hasAttributeNS()"
        }
    ],
    "dom-element-hasattributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "hasAttributes",
            "slug": "API/Element/hasAttributes",
            "summary": "The hasAttributes() method of the Element interface returns a Boolean indicating whether the current element has any attributes or not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": true,
                    "notes": "[1] Before Firefox 35, it was implemented on the <code>Node</code> interface."
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.hasAttributes()"
        }
    ],
    "dom-element-id": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "id",
            "slug": "API/Element/id",
            "summary": "The id property of the Element interface represents the element's identifier, reflecting the id global attribute.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "42"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "42"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.id"
        }
    ],
    "dom-element-insertadjacentelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "insertAdjacentElement",
            "slug": "API/Element/insertAdjacentElement",
            "summary": "The insertAdjacentElement() method of the Element interface inserts a given element node at a given position relative to the element it is invoked upon.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": "8",
                    "notes": "This function is implemented in the <code>HTMLElement</code> API, meaning non-HTML elements (like SVG elements) cannot use this function."
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "insert-adjacent",
                "title": "Element.insertAdjacentElement() & Element.insertAdjacentText()"
            },
            "title": "Element.insertAdjacentElement()"
        }
    ],
    "dom-element-insertadjacenttext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "insertAdjacentText",
            "slug": "API/Element/insertAdjacentText",
            "summary": "The insertAdjacentText() method of the Element interface inserts a given text node at a given position relative to the element it is invoked upon.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": true,
                    "notes": "This function is implemented in the <code>HTMLElement</code> API, meaning non-HTML elements (like SVG elements) cannot use this function."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.insertAdjacentText()"
        }
    ],
    "dom-element-localname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "localName",
            "slug": "API/Element/localName",
            "summary": "The Element.localName read-only property returns the local part of the qualified name of an element.",
            "support": {
                "chrome": {
                    "version_added": "31",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "chrome_android": {
                    "version_added": "31",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "firefox_android": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "2.0",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "This API was previously available on the <code>Node</code> API."
                }
            },
            "title": "Element.localName"
        }
    ],
    "dom-element-matches": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "matches",
            "slug": "API/Element/matches",
            "summary": "The matches() method checks to see if the Element would be selected by the provided selectorString -- in other words -- checks if the element \"is\" the selector.",
            "support": {
                "chrome": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "4",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "18",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "edge": {
                    "version_added": "15"
                },
                "firefox": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "44",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "3.6",
                        "alternative_name": "mozMatchesSelector",
                        "notes": [
                            "Prior to Firefox 4, invalid selector strings caused false to be returned instead of throwing an exception.",
                            "See <a href='https://bugzil.la/1119718'>bug 1119718</a> for removal."
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "44",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "4",
                        "alternative_name": "mozMatchesSelector",
                        "notes": "See <a href='https://bugzil.la/1119718'>bug 1119718</a> for removal."
                    }
                ],
                "ie": {
                    "version_added": "9",
                    "alternative_name": "msMatchesSelector"
                },
                "opera": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": "15",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15",
                        "alternative_name": "oMatchesSelector"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": "14",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14",
                        "alternative_name": "oMatchesSelector"
                    }
                ],
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "5",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "8"
                    },
                    {
                        "version_added": "4.2",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "2.0"
                    },
                    {
                        "version_added": "1.0",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "37",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ]
            },
            "caniuse": {
                "feature": "matchesselector",
                "title": "matches() DOM method"
            },
            "title": "Element.matches()"
        }
    ],
    "dom-element-namespaceuri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "namespaceURI",
            "slug": "API/Element/namespaceURI",
            "summary": "The Element.namespaceURI read-only property returns the namespace URI of the element, or null if the element is not in a namespace.",
            "support": {
                "chrome": {
                    "version_added": "31",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "chrome_android": {
                    "version_added": "31",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true,
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "2.0",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "This API was previously available on the <code>Node</code> API."
                }
            },
            "title": "Element.namespaceURI"
        }
    ],
    "dom-element-prefix": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "prefix",
            "slug": "API/Element/prefix",
            "summary": "The Element.prefix read-only property returns the namespace prefix of the specified element, or null if no prefix is specified.",
            "support": {
                "chrome": {
                    "version_added": "31",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "chrome_android": {
                    "version_added": "31",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "firefox_android": {
                    "version_added": "48",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "2.0",
                    "notes": "This API was previously available on the <code>Node</code> API."
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "This API was previously available on the <code>Node</code> API."
                }
            },
            "title": "Element.prefix"
        }
    ],
    "dom-element-removeattribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "removeAttribute",
            "slug": "API/Element/removeAttribute",
            "summary": "The Element method removeAttribute() removes the attribute with the specified name from the element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.removeAttribute()"
        }
    ],
    "dom-element-removeattributenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "removeAttributeNode",
            "slug": "API/Element/removeAttributeNode",
            "summary": "The removeAttributeNode() method of the Element object removes the specified attribute from the current element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.removeAttributeNode()"
        }
    ],
    "dom-element-removeattributens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "removeAttributeNS",
            "slug": "API/Element/removeAttributeNS",
            "summary": "The removeAttributeNS() method of the Element interface removes the specified attribute from an element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.removeAttributeNS()"
        }
    ],
    "dom-element-setattribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttribute",
            "slug": "API/Element/setAttribute",
            "summary": "Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5",
                    "notes": "In Internet Explorer 7 and earlier, <code>setAttribute</code> doesn't set styles and removes events when you try to set them."
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.setAttribute()"
        }
    ],
    "dom-element-setattributenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttributeNode",
            "slug": "API/Element/setAttributeNode",
            "summary": "The setAttributeNode() method adds a new Attr node to the specified element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.setAttributeNode()"
        }
    ],
    "dom-element-setattributenodens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttributeNodeNS",
            "slug": "API/Element/setAttributeNodeNS",
            "summary": "setAttributeNodeNS adds a new namespaced attribute node to an element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true,
                    "notes": "Returns a <code>ClientRectList</code> with <a href='http://msdn.microsoft.com/en-us/library/hh826029(VS.85).aspx'>ClientRect</a> objects (which do not contain <code>x</code> and <code>y</code> properties) instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMRect'><code>DOMRect</code></a> objects."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.setAttributeNodeNS()"
        }
    ],
    "dom-element-setattributens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttributeNS",
            "slug": "API/Element/setAttributeNS",
            "summary": "setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Element.setAttributeNS()"
        }
    ],
    "dom-element-shadowroot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "shadowRoot",
            "slug": "API/Element/shadowRoot",
            "summary": "The Element.shadowRoot read-only property represents the shadow root hosted by the element.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.shadowRoot"
        }
    ],
    "dom-element-slot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "slot",
            "slug": "API/Element/slot",
            "summary": "The slot property of the Element interface returns the name of the shadow DOM slot the element is inserted in.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.slot"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "slot",
            "slug": "HTML/Global_attributes/slot",
            "summary": "The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <slot> element whose name attribute's value matches that slot attribute's value.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "slot"
        }
    ],
    "dom-element-tagname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "tagName",
            "slug": "API/Element/tagName",
            "summary": "The tagName read-only property of the Element interface returns the tag name of the element on which it's called.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.tagName"
        }
    ],
    "dom-element-toggleattribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "toggleAttribute",
            "slug": "API/Element/toggleAttribute",
            "summary": "The toggleAttribute() method of the Element interface toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": "69"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element.toggleAttribute()"
        }
    ],
    "interface-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "Element",
            "slug": "API/Element",
            "summary": "Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element"
        }
    ],
    "dom-event-event": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "Event",
            "slug": "API/Event/Event",
            "summary": "The Event() constructor creates a new Event.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event()"
        }
    ],
    "dom-event-bubbles": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "bubbles",
            "slug": "API/Event/bubbles",
            "summary": "The bubbles read-only property of the Event interface indicates whether the event bubbles up through the DOM or not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Event.bubbles"
        }
    ],
    "dom-event-cancelable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "cancelable",
            "slug": "API/Event/cancelable",
            "summary": "The cancelable read-only property of the Event interface indicates whether the event can be canceled, and therefore prevented as if the event never happened.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Event.cancelable"
        }
    ],
    "dom-event-cancelbubble": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "cancelBubble",
            "slug": "API/Event/cancelBubble",
            "summary": "The cancelBubble property of the Event interface is a historical alias to Event.stopPropagation(). Setting its value to true before returning from an event handler prevents propagation of the event. In later implementations, setting this to false does nothing. See Browser compatibility for details.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>."
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "53",
                    "notes": "Prior to Firefox 53, this property was defined on the <a href='https://developer.mozilla.org/docs/Web/API/UIEvent'><code>UIEvent</code></a> interface. See <a href='https://bugzil.la/1298970'>bug 1298970</a> for more details."
                },
                "firefox_android": {
                    "version_added": "53",
                    "notes": "Prior to Firefox 53, this property was defined on the <a href='https://developer.mozilla.org/docs/Web/API/UIEvent'><code>UIEvent</code></a> interface. See <a href='https://bugzil.la/1298970'>bug 1298970</a> for more details."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>."
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>."
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting with Samsung Internet 7.0 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>."
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>."
                }
            },
            "title": "Event.cancelBubble"
        }
    ],
    "dom-event-composed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "composed",
            "slug": "API/Event/composed",
            "summary": "The read-only composed property of the Event interface returns a Boolean which indicates whether or not the event will propagate across the shadow DOM boundary into the standard DOM.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.composed"
        }
    ],
    "dom-event-composedpath": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "composedPath",
            "slug": "API/Event/composedPath",
            "summary": "The composedPath() method of the Event interface returns the event’s path which is an array of the objects on which listeners will be invoked. This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "53"
                    },
                    {
                        "version_added": "50",
                        "version_removed": "53",
                        "alternative_name": "deepPath"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "53"
                    },
                    {
                        "version_added": "50",
                        "version_removed": "53",
                        "alternative_name": "deepPath"
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "40"
                    },
                    {
                        "version_added": "37",
                        "version_removed": "40",
                        "alternative_name": "deepPath"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "41"
                    },
                    {
                        "version_added": "37",
                        "version_removed": "41",
                        "alternative_name": "deepPath"
                    }
                ],
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": [
                    {
                        "version_added": "6.0"
                    },
                    {
                        "alternative_name": "deepPath",
                        "version_added": "5.0",
                        "version_removed": "6.0"
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "53"
                    },
                    {
                        "version_added": "50",
                        "version_removed": "53",
                        "alternative_name": "deepPath"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "53",
                        "alternative_name": "deepPath"
                    }
                ]
            },
            "title": "Event.composedPath()"
        }
    ],
    "dom-event-currenttarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "currentTarget",
            "slug": "API/Event/currentTarget",
            "summary": "The currentTarget read-only property of the Event interface identifies the current target for the event, as the event traverses the DOM. It always refers to the element to which the event handler has been attached, as opposed to Event.target, which identifies the element on which the event occurred and which may be its descendant.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "9",
                        "partial_implementation": true,
                        "notes": "On Internet Explorer 6 through 8, the event model is different. Event listeners are attached with the non-standard <a href='https://developer.mozilla.org/docs/Web/API/EventTarget/attachEvent'><code>EventTarget.attachEvent</code></a> method. In this model, there is no equivalent to <code>event.currentTarget</code> and <code>this</code> is the global object. One solution to emulate the <code>event.currentTarget</code> feature is to wrap your handler in a function calling the handler using <code>Function.prototype.call</code> with the element as a first argument. This way, <code>this</code> will be the expected value."
                    }
                ],
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.currentTarget"
        }
    ],
    "dom-event-defaultprevented": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "defaultPrevented",
            "slug": "API/Event/defaultPrevented",
            "summary": "The defaultPrevented read-only property of the Event interface returns a Boolean indicating whether or not the call to Event.preventDefault() canceled the event.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.defaultPrevented"
        }
    ],
    "dom-event-eventphase": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "eventPhase",
            "slug": "API/Event/eventPhase",
            "summary": "The eventPhase read-only property of the Event interface indicates which phase of the event flow is currently being evaluated.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.eventPhase"
        }
    ],
    "dom-event-istrusted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "isTrusted",
            "slug": "API/Event/isTrusted",
            "summary": "The isTrusted read-only property of the Event interface is a Boolean that is true when the event was generated by a user action, and false when the event was created or modified by a script or dispatched via EventTarget.dispatchEvent().",
            "support": {
                "chrome": {
                    "version_added": "46",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                },
                "chrome_android": {
                    "version_added": "46",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false,
                    "notes": "In Internet Explorer, all events are trusted except those that are created with the <code>createEvent()</code> method."
                },
                "opera": {
                    "version_added": "33",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                },
                "opera_android": {
                    "version_added": "33",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Starting with Samsung Internet 6.0 and Opera 40, untrusted events do not invoke the default action."
                },
                "webview_android": {
                    "version_added": "46",
                    "notes": "Starting with version 53, untrusted events do not invoke the default action."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                }
            },
            "title": "Event.isTrusted"
        }
    ],
    "dom-event-preventdefault": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "preventDefault",
            "slug": "API/Event/preventDefault",
            "summary": "The Event interface's preventDefault() method tells the user agent that if the event does not get explicitly handled, its default action should not be taken as it normally would be.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.preventDefault()"
        }
    ],
    "dom-event-stopimmediatepropagation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "stopImmediatePropagation",
            "slug": "API/Event/stopImmediatePropagation",
            "summary": "The stopImmediatePropagation() method of the Event interface prevents other listeners of the same event from being called.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.stopImmediatePropagation()"
        }
    ],
    "dom-event-stoppropagation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "stopPropagation",
            "slug": "API/Event/stopPropagation",
            "summary": "The stopPropagation() method of the Event interface prevents further propagation of the current event in the capturing and bubbling phases. It does not, however, prevent any default behaviors from occurring; for instance, clicks on links are still processed. If you want to stop those behaviors, see the preventDefault() method.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.stopPropagation()"
        }
    ],
    "dom-event-target": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "target",
            "slug": "API/Event/target",
            "summary": "The target property of the Event interface is a reference to the object onto which the event was dispatched. It is different from Event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.target"
        }
    ],
    "dom-event-timestamp": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "timeStamp",
            "slug": "API/Event/timeStamp",
            "summary": "The timeStamp read-only property of the Event interface returns the time (in milliseconds) at which the event was created.",
            "support": {
                "chrome": {
                    "version_added": "49",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "chrome_android": {
                    "version_added": "49",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true,
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "firefox_android": {
                    "version_added": true,
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "ie": {
                    "version_added": true,
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "opera": {
                    "version_added": "36",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "opera_android": {
                    "version_added": "36",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Starting with Samsung Internet 5.0, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "webview_android": {
                    "version_added": "49",
                    "notes": "Starting with version 49, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                }
            },
            "title": "Event.timeStamp"
        }
    ],
    "dom-event-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "type",
            "slug": "API/Event/type",
            "summary": "The type read-only property of the Event interface returns a string containing the event's type. It is set when the event is constructed and is the name commonly used to refer to the specific event, such as click, load, or error.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event.type"
        }
    ],
    "interface-event": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "Event",
            "slug": "API/Event",
            "summary": "The Event interface represents an event which takes place in the DOM.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event"
        }
    ],
    "dom-eventlistener-handleevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventListener.json",
            "name": "handleEvent",
            "slug": "API/EventListener/handleEvent",
            "summary": "The EventListener method handleEvent() method is called by the user agent when an event is sent to the EventListener, in order to handle events that occur on an observed EventTarget.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventListener.handleEvent()"
        }
    ],
    "callbackdef-eventlistener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventListener.json",
            "name": "EventListener",
            "slug": "API/EventListener",
            "summary": "The EventListener interface represents an object that can handle an event dispatched by an EventTarget object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventListener"
        }
    ],
    "dom-eventtarget-eventtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "EventTarget",
            "slug": "API/EventTarget/EventTarget",
            "summary": "The EventTarget() constructor creates a new EventTarget object instance.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": {
                    "version_added": "64"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "59"
                },
                "firefox_android": {
                    "version_added": "59"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "51"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": {
                    "version_added": "14"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "64"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventTarget()"
        }
    ],
    "dom-eventtarget-addeventlistener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "addEventListener",
            "slug": "API/EventTarget/addEventListener",
            "summary": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "attachEvent",
                        "version_added": "6",
                        "version_removed": "11",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.attachEvent()</code> method."
                    }
                ],
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before Samsung Internet 5.0, the <code>type</code> and <code>listener</code> parameters were optional."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional."
                }
            },
            "caniuse": {
                "feature": "addeventlistener",
                "title": "EventTarget.addEventListener()"
            },
            "title": "EventTarget.addEventListener()"
        }
    ],
    "dom-eventtarget-dispatchevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "dispatchEvent",
            "slug": "API/EventTarget/dispatchEvent",
            "summary": "Dispatches an Event at the specified EventTarget, (synchronously) invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) also apply to events dispatched manually with dispatchEvent().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "fireEvent",
                        "version_added": "6",
                        "version_removed": "11",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.fireEvent()</code> method."
                    }
                ],
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "dispatchevent",
                "title": "EventTarget.dispatchEvent"
            },
            "title": "EventTarget.dispatchEvent()"
        }
    ],
    "dom-eventtarget-removeeventlistener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "removeEventListener",
            "slug": "API/EventTarget/removeEventListener",
            "summary": "The EventTarget.removeEventListener() method removes from the EventTarget an event listener previously registered with EventTarget.addEventListener(). The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; see Matching event listeners for removal",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "detachEvent",
                        "version_added": "6",
                        "version_removed": "11",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.detachEvent()</code> method."
                    }
                ],
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventTarget.removeEventListener()"
        }
    ],
    "interface-eventtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "EventTarget",
            "slug": "API/EventTarget",
            "summary": "EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1",
                    "notes": "<code>window.EventTarget</code> did not exist on versions of Safari before 10.1."
                },
                "safari_ios": {
                    "version_added": "1",
                    "notes": "<code>window.EventTarget</code> did not exist on versions of Safari iOS before 10.3."
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventTarget"
        }
    ],
    "htmlcollection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCollection.json",
            "name": "HTMLCollection",
            "slug": "API/HTMLCollection",
            "summary": "The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCollection"
        }
    ],
    "mutation-observers": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "slotchange_event",
            "slug": "API/HTMLSlotElement/slotchange_event",
            "summary": "The slotchange event is fired on an HTMLSlotElement instance (<slot> element) when the node(s) contained in that slot change.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "mutationobserver",
                "title": "Mutation Observer"
            },
            "title": "HTMLSlotElement: slotchange event"
        }
    ],
    "dom-mutationobserver-mutationobserver": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "MutationObserver",
            "slug": "API/MutationObserver/MutationObserver",
            "summary": "The DOM MutationObserver() constructor — part of the MutationObserver interface — creates and returns a new observer which invokes a specified callback when DOM events occur.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "version_added": "18",
                        "version_removed": "26",
                        "prefix": "WebKit"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "version_added": "18",
                        "version_removed": "26",
                        "prefix": "WebKit"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "7",
                        "prefix": "WebKit"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "7",
                        "prefix": "WebKit"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "WebKit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "webview_android": [
                    {
                        "version_added": true
                    },
                    {
                        "version_added": true,
                        "version_removed": true,
                        "prefix": "WebKit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "26",
                        "prefix": "WebKit"
                    }
                ]
            },
            "title": "MutationObserver.MutationObserver()"
        }
    ],
    "dom-mutationobserver-disconnect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "disconnect",
            "slug": "API/MutationObserver/disconnect",
            "summary": "The MutationObserver method disconnect() tells the observer to stop watching for mutations.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationObserver.disconnect()"
        }
    ],
    "dom-mutationobserver-observe": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "observe",
            "slug": "API/MutationObserver/observe",
            "summary": "The MutationObserver method observe() configures the MutationObserver callback to begin receiving notifications of changes to the DOM that match the given options.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationObserver.observe()"
        }
    ],
    "dom-mutationobserver-takerecords": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "takeRecords",
            "slug": "API/MutationObserver/takeRecords",
            "summary": "The MutationObserver method takeRecords() returns a list of all matching DOM changes that have been detected but not yet processed by the observer's callback function, leaving the mutation queue empty.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationObserver.takeRecords()"
        }
    ],
    "interface-mutationobserver": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "MutationObserver",
            "slug": "API/MutationObserver",
            "summary": "The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "version_added": "18",
                        "version_removed": "26",
                        "prefix": "WebKit"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "version_added": "18",
                        "version_removed": "26",
                        "prefix": "WebKit"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "7",
                        "prefix": "WebKit"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "7",
                        "prefix": "WebKit"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "WebKit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "37"
                    },
                    {
                        "version_added": "37",
                        "version_removed": "≤37",
                        "prefix": "WebKit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "26",
                        "prefix": "WebKit"
                    }
                ]
            },
            "title": "MutationObserver"
        }
    ],
    "dom-mutationobserverinit-attributefilter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "attributeFilter",
            "slug": "API/MutationObserverInit/attributeFilter",
            "summary": "The MutationObserverInit dictionary's optional attributeFilter property is an array of strings specifying the names of the attributes whose values are to be monitored for changes.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11",
                    "notes": "Internet Explorer requires <code>attributes: true</code> when using <code>attributeFilter</code>. If <code>attributes: true</code> is not present, then Internet Explorer throws a syntax error."
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit.attributeFilter"
        }
    ],
    "dom-mutationobserverinit-attributeoldvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "attributeOldValue",
            "slug": "API/MutationObserverInit/attributeOldValue",
            "summary": "The MutationObserverInit dictionary's optional attributeOldValue property is used to specify whether or not to record the prior value of the altered attribute in MutationRecord objects denoting attribute value changes.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>attributeOldValue</code> has no default value; previously, its default value was <code>false</code>."
                },
                "firefox_android": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>attributeOldValue</code> has no default value; previously, its default value was <code>false</code>."
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit.attributeOldValue"
        }
    ],
    "dom-mutationobserverinit-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "attributes",
            "slug": "API/MutationObserverInit/attributes",
            "summary": "The MutationObserverInit dictionary's optional attributes property is used to specify whether or not to watch for attribute value changes on the node or nodes being observed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>attributes</code> has no default value; previously, its default value was <code>false</code>."
                },
                "firefox_android": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>attributes</code> has no default value; previously, its default value was <code>false</code>."
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit.attributes"
        }
    ],
    "dom-mutationobserverinit-characterdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "characterData",
            "slug": "API/MutationObserverInit/characterData",
            "summary": "The MutationObserverInit dictionary's optional characterData property is used to specify whether or not to monitor the node or nodes being observed for changes to their textual contents.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>characterData</code> has no default value; previously, its default value was <code>false</code>."
                },
                "firefox_android": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>characterData</code> has no default value; previously, its default value was <code>false</code>."
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit.characterData"
        }
    ],
    "dom-mutationobserverinit-characterdataoldvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "characterDataOldValue",
            "slug": "API/MutationObserverInit/characterDataOldValue",
            "summary": "The MutationObserverInit dictionary's optional characterDataOldValue property is used to specify whether or not the MutationRecord.oldValue property for DOM mutations should be set to the previous value of text nodes which changed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>characterDataOldValue</code> has no default value; previously, its default value was <code>false</code>."
                },
                "firefox_android": {
                    "version_added": "14",
                    "notes": "Starting in Firefox 36, <code>characterDataOldValue</code> has no default value; previously, its default value was <code>false</code>."
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit.characterDataOldValue"
        }
    ],
    "dom-mutationobserverinit-childlist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "childList",
            "slug": "API/MutationObserverInit/childList",
            "summary": "The MutationObserverInit dictionary's optional childList property indicates whether or not to monitor the specified node or nodes for the addition or removal of new child nodes.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit.childList"
        }
    ],
    "dom-mutationobserverinit-subtree": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "subtree",
            "slug": "API/MutationObserverInit/subtree",
            "summary": "The MutationObserverInit dictionary's optional subtree property can be set to true to monitor the targeted node and all of its descendants.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit.subtree"
        }
    ],
    "dictdef-mutationobserverinit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserverInit.json",
            "name": "MutationObserverInit",
            "slug": "API/MutationObserverInit",
            "summary": "The MutationObserverInit dictionary describes the configuration of a mutation observer. As such, it's primarily used as the type of the options parameter on the MutationObserver.observe() method.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0",
                        "version_removed": "1.5"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": false,
                        "version_removed": "26"
                    }
                ]
            },
            "title": "MutationObserverInit"
        }
    ],
    "mutationrecord": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "MutationRecord",
            "slug": "API/MutationRecord",
            "summary": "A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "MutationRecord"
        }
    ],
    "interface-namednodemap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "NamedNodeMap",
            "slug": "API/NamedNodeMap",
            "summary": "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "22",
                        "version_removed": "34",
                        "alternative_name": "mozNamedAttrMap"
                    },
                    {
                        "version_added": true,
                        "version_removed": "22"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "22",
                        "version_removed": "34",
                        "alternative_name": "mozNamedAttrMap"
                    },
                    {
                        "version_added": true,
                        "version_removed": "22"
                    }
                ],
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "NamedNodeMap"
        }
    ],
    "dom-node-appendchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "appendChild",
            "slug": "API/Node/appendChild",
            "summary": "The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.appendChild()"
        }
    ],
    "dom-node-baseuri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "baseURI",
            "slug": "API/Node/baseURI",
            "summary": "The baseURI read-only property returns the absolute base URL of a Node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.baseURI"
        }
    ],
    "dom-node-childnodes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "childNodes",
            "slug": "API/Node/childNodes",
            "summary": "The Node.childNodes read-only property returns a live NodeList of child nodes of the given element where the first child node is assigned index 0.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.childNodes"
        }
    ],
    "dom-node-clonenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "cloneNode",
            "slug": "API/Node/cloneNode",
            "summary": "The Node.cloneNode() method returns a duplicate of the node on which this method was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.cloneNode()"
        }
    ],
    "dom-node-comparedocumentposition": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "compareDocumentPosition",
            "slug": "API/Node/compareDocumentPosition",
            "summary": "The Node.compareDocumentPosition() method reports the position of the given node relative to another node in any document — not just the given node’s document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": {
                    "version_added": "9"
                },
                "ie": {
                    "version_added": "9",
                    "notes": "Only supports <code>contains</code> for elements"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "comparedocumentposition",
                "title": "Node.compareDocumentPosition()"
            },
            "title": "Node.compareDocumentPosition()"
        }
    ],
    "dom-node-contains": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "contains",
            "slug": "API/Node/contains",
            "summary": "The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node, i.e. the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": {
                    "version_added": "9"
                },
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Node</code> objects."
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.contains()"
        }
    ],
    "dom-node-firstchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "firstChild",
            "slug": "API/Node/firstChild",
            "summary": "The Node.firstChild read-only property returns the node's first child in the tree, or null if the node has no children.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.firstChild"
        }
    ],
    "dom-node-getrootnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "getRootNode",
            "slug": "API/Node/getRootNode",
            "summary": "The getRootNode() method of the Node interface returns the context object's root, which optionally includes the shadow root if it is available.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.getRootNode()"
        }
    ],
    "dom-node-haschildnodes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "hasChildNodes",
            "slug": "API/Node/hasChildNodes",
            "summary": "The Node.hasChildNodes() method returns a Boolean value indicating whether the given Node has child nodes or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.hasChildNodes()"
        }
    ],
    "dom-node-insertbefore": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "insertBefore",
            "slug": "API/Node/insertBefore",
            "summary": "The Node.insertBefore() method inserts a node before a reference node as a child of a specified parent node. ",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.insertBefore()"
        }
    ],
    "dom-node-isconnected": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isConnected",
            "slug": "API/Node/isConnected",
            "summary": "The isConnected read-only property of the Node interface returns a boolean indicating whether the node is connected (directly or indirectly) to the context object, for example the Document object in the case of the normal DOM, or the ShadowRoot in the case of a shadow DOM.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": {
                    "version_added": "51"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "38"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "51"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.isConnected"
        }
    ],
    "dom-node-isdefaultnamespace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isDefaultNamespace",
            "slug": "API/Node/isDefaultNamespace",
            "summary": "The Node.isDefaultNamespace() method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.isDefaultNamespace()"
        }
    ],
    "dom-node-isequalnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isEqualNode",
            "slug": "API/Node/isEqualNode",
            "summary": "The Node.isEqualNode() method tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that must match varies depending on the types of the nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.isEqualNode()"
        }
    ],
    "dom-node-issamenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isSameNode",
            "slug": "API/Node/isSameNode",
            "summary": "The isSameNode() method for Node objects tests whether two nodes are the same (that is, whether they reference the same object).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "48"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "10"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "48"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "10"
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.isSameNode()"
        }
    ],
    "dom-node-lastchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "lastChild",
            "slug": "API/Node/lastChild",
            "summary": "The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.lastChild"
        }
    ],
    "dom-node-lookupnamespaceuri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "lookupNamespaceURI",
            "slug": "API/Node/lookupNamespaceURI",
            "summary": "The Node.lookupNamespaceURI() method accepts a prefix and returns the namespace URI associated with it on the given node if found (and null if not).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.lookupNamespaceURI()"
        }
    ],
    "dom-node-nextsibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nextSibling",
            "slug": "API/Node/nextSibling",
            "summary": "The Node.nextSibling read-only property returns the node immediately following the specified one in their parent's childNodes, or returns null if the specified node is the last child in the parent element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.nextSibling"
        }
    ],
    "dom-node-nodename": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nodeName",
            "slug": "API/Node/nodeName",
            "summary": "The nodeName read-only property returns the name of the current Node as a string.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.nodeName"
        }
    ],
    "dom-node-nodetype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nodeType",
            "slug": "API/Node/nodeType",
            "summary": "The read-only Node.nodeType property is an integer that identifies what the node is. It distinguishes different kind of nodes from each other, such as elements, text and comments.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.nodeType"
        }
    ],
    "dom-node-nodevalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nodeValue",
            "slug": "API/Node/nodeValue",
            "summary": "The nodeValue property of the Node interface returns or sets the value of the current node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.nodeValue"
        }
    ],
    "dom-node-normalize": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "normalize",
            "slug": "API/Node/normalize",
            "summary": "The Node.normalize() method puts the specified node and all of its sub-tree into a \"normalized\" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.normalize()"
        }
    ],
    "dom-node-ownerdocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "ownerDocument",
            "slug": "API/Node/ownerDocument",
            "summary": "The ownerDocument read-only property of the Node interface returns the top-level document object of the node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": true
                    },
                    {
                        "version_added": "9",
                        "notes": "The <code>ownerDocument</code> of doctype nodes (that is, nodes for which <code>Node.nodeType</code> is <code>Node.DOCUMENT_TYPE_NODE</code> or 10) is no longer null. Instead, the <code>ownerDocument</code> is the document on which <code>document.implementation.createDocumentType()</code> was called."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": true
                    },
                    {
                        "version_added": "9",
                        "notes": "The <code>ownerDocument</code> of doctype nodes (that is, nodes for which <code>Node.nodeType</code> is <code>Node.DOCUMENT_TYPE_NODE</code> or 10) is no longer null. Instead, the <code>ownerDocument</code> is the document on which <code>document.implementation.createDocumentType()</code> was called."
                    }
                ],
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.ownerDocument"
        }
    ],
    "dom-node-parentelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "parentElement",
            "slug": "API/Node/parentElement",
            "summary": "The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": {
                    "version_added": "9"
                },
                "ie": {
                    "version_added": "9",
                    "notes": "Only supported on <code>Element</code>."
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.parentElement"
        }
    ],
    "dom-node-parentnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "parentNode",
            "slug": "API/Node/parentNode",
            "summary": "The Node.parentNode read-only property returns the parent of the specified node in the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.parentNode"
        }
    ],
    "dom-node-previoussibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "previousSibling",
            "slug": "API/Node/previousSibling",
            "summary": "The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Node.previousSibling"
        }
    ],
    "dom-node-removechild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "removeChild",
            "slug": "API/Node/removeChild",
            "summary": "The Node.removeChild() method removes a child node from the DOM and returns the removed node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.removeChild()"
        }
    ],
    "dom-node-replacechild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "replaceChild",
            "slug": "API/Node/replaceChild",
            "summary": "The Node.replaceChild() method replaces a child node within the given (parent) node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node.replaceChild()"
        }
    ],
    "dom-node-textcontent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "textContent",
            "slug": "API/Node/textContent",
            "summary": "The textContent property of the Node interface represents the text content of the node and its descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "textcontent",
                "title": "Node.textContent"
            },
            "title": "Node.textContent"
        }
    ],
    "interface-node": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "Node",
            "slug": "API/Node",
            "summary": "The DOM Node interface is an abstract base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "7",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "safari": {
                    "version_added": "1.1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "safari_ios": {
                    "version_added": "1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                }
            },
            "title": "Node"
        }
    ],
    "dom-nodefilter-acceptnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeFilter.json",
            "name": "acceptNode",
            "slug": "API/NodeFilter/acceptNode",
            "summary": "The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeFilter.acceptNode()"
        }
    ],
    "interface-nodefilter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeFilter.json",
            "name": "NodeFilter",
            "slug": "API/NodeFilter",
            "summary": "A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. A NodeFilter knows nothing about the document or traversing nodes; it only knows how to evaluate a single node against the provided filter.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeFilter"
        }
    ],
    "dom-nodeiterator-filter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "filter",
            "slug": "API/NodeIterator/filter",
            "summary": "The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator.filter"
        }
    ],
    "dom-nodeiterator-nextnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "nextNode",
            "slug": "API/NodeIterator/nextNode",
            "summary": "The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set.  The first call to nextNode() returns the first node in the set.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator.nextNode()"
        }
    ],
    "dom-nodeiterator-pointerbeforereferencenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "pointerBeforeReferenceNode",
            "slug": "API/NodeIterator/pointerBeforeReferenceNode",
            "summary": "The NodeIterator.pointerBeforeReferenceNode read-only property returns a Boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false) the anchor node indicated by the NodeIterator.referenceNode property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator.pointerBeforeReferenceNode"
        }
    ],
    "dom-nodeiterator-previousnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "previousNode",
            "slug": "API/NodeIterator/previousNode",
            "summary": "The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator.previousNode()"
        }
    ],
    "dom-nodeiterator-referencenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "referenceNode",
            "slug": "API/NodeIterator/referenceNode",
            "summary": "The NodeIterator.referenceNode read-only returns the Node to which the iterator is anchored; as new nodes are inserted, the iterator remains anchored to the reference node as specified by this property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator.referenceNode"
        }
    ],
    "dom-nodeiterator-root": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "root",
            "slug": "API/NodeIterator/root",
            "summary": "The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator.root"
        }
    ],
    "dom-nodeiterator-whattoshow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "whatToShow",
            "slug": "API/NodeIterator/whatToShow",
            "summary": "The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator.whatToShow"
        }
    ],
    "nodeiterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "NodeIterator",
            "slug": "API/NodeIterator",
            "summary": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator"
        }
    ],
    "dom-nodelist-item": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "item",
            "slug": "API/NodeList/item",
            "summary": "Returns a node from a NodeList by index. This method doesn't throw exceptions as long as you provide arguments. A value of null is returned if the index is out of range, and a TypeError is thrown if no argument is provided.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeList.item()"
        }
    ],
    "dom-nodelist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "length",
            "slug": "API/NodeList/length",
            "summary": "The NodeList.length property returns the number of items in a NodeList.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeList.length"
        }
    ],
    "interface-nodelist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "NodeList",
            "slug": "API/NodeList",
            "summary": "NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeList"
        }
    ],
    "dom-nondocumenttypechildnode-nextelementsibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NonDocumentTypeChildNode.json",
            "name": "nextElementSibling",
            "slug": "API/NonDocumentTypeChildNode/nextElementSibling",
            "summary": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only implemented for <code>Element</code>, not for <code>CharacterData</code>. See <a href='https://developer.mozilla.org/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling#Polyfill_for_Internet_Explorer_9_and_Safari'>polyfill</a>."
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NonDocumentTypeChildNode.nextElementSibling"
        }
    ],
    "dom-nondocumenttypechildnode-previouselementsibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NonDocumentTypeChildNode.json",
            "name": "previousElementSibling",
            "slug": "API/NonDocumentTypeChildNode/previousElementSibling",
            "summary": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only implemented for <code>Element</code>, not for <code>CharacterData</code>. See <a href='https://developer.mozilla.org/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling#Polyfill_for_Internet_Explorer_9_and_Safari'>polyfill</a>."
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NonDocumentTypeChildNode.previousElementSibling"
        }
    ],
    "interface-nondocumenttypechildnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NonDocumentTypeChildNode.json",
            "name": "NonDocumentTypeChildNode",
            "slug": "API/NonDocumentTypeChildNode",
            "summary": "The NonDocumentTypeChildNode interface contains methods that are particular to Node objects that can have a parent, but not suitable for DocumentType.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NonDocumentTypeChildNode"
        }
    ],
    "dom-parentnode-append": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "append",
            "slug": "API/ParentNode/append",
            "summary": "The ParentNode.append() method inserts a set of Node objects or DOMString objects after the last child of the ParentNode. ",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode.append()"
        }
    ],
    "dom-parentnode-childelementcount": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "childElementCount",
            "slug": "API/ParentNode/childElementCount",
            "summary": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode.childElementCount"
        }
    ],
    "dom-parentnode-children": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "children",
            "slug": "API/ParentNode/children",
            "summary": "The ParentNode property children is a read-only property that returns a live HTMLCollection which contains all of the child elements of the node upon which it was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9",
                    "notes": "Internet Explorer 6, 7 and 8 supported it, but erroneously includes <code>Comment</code> nodes."
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode.children"
        }
    ],
    "dom-parentnode-firstelementchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "firstElementChild",
            "slug": "API/ParentNode/firstElementChild",
            "summary": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode.firstElementChild"
        }
    ],
    "dom-parentnode-lastelementchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "lastElementChild",
            "slug": "API/ParentNode/lastElementChild",
            "summary": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode.lastElementChild"
        }
    ],
    "dom-parentnode-prepend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "prepend",
            "slug": "API/ParentNode/prepend",
            "summary": "The ParentNode.prepend() method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode.prepend()"
        }
    ],
    "dom-parentnode-replacechildren": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ParentNode.json",
            "name": "replaceChildren",
            "slug": "API/ParentNode/replaceChildren",
            "summary": "The ParentNode.replaceChildren() method replaces the existing children of a Node with a specified new set of children. These can be DOMString or Node objects.",
            "support": {
                "chrome": {
                    "version_added": "86"
                },
                "chrome_android": {
                    "version_added": "86"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "72"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "86"
                },
                "edge_blink": {
                    "version_added": "86"
                }
            },
            "title": "ParentNode.replaceChildren()"
        }
    ],
    "parentnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ParentNode.json",
            "name": "ParentNode",
            "slug": "API/ParentNode",
            "summary": "The ParentNode mixin contains methods and properties that are common to all types of Node objects that can have children.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ParentNode"
        }
    ],
    "processinginstruction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProcessingInstruction.json",
            "name": "ProcessingInstruction",
            "slug": "API/ProcessingInstruction",
            "summary": "The ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "ProcessingInstruction"
        }
    ],
    "dom-range-range": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "Range",
            "slug": "API/Range/Range",
            "summary": "The Range() constructor returns a newly created Range object whose start and end is the global Document object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range()"
        }
    ],
    "dom-range-clonecontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "cloneContents",
            "slug": "API/Range/cloneContents",
            "summary": "The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.cloneContents()"
        }
    ],
    "dom-range-clonerange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "cloneRange",
            "slug": "API/Range/cloneRange",
            "summary": "The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.cloneRange()"
        }
    ],
    "dom-range-collapse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "collapse",
            "slug": "API/Range/collapse",
            "summary": "The Range.collapse() method collapses the Range to one of its boundary points.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.collapse()"
        }
    ],
    "dom-range-commonancestorcontainer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "commonAncestorContainer",
            "slug": "API/Range/commonAncestorContainer",
            "summary": "The Range.commonAncestorContainer read-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the Range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the common ancestor container.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.commonAncestorContainer"
        }
    ],
    "dom-range-compareboundarypoints": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "compareBoundaryPoints",
            "slug": "API/Range/compareBoundaryPoints",
            "summary": "The Range.compareBoundaryPoints() method compares the boundary points of the Range with those of another range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.compareBoundaryPoints()"
        }
    ],
    "dom-range-comparepoint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "comparePoint",
            "slug": "API/Range/comparePoint",
            "summary": "The Range.comparePoint() method returns -1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.comparePoint()"
        }
    ],
    "dom-range-deletecontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "deleteContents",
            "slug": "API/Range/deleteContents",
            "summary": "The Range.deleteContents() method removes the contents of the Range from the Document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.deleteContents()"
        }
    ],
    "dom-range-detach": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "detach",
            "slug": "API/Range/detach",
            "summary": "The Range.detach() method does nothing. It used to disable the Range object and enable the browser to release associated resources. The method has been kept for compatibility.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Since April 2014 this method is a <a href='https://src.chromium.org/viewvc/blink?revision=173010&view=revision'>no-op in Chrome</a>."
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "version_removed": "15",
                    "notes": "Starting in Firefox 15.0, this method is a no-op and has no effect."
                },
                "firefox_android": {
                    "version_added": "4",
                    "version_removed": "15",
                    "notes": "Starting in Firefox 15.0, this method is a no-op and has no effect."
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true,
                    "notes": "Since August 2015 this method is a no-op in <a href='https://webkit.org/b/148454'>WebKit-based browsers</a>."
                },
                "safari_ios": {
                    "version_added": true,
                    "notes": "Since August 2015 this method is a no-op in <a href='https://webkit.org/b/148454'>WebKit-based browsers</a>."
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Since April 2014 this method is a <a href='https://src.chromium.org/viewvc/blink?revision=173010&view=revision'>no-op in Chrome</a>."
                }
            },
            "title": "Range.detach()"
        }
    ],
    "dom-range-extractcontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "extractContents",
            "slug": "API/Range/extractContents",
            "summary": "The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.extractContents()"
        }
    ],
    "dom-range-insertnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "insertNode",
            "slug": "API/Range/insertNode",
            "summary": "The Range.insertNode() method inserts a node at the start of the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.insertNode()"
        }
    ],
    "dom-range-intersectsnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "intersectsNode",
            "slug": "API/Range/intersectsNode",
            "summary": "The Range.intersectsNode() method returns a boolean indicating whether the given Node intersects the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": {
                    "version_added": "19"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.intersectsNode()"
        }
    ],
    "dom-range-ispointinrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "isPointInRange",
            "slug": "API/Range/isPointInRange",
            "summary": "The Range.isPointInRange() method returns a boolean indicating whether the given point is in the Range. It returns true if the point (cursor position) at offset within ReferenceNode is within this range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.isPointInRange()"
        }
    ],
    "dom-range-selectnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "selectNode",
            "slug": "API/Range/selectNode",
            "summary": "The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.selectNode()"
        }
    ],
    "dom-range-selectnodecontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "selectNodeContents",
            "slug": "API/Range/selectNodeContents",
            "summary": "The Range.selectNodeContents() method sets the Range to contain the contents of a Node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.selectNodeContents()"
        }
    ],
    "dom-range-setend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setEnd",
            "slug": "API/Range/setEnd",
            "summary": "The Range.setEnd() method sets the end position of a Range to be located at the given offset into the specified node x.Setting the end point above (higher in the document) than the start point will result in a collapsed range with the start and end points both set to the specified end position.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.setEnd()"
        }
    ],
    "dom-range-setendafter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setEndAfter",
            "slug": "API/Range/setEndAfter",
            "summary": "The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.setEndAfter()"
        }
    ],
    "dom-range-setendbefore": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setEndBefore",
            "slug": "API/Range/setEndBefore",
            "summary": "The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.setEndBefore()"
        }
    ],
    "dom-range-setstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setStart",
            "slug": "API/Range/setStart",
            "summary": "The Range.setStart() method sets the start position of a Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.setStart()"
        }
    ],
    "dom-range-setstartafter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setStartAfter",
            "slug": "API/Range/setStartAfter",
            "summary": "The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.setStartAfter()"
        }
    ],
    "dom-range-setstartbefore": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setStartBefore",
            "slug": "API/Range/setStartBefore",
            "summary": "The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.setStartBefore()"
        }
    ],
    "dom-range-surroundcontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "surroundContents",
            "slug": "API/Range/surroundContents",
            "summary": "The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.surroundContents()"
        }
    ],
    "dom-range-stringifier": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "toString",
            "slug": "API/Range/toString",
            "summary": "The Range.toString() method is a stringifier returning the text of the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Range.toString()"
        }
    ],
    "interface-range": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "Range",
            "slug": "API/Range",
            "summary": "The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Starting with Firefox 13, the <code>Range</code> object throws a <code>DOMException</code> as defined in DOM 4, instead of a <code>RangeException</code> defined in prior specifications."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Starting with Firefox 13, the <code>Range</code> object throws a <code>DOMException</code> as defined in DOM 4, instead of a <code>RangeException</code> defined in prior specifications."
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range"
        }
    ],
    "dom-shadowroot-host": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "host",
            "slug": "API/ShadowRoot/host",
            "summary": "The host read-only property of the ShadowRoot returns a reference to the DOM element the ShadowRoot is attached to.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": {
                    "version_added": "57"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "57"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot.host"
        }
    ],
    "dom-shadowroot-mode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "mode",
            "slug": "API/ShadowRoot/mode",
            "summary": "The mode property of the ShadowRoot specifies its mode — either open or closed. This defines whether or not the shadow root's internal features are accessible from JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": {
                    "version_added": "57"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "57"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot.mode"
        }
    ],
    "interface-shadowroot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "ShadowRoot",
            "slug": "API/ShadowRoot",
            "summary": "The ShadowRoot interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": {
                    "version_added": "57"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "57"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot"
        }
    ],
    "dom-slotable-assignedslot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Slottable.json",
            "name": "assignedSlot",
            "slug": "API/Slottable/assignedSlot",
            "summary": "The assignedSlot read-only property of the Slottable interface returns an HTMLSlotElement representing the <slot> element the node is inserted in.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Slottable: assignedSlot"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "assignedSlot",
            "slug": "API/Text/assignedSlot",
            "summary": "The assignedSlot property of the Text interface returns the HTMLSlotElement object associated with the element.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement.assignedSlot"
        }
    ],
    "slotable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Slottable.json",
            "name": "Slottable",
            "slug": "API/Slottable",
            "summary": "The Slottable mixin defines features that allow nodes to become the contents of a <slot> element — the following features are included in both Element and Text.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Slottable"
        }
    ],
    "dom-staticrange-staticrange": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "StaticRange",
            "slug": "API/StaticRange/StaticRange",
            "summary": "The StaticRange() constructor creates a new StaticRange object representing a span of content within the DOM.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "71"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": {
                    "version_added": "13.4"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "StaticRange.StaticRange()"
        }
    ],
    "interface-staticrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "StaticRange",
            "slug": "API/StaticRange",
            "summary": "The DOM StaticRange interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69",
                    "notes": "In Firefox, <code>StaticRange</code> can currently only be used by browser-internal code or code with enhanced permissions; it is not yet exposed to the web."
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange"
        }
    ],
    "dom-text-text": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "Text",
            "slug": "API/Text/Text",
            "summary": "The Text() constructor returns a newly created Text object with the optional DOMString given in parameter as its textual content.",
            "support": {
                "chrome": {
                    "version_added": "28"
                },
                "chrome_android": {
                    "version_added": "28"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": "2.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Text()"
        }
    ],
    "dom-text-splittext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "splitText",
            "slug": "API/Text/splitText",
            "summary": "The Text.splitText() method breaks the Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Before Chrome 30, the <code>offset</code> argument was optional."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Before Chrome 30, the <code>offset</code> argument was optional."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true,
                    "notes": "Before Opera 17, the <code>offset</code> argument was optional."
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Before Opera 17, the <code>offset</code> argument was optional."
                },
                "safari": {
                    "version_added": true,
                    "notes": "The <code>offset</code> argument is optional."
                },
                "safari_ios": {
                    "version_added": true,
                    "notes": "The <code>offset</code> argument is optional."
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before Samsung Internet 2.0, the <code>offset</code> argument was optional."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Before version 4.4, the <code>offset</code> argument was optional."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 30, the <code>offset</code> argument was optional."
                }
            },
            "title": "Text.splitText()"
        }
    ],
    "dom-text-wholetext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "wholeText",
            "slug": "API/Text/wholeText",
            "summary": "The Text.wholeText read-only property returns the full text of all Text nodes logically adjacent to the node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Text.wholeText"
        }
    ],
    "text": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "Text",
            "slug": "API/Text",
            "summary": "The Text interface represents the textual content of Element or Attr. ",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Text"
        }
    ],
    "dom-treewalker-currentnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "currentNode",
            "slug": "API/TreeWalker/currentNode",
            "summary": "The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.currentNode"
        }
    ],
    "dom-treewalker-filter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "filter",
            "slug": "API/TreeWalker/filter",
            "summary": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.filter"
        }
    ],
    "dom-treewalker-firstchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "firstChild",
            "slug": "API/TreeWalker/firstChild",
            "summary": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.firstChild()"
        }
    ],
    "dom-treewalker-lastchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "lastChild",
            "slug": "API/TreeWalker/lastChild",
            "summary": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.lastChild()"
        }
    ],
    "dom-treewalker-nextnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "nextNode",
            "slug": "API/TreeWalker/nextNode",
            "summary": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.nextNode()"
        }
    ],
    "dom-treewalker-nextsibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "nextSibling",
            "slug": "API/TreeWalker/nextSibling",
            "summary": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.nextSibling()"
        }
    ],
    "dom-treewalker-parentnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "parentNode",
            "slug": "API/TreeWalker/parentNode",
            "summary": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker's root node, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.parentNode()"
        }
    ],
    "dom-treewalker-previousnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "previousNode",
            "slug": "API/TreeWalker/previousNode",
            "summary": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.previousNode()"
        }
    ],
    "dom-treewalker-previoussibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "previousSibling",
            "slug": "API/TreeWalker/previousSibling",
            "summary": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.previousSibling()"
        }
    ],
    "dom-treewalker-root": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "root",
            "slug": "API/TreeWalker/root",
            "summary": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.root"
        }
    ],
    "dom-treewalker-whattoshow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "whatToShow",
            "slug": "API/TreeWalker/whatToShow",
            "summary": "The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker.whatToShow"
        }
    ],
    "interface-treewalker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "TreeWalker",
            "slug": "API/TreeWalker",
            "summary": "The TreeWalker object represents the nodes of a document subtree and a position within them.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker"
        }
    ],
    "dom-window-event": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "event",
            "slug": "API/Window/event",
            "summary": "The read-only Window property event returns the Event which is currently being handled by the site's code. Outside the context of an event handler, the value is always undefined.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "66"
                    },
                    {
                        "version_added": "63",
                        "notes": "This was briefly enabled by default in 65, then removed again while related compatibility issues are sorted out (see <a href='https://bugzil.la/1520756'>bug 1520756</a>).",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.window.event.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "66"
                    },
                    {
                        "version_added": "63",
                        "notes": "This was briefly enabled by default in 65, then removed again while related compatibility issues are sorted out (see <a href='https://bugzil.la/1520756'>bug 1520756</a>).",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.window.event.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.event"
        }
    ],
    "xmldocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLDocument.json",
            "name": "XMLDocument",
            "slug": "API/XMLDocument",
            "summary": "The XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.",
            "support": {
                "chrome": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "34",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "18",
                        "version_removed": "34",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": true,
                        "version_removed": "21",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": true,
                        "version_removed": "21",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "safari": [
                    {
                        "version_added": "10"
                    },
                    {
                        "version_added": "3",
                        "version_removed": "10",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "10"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "10",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "2.0"
                    },
                    {
                        "version_added": "1.0",
                        "version_removed": "2.0",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "37"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "37",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "34",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ]
            },
            "title": "XMLDocument"
        }
    ],
    "shadow-tree-slots": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/slot.json",
            "name": "slot",
            "slug": "HTML/Element/slot",
            "summary": "The HTML <slot> element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<slot>"
        }
    ]
}
