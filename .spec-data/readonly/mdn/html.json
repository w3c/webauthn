{
    "handler-abstractworker-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractWorker.json",
            "name": "onerror",
            "slug": "API/AbstractWorker/onerror",
            "summary": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbstractWorker.onerror"
        }
    ],
    "abstractworker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractWorker.json",
            "name": "AbstractWorker",
            "slug": "API/AbstractWorker",
            "summary": "The AbstractWorker interface of the Web Workers API is an abstract interface that defines properties and methods that are common to all types of worker, including not only the basic Worker, but also ServiceWorker and SharedWorker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbstractWorker"
        }
    ],
    "dom-audiotrack-enabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "enabled",
            "slug": "API/AudioTrack/enabled",
            "summary": "The AudioTrack property enabled specifies whether or not the described audio track is currently enabled for use. If the track is disabled by setting enabled to false, the track is muted and does not produce audio.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack.enabled"
        }
    ],
    "dom-audiotrack-id": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "id",
            "slug": "API/AudioTrack/id",
            "summary": "The id property contains a string which uniquely identifies the track represented by the AudioTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack.id"
        }
    ],
    "dom-audiotrack-kind": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "kind",
            "slug": "API/AudioTrack/kind",
            "summary": "The kind property contains a string indicating the category of audio contained in the AudioTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack.kind"
        }
    ],
    "dom-audiotrack-label": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "label",
            "slug": "API/AudioTrack/label",
            "summary": "The read-only AudioTrack property label returns a string specifying the audio track's human-readable label, if one is available; otherwise, it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack.label"
        }
    ],
    "dom-audiotrack-language": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "language",
            "slug": "API/AudioTrack/language",
            "summary": "The read-only AudioTrack property language returns a string identifying the language used in the audio track.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack.language"
        }
    ],
    "audiotrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "AudioTrack",
            "slug": "API/AudioTrack",
            "summary": "The AudioTrack interface represents a single audio track from one of the HTML media elements, <audio> or <video>. ",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack"
        }
    ],
    "event-media-addtrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "addtrack_event",
            "slug": "API/AudioTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a track is added to an AudioTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: addtrack event"
        },
        {
            "engines": [
                "blink"
            ],
            "filename": "api/TextTrackList.json",
            "name": "addTrack_event",
            "slug": "API/TextTrackList/addTrack_event",
            "summary": "The addtrack event is fired when a track is added to a TextTrackList.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TextTrackList: addtrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "addtrack_event",
            "slug": "API/VideoTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a track is added to a VideoTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: addtrack event"
        }
    ],
    "event-media-change": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "change_event",
            "slug": "API/AudioTrackList/change_event",
            "summary": "The change event is fired when an audio track is enabled or disabled, for example by changing the track's enabled property.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: change event"
        },
        {
            "engines": [
                "blink"
            ],
            "filename": "api/TextTrackList.json",
            "name": "change_event",
            "slug": "API/TextTrackList/change_event",
            "summary": "The change event is fired when a text track is made active or inactive, or a textTrackList is otherwise changed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TextTrackList: change event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "change_event",
            "slug": "API/VideoTrackList/change_event",
            "summary": "The change event is fired when a video track is made active or inactive, for example by changing the track's selected property.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: change event"
        }
    ],
    "dom-audiotracklist-gettrackbyid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "getTrackById",
            "slug": "API/AudioTrackList/getTrackById",
            "summary": "The AudioTrackList method getTrackById() returns the first AudioTrack object from the track list whose id matches the specified string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList.getTrackById()"
        }
    ],
    "dom-audiotracklist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "length",
            "slug": "API/AudioTrackList/length",
            "summary": "The read-only AudioTrackList property length returns the number of entries in the AudioTrackList, each of which is an AudioTrack representing one audio track in the media element.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList.length"
        }
    ],
    "handler-tracklist-onaddtrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "onaddtrack",
            "slug": "API/AudioTrackList/onaddtrack",
            "summary": "The AudioTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new audio track has been added to the media element whose audio tracks the AudioTrackList represents.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList.onaddtrack"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "onaddtrack",
            "slug": "API/VideoTrackList/onaddtrack",
            "summary": "The VideoTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new video track has been added to the media element whose video tracks the VideoTrackList represents.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList.onaddtrack"
        }
    ],
    "handler-tracklist-onchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "onchange",
            "slug": "API/AudioTrackList/onchange",
            "summary": "The AudioTrackList property onchange is an event handler which is called when the change event occurs, indicating that one or more of the AudioTracks in the AudioTrackList have been enabled or disabled.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList.onchange"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "onchange",
            "slug": "API/VideoTrackList/onchange",
            "summary": "The VideoTrackList property onchange is an event handler which is called when the change event occurs, indicating that a VideoTrack in the VideoTrackList has been made active.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList.onchange"
        }
    ],
    "handler-tracklist-onremovetrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "onremovetrack",
            "slug": "API/AudioTrackList/onremovetrack",
            "summary": "The AudioTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that an audio track has been removed from the media element, and therefore also from the AudioTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList.onremovetrack"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "onremovetrack",
            "slug": "API/VideoTrackList/onremovetrack",
            "summary": "The VideoTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that a video track has been removed from the media element, and therefore also from the VideoTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList.onremovetrack"
        }
    ],
    "event-media-removetrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "removetrack_event",
            "slug": "API/AudioTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a track is removed from an AudioTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: removetrack event"
        },
        {
            "engines": [
                "blink"
            ],
            "filename": "api/TextTrackList.json",
            "name": "removeTrack_event",
            "slug": "API/TextTrackList/removeTrack_event",
            "summary": "The removetrack event is fired when a track is removed from a TextTrackList.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TextTrackList: removeTrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "removetrack_event",
            "slug": "API/VideoTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a track is removed from a VideoTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: removetrack event"
        }
    ],
    "audiotracklist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "AudioTrackList",
            "slug": "API/AudioTrackList",
            "summary": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList"
        }
    ],
    "the-beforeunloadevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BeforeUnloadEvent.json",
            "name": "BeforeUnloadEvent",
            "slug": "API/BeforeUnloadEvent",
            "summary": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "BeforeUnloadEvent"
        }
    ],
    "dom-broadcastchannel": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "BroadcastChannel",
            "slug": "API/BroadcastChannel/BroadcastChannel",
            "summary": "The BroadcastChannel() constructor creates a new BroadcastChannel and connects it to the underlying channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel()"
        }
    ],
    "dom-broadcastchannel-close": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "close",
            "slug": "API/BroadcastChannel/close",
            "summary": "The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel.close()"
        }
    ],
    "event-message": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "message_event",
            "slug": "API/BroadcastChannel/message_event",
            "summary": "The message event is fired on a BroadcastChannel object when a message arrives on that channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "message_event",
            "slug": "API/DedicatedWorkerGlobalScope/message_event",
            "summary": "The message event is fired on a DedicatedWorkerGlobalScope object when the worker receives a message from its parent (i.e. when the parent sends a message using Worker.postMessage()).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "message_event",
            "slug": "API/EventSource/message_event",
            "summary": "The message event of the EventSource API is fired when data is received through an event source.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "message_event",
            "slug": "API/MessagePort/message_event",
            "summary": "The message event is fired on a MessagePort object when a message arrives on that channel.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "partial_implementation": true,
                    "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: message event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WebSocket.json",
            "name": "message_event",
            "slug": "API/WebSocket/message_event",
            "summary": "The message event is fired when data is received through a WebSocket.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket: message event"
        },
        {
            "engines": [
                "blink"
            ],
            "filename": "api/Window.json",
            "name": "message_event",
            "slug": "API/Window/message_event",
            "summary": "The message event is fired on a Window object when the window receives a message, for example from a call to Window.postMessage() from another browsing context.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "message_event",
            "slug": "API/Worker/message_event",
            "summary": "The message event is fired on a Worker object when the worker's parent receives a message from its worker (i.e. when the worker sends a message using DedicatedWorkerGlobalScope.postMessage()).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "partial_implementation": true,
                    "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: message event"
        }
    ],
    "event-messageerror": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "messageerror_event",
            "slug": "API/BroadcastChannel/messageerror_event",
            "summary": "The messageerror event is fired on a BroadcastChannel object when a message arrives on the channel that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "messageerror_event",
            "slug": "API/DedicatedWorkerGlobalScope/messageerror_event",
            "summary": "The messageerror event is fired on a DedicatedWorkerGlobalScope object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/MessagePort.json",
            "name": "messageerror_event",
            "slug": "API/MessagePort/messageerror_event",
            "summary": "The messageerror event is fired on a MessagePort object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Window.json",
            "name": "messageerror_event",
            "slug": "API/Window/messageerror_event",
            "summary": "The messageerror event is fired on a Window object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Worker.json",
            "name": "messageerror_event",
            "slug": "API/Worker/messageerror_event",
            "summary": "The messageerror event is fired on a Worker object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: messageerror event"
        }
    ],
    "dom-broadcastchannel-name": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "name",
            "slug": "API/BroadcastChannel/name",
            "summary": "The read-only BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel.name"
        }
    ],
    "handler-broadcastchannel-onmessage": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "onmessage",
            "slug": "API/BroadcastChannel/onmessage",
            "summary": "The BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel. Such an event is sent by the browser with a message broadcasted to the channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel.onmessage"
        }
    ],
    "handler-broadcastchannel-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "onmessageerror",
            "slug": "API/BroadcastChannel/onmessageerror",
            "summary": "The onmessageerror event handler of the BroadcastChannel interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the BroadcastChannel instance — that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel.onmessageerror"
        }
    ],
    "dom-broadcastchannel-postmessage": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "postMessage",
            "slug": "API/BroadcastChannel/postMessage",
            "summary": "The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browsing context with the same origin. The message is transmitted as a message event targeted at each BroadcastChannel bound to the channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel.postMessage()"
        }
    ],
    "broadcastchannel": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "BroadcastChannel",
            "slug": "API/BroadcastChannel",
            "summary": "The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel"
        }
    ],
    "dom-canvasgradient-addcolorstop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasGradient.json",
            "name": "addColorStop",
            "slug": "API/CanvasGradient/addColorStop",
            "summary": "The CanvasGradient.addColorStop() method adds a new color stop, defined by an offset and a color, to a given canvas gradient.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasGradient.addColorStop()"
        }
    ],
    "canvasgradient": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasGradient.json",
            "name": "CanvasGradient",
            "slug": "API/CanvasGradient",
            "summary": "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6",
                    "notes": "Before Firefox 5.0, specifying non-finite values when adding color stops through a call to <code>addColorStop()</code> incorrectly throws <code>SYNTAX_ERR</code> instead of <code>INDEX_SIZE_ERR</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasGradient"
        }
    ],
    "dom-canvaspattern-settransform": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasPattern.json",
            "name": "setTransform",
            "slug": "API/CanvasPattern/setTransform",
            "summary": "The CanvasPattern.setTransform() method uses an SVGMatrix or DOMMatrix object as the pattern's transformation matrix and invokes it on the pattern.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "68"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": "68"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasPattern.setTransform()"
        }
    ],
    "canvaspattern": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasPattern.json",
            "name": "CanvasPattern",
            "slug": "API/CanvasPattern",
            "summary": "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasPattern"
        }
    ],
    "dom-context-2d-arc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "arc",
            "slug": "API/CanvasRenderingContext2D/arc",
            "summary": "The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds a circular arc to the current sub-path.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.arc()"
        }
    ],
    "dom-context-2d-arcto": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "arcTo",
            "slug": "API/CanvasRenderingContext2D/arcTo",
            "summary": "The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds a circular arc to the current sub-path, using the given control points and radius. The arc is automatically connected to the path's latest point with a straight line, if necessary for the specified parameters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.arcTo()"
        }
    ],
    "dom-context-2d-beginpath": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "beginPath",
            "slug": "API/CanvasRenderingContext2D/beginPath",
            "summary": "The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.beginPath()"
        }
    ],
    "dom-context-2d-beziercurveto": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "bezierCurveTo",
            "slug": "API/CanvasRenderingContext2D/bezierCurveTo",
            "summary": "The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier curve to the current sub-path. It requires three points: the first two are control points and the third one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the Bézier curve.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.bezierCurveTo()"
        }
    ],
    "dom-context-2d-canvas": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "canvas",
            "slug": "API/CanvasRenderingContext2D/canvas",
            "summary": "The CanvasRenderingContext2D.canvas property, part of the Canvas API, is a read-only reference to the HTMLCanvasElement object that is associated with a given context. It might be null if there is no associated <canvas> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.canvas"
        }
    ],
    "dom-context-2d-clearrect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "clearRect",
            "slug": "API/CanvasRenderingContext2D/clearRect",
            "summary": "The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API erases the pixels in a rectangular area by setting them to transparent black.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.clearRect()"
        }
    ],
    "dom-context-2d-clip": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "clip",
            "slug": "API/CanvasRenderingContext2D/clip",
            "summary": "The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the current or given path into the current clipping region. The previous clipping region, if any, is intersected with the current or given path to create the new clipping region.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.clip()"
        }
    ],
    "dom-context-2d-closepath": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "closePath",
            "slug": "API/CanvasRenderingContext2D/closePath",
            "summary": "The CanvasRenderingContext2D.closePath() method of the Canvas 2D API attempts to add a straight line from the current point to the start of the current sub-path. If the shape has already been closed or has only one point, this function does nothing.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.closePath()"
        }
    ],
    "dom-context-2d-createimagedata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createImageData",
            "slug": "API/CanvasRenderingContext2D/createImageData",
            "summary": "The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createImageData()"
        }
    ],
    "dom-context-2d-createlineargradient": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createLinearGradient",
            "slug": "API/CanvasRenderingContext2D/createLinearGradient",
            "summary": "The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line connecting two given coordinates.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createLinearGradient()"
        }
    ],
    "dom-context-2d-createpattern": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createPattern",
            "slug": "API/CanvasRenderingContext2D/createPattern",
            "summary": "The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image and repetition. This method returns a CanvasPattern.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createPattern()"
        }
    ],
    "dom-context-2d-createradialgradient": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createRadialGradient",
            "slug": "API/CanvasRenderingContext2D/createRadialGradient",
            "summary": "The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient using the size and coordinates of two circles.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createRadialGradient()"
        }
    ],
    "dom-context-2d-direction": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "needsflag": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "direction",
            "slug": "API/CanvasRenderingContext2D/direction",
            "summary": "The CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text direction used to draw text.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "CanvasRenderingContext2D.direction"
        }
    ],
    "dom-context-2d-drawfocusifneeded": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "drawFocusIfNeeded",
            "slug": "API/CanvasRenderingContext2D/drawFocusIfNeeded",
            "summary": "The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current or given path, if the specified element is focused.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": "29",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "canvas.focusring.enabled"
                            }
                        ]
                    },
                    {
                        "version_added": "28",
                        "alternative_name": "drawSystemFocusRing"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": "29",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "canvas.focusring.enabled"
                            }
                        ]
                    },
                    {
                        "version_added": "28",
                        "alternative_name": "drawSystemFocusRing"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.drawFocusIfNeeded()"
        }
    ],
    "dom-context-2d-drawimage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "drawImage",
            "slug": "API/CanvasRenderingContext2D/drawImage",
            "summary": "The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.drawImage()"
        }
    ],
    "dom-context-2d-ellipse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "ellipse",
            "slug": "API/CanvasRenderingContext2D/ellipse",
            "summary": "The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an elliptical arc to the current sub-path.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": {
                    "version_added": "31"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "18"
                },
                "opera_android": {
                    "version_added": "18"
                },
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": "2.0"
                },
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.ellipse()"
        }
    ],
    "dom-context-2d-fill": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fill",
            "slug": "API/CanvasRenderingContext2D/fill",
            "summary": "The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fillStyle.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.fill()"
        }
    ],
    "dom-context-2d-fillrect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fillRect",
            "slug": "API/CanvasRenderingContext2D/fillRect",
            "summary": "The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that is filled according to the current fillStyle.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.fillRect()"
        }
    ],
    "dom-context-2d-fillstyle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fillStyle",
            "slug": "API/CanvasRenderingContext2D/fillStyle",
            "summary": "The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use inside shapes. The default style is #000 (black).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.fillStyle"
        }
    ],
    "dom-context-2d-filltext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fillText",
            "slug": "API/CanvasRenderingContext2D/fillText",
            "summary": "The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string at the specified coordinates, filling the string's characters with the current fillStyle. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.fillText()"
        }
    ],
    "filters": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "filter",
            "slug": "API/CanvasRenderingContext2D/filter",
            "summary": "The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects such as blurring and grayscaling. It is similar to the CSS filter property and accepts the same values.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "35",
                        "version_removed": "48",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "canvas.filters.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "35",
                        "version_removed": "48",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "canvas.filters.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.filter"
        }
    ],
    "dom-context-2d-font": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "font",
            "slug": "API/CanvasRenderingContext2D/font",
            "summary": "The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text style to use when drawing text. This string uses the same syntax as the CSS font specifier.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.font"
        }
    ],
    "dom-context-2d-getimagedata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "getImageData",
            "slug": "API/CanvasRenderingContext2D/getImageData",
            "summary": "The CanvasRenderingContext2D method getImageData() of the Canvas 2D API returns an ImageData object representing the underlying pixel data for a specified portion of the canvas.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2",
                    "notes": "Since Firefox 5, <code>getImageData</code> now correctly accepts rectangles that extend beyond the bounds of the canvas; pixels outside the canvas are returned as transparent black and now also returns at least one pixel's worth of image data if a rectangle smaller than one pixel is specified."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Since Firefox 5, <code>getImageData</code> now correctly accepts rectangles that extend beyond the bounds of the canvas; pixels outside the canvas are returned as transparent black and now also returns at least one pixel's worth of image data if a rectangle smaller than one pixel is specified."
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.getImageData()"
        }
    ],
    "dom-context-2d-getlinedash": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "getLineDash",
            "slug": "API/CanvasRenderingContext2D/getLineDash",
            "summary": "The getLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface gets the current line dash pattern.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.getLineDash()"
        }
    ],
    "dom-context-2d-gettransform": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "getTransform",
            "slug": "API/CanvasRenderingContext2D/getTransform",
            "summary": "The CanvasRenderingContext2D.getTransform() method of the Canvas 2D API retrieves the current transformation matrix being applied to the context.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "68"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "55"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": "68"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.getTransform()"
        }
    ],
    "dom-context-2d-globalalpha": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "globalAlpha",
            "slug": "API/CanvasRenderingContext2D/globalAlpha",
            "summary": "The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha (transparency) value that is applied to shapes and images before they are drawn onto the canvas.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.globalAlpha"
        }
    ],
    "dom-context-2d-globalcompositeoperation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "globalCompositeOperation",
            "slug": "API/CanvasRenderingContext2D/globalCompositeOperation",
            "summary": "The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.globalCompositeOperation"
        }
    ],
    "dom-context-2d-imagesmoothingenabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "imageSmoothingEnabled",
            "slug": "API/CanvasRenderingContext2D/imageSmoothingEnabled",
            "summary": "The imageSmoothingEnabled property of the CanvasRenderingContext2D interface, part of the Canvas API, determines whether scaled images are smoothed (true, default) or not (false). On getting the imageSmoothingEnabled property, the last value it was set to is returned.",
            "support": {
                "chrome": [
                    {
                        "version_added": "30"
                    },
                    {
                        "version_added": true,
                        "version_removed": "30",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": true,
                        "version_removed": "51",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": true,
                        "version_removed": "51",
                        "prefix": "moz"
                    }
                ],
                "ie": {
                    "version_added": true,
                    "prefix": "ms"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "30",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "CanvasRenderingContext2D.imageSmoothingEnabled"
        }
    ],
    "imagesmoothingquality": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "imageSmoothingQuality",
            "slug": "API/CanvasRenderingContext2D/imageSmoothingQuality",
            "summary": "The imageSmoothingQuality property of the CanvasRenderingContext2D interface, part of the Canvas API, lets you set the quality of image smoothing.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.imageSmoothingQuality"
        }
    ],
    "dom-context-2d-ispointinpath": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "isPointInPath",
            "slug": "API/CanvasRenderingContext2D/isPointInPath",
            "summary": "The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.isPointInPath()"
        }
    ],
    "dom-context-2d-ispointinstroke": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "isPointInStroke",
            "slug": "API/CanvasRenderingContext2D/isPointInStroke",
            "summary": "The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "19",
                        "version_removed": "20",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "19",
                        "version_removed": "20",
                        "prefix": "moz"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.isPointInStroke()"
        }
    ],
    "dom-context-2d-linecap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineCap",
            "slug": "API/CanvasRenderingContext2D/lineCap",
            "summary": "The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines the shape used to draw the end points of lines.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineCap"
        }
    ],
    "dom-context-2d-linedashoffset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineDashOffset",
            "slug": "API/CanvasRenderingContext2D/lineDashOffset",
            "summary": "The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash offset, or \"phase.\"",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "27"
                    },
                    {
                        "alternative_name": "mozDashOffset",
                        "version_added": "7"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "27"
                    },
                    {
                        "alternative_name": "mozDashOffset",
                        "version_added": "7"
                    }
                ],
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineDashOffset"
        }
    ],
    "dom-context-2d-linejoin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineJoin",
            "slug": "API/CanvasRenderingContext2D/lineJoin",
            "summary": "The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines the shape used to join two line segments where they meet.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineJoin"
        }
    ],
    "dom-context-2d-lineto": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineTo",
            "slug": "API/CanvasRenderingContext2D/lineTo",
            "summary": "The CanvasRenderingContext2D method lineTo(), part of the Canvas 2D API, adds a straight line to the current sub-path by connecting the sub-path's last point to the specified (x, y) coordinates.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.lineTo()"
        }
    ],
    "dom-context-2d-linewidth": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineWidth",
            "slug": "API/CanvasRenderingContext2D/lineWidth",
            "summary": "The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineWidth"
        }
    ],
    "dom-context-2d-measuretext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "measureText",
            "slug": "API/CanvasRenderingContext2D/measureText",
            "summary": "The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width, for example).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.measureText()"
        }
    ],
    "dom-context-2d-miterlimit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "miterLimit",
            "slug": "API/CanvasRenderingContext2D/miterLimit",
            "summary": "The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit ratio.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.miterLimit"
        }
    ],
    "dom-context-2d-moveto": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "moveTo",
            "slug": "API/CanvasRenderingContext2D/moveTo",
            "summary": "The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API begins a new sub-path at the point specified by the given (x, y) coordinates.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.moveTo()"
        }
    ],
    "dom-context-2d-putimagedata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "putImageData",
            "slug": "API/CanvasRenderingContext2D/putImageData",
            "summary": "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the canvas. If a dirty rectangle is provided, only the pixels from that rectangle are painted. This method is not affected by the canvas transformation matrix.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.putImageData()"
        }
    ],
    "dom-context-2d-quadraticcurveto": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "quadraticCurveTo",
            "slug": "API/CanvasRenderingContext2D/quadraticCurveTo",
            "summary": "The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic Bézier curve to the current sub-path. It requires two points: the first one is a control point and the second one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.quadraticCurveTo()"
        }
    ],
    "dom-context-2d-rect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "rect",
            "slug": "API/CanvasRenderingContext2D/rect",
            "summary": "The CanvasRenderingContext2D.rect() method of the Canvas 2D API adds a rectangle to the current path.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.rect()"
        }
    ],
    "dom-context-2d-resettransform": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "resetTransform",
            "slug": "API/CanvasRenderingContext2D/resetTransform",
            "summary": "The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current transform to the identity matrix.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": {
                    "version_added": "36"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.resetTransform()"
        }
    ],
    "dom-context-2d-restore": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "restore",
            "slug": "API/CanvasRenderingContext2D/restore",
            "summary": "The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.restore()"
        }
    ],
    "dom-context-2d-rotate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "rotate",
            "slug": "API/CanvasRenderingContext2D/rotate",
            "summary": "The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.rotate()"
        }
    ],
    "dom-context-2d-save": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "save",
            "slug": "API/CanvasRenderingContext2D/save",
            "summary": "The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.save()"
        }
    ],
    "dom-context-2d-scale": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "scale",
            "slug": "API/CanvasRenderingContext2D/scale",
            "summary": "The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units horizontally and/or vertically.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.scale()"
        }
    ],
    "dom-context-2d-scrollpathintoview": [
        {
            "engines": [
                "blink"
            ],
            "needsflag": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "scrollPathIntoView",
            "slug": "API/CanvasRenderingContext2D/scrollPathIntoView",
            "summary": "The CanvasRenderingContext2D.scrollPathIntoView() method of the Canvas 2D API scrolls the current or given path into view. It is similar to Element.scrollIntoView().",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "CanvasRenderingContext2D.scrollPathIntoView()"
        }
    ],
    "dom-context-2d-setlinedash": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "setLineDash",
            "slug": "API/CanvasRenderingContext2D/setLineDash",
            "summary": "The setLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D.setLineDash()"
        }
    ],
    "dom-context-2d-settransform": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "setTransform",
            "slug": "API/CanvasRenderingContext2D/setTransform",
            "summary": "The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix, and then invokes a transformation described by the arguments of this method. This lets you scale, rotate, translate (move), and skew the context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.setTransform()"
        }
    ],
    "dom-context-2d-shadowblur": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowBlur",
            "slug": "API/CanvasRenderingContext2D/shadowBlur",
            "summary": "The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the amount of blur applied to shadows. The default is 0 (no blur).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowBlur"
        }
    ],
    "dom-context-2d-shadowcolor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowColor",
            "slug": "API/CanvasRenderingContext2D/shadowColor",
            "summary": "The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of shadows.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowColor"
        }
    ],
    "dom-context-2d-shadowoffsetx": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowOffsetX",
            "slug": "API/CanvasRenderingContext2D/shadowOffsetX",
            "summary": "The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that shadows will be offset horizontally.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowOffsetX"
        }
    ],
    "dom-context-2d-shadowoffsety": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowOffsetY",
            "slug": "API/CanvasRenderingContext2D/shadowOffsetY",
            "summary": "The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that shadows will be offset vertically.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowOffsetY"
        }
    ],
    "dom-context-2d-stroke": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "stroke",
            "slug": "API/CanvasRenderingContext2D/stroke",
            "summary": "The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes (outlines) the current or given path with the current stroke style.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.stroke()"
        }
    ],
    "dom-context-2d-strokerect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "strokeRect",
            "slug": "API/CanvasRenderingContext2D/strokeRect",
            "summary": "The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API draws a rectangle that is stroked (outlined) according to the current strokeStyle and other context settings.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.strokeRect()"
        }
    ],
    "dom-context-2d-strokestyle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "strokeStyle",
            "slug": "API/CanvasRenderingContext2D/strokeStyle",
            "summary": "The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use for the strokes (outlines) around shapes. The default is #000 (black).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.strokeStyle"
        }
    ],
    "dom-context-2d-stroketext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "strokeText",
            "slug": "API/CanvasRenderingContext2D/strokeText",
            "summary": "The CanvasRenderingContext2D method strokeText(), part of the Canvas 2D API, strokes — that is, draws the outlines of — the characters of a text string at the specified coordinates. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.strokeText()"
        }
    ],
    "dom-context-2d-textalign": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "textAlign",
            "slug": "API/CanvasRenderingContext2D/textAlign",
            "summary": "The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text alignment used when drawing text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.textAlign"
        }
    ],
    "dom-context-2d-textbaseline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "textBaseline",
            "slug": "API/CanvasRenderingContext2D/textBaseline",
            "summary": "The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current text baseline used when drawing text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.textBaseline"
        }
    ],
    "dom-context-2d-transform": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "transform",
            "slug": "API/CanvasRenderingContext2D/transform",
            "summary": "The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. This lets you scale, rotate, translate (move), and skew the context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.transform()"
        }
    ],
    "dom-context-2d-translate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "translate",
            "slug": "API/CanvasRenderingContext2D/translate",
            "summary": "The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation to the current matrix.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.translate()"
        }
    ],
    "2dcontext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "CanvasRenderingContext2D",
            "slug": "API/CanvasRenderingContext2D",
            "summary": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D"
        }
    ],
    "closeevent": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/CloseEvent.json",
            "name": "CloseEvent",
            "slug": "API/CloseEvent/CloseEvent",
            "summary": "The CloseEvent() constructor creates a new CloseEvent.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": null
                }
            },
            "title": "CloseEvent()"
        }
    ],
    "the-closeevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CloseEvent.json",
            "name": "CloseEvent",
            "slug": "API/CloseEvent",
            "summary": "A CloseEvent is sent to clients using WebSockets when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8",
                    "notes": [
                        "Prior to Firefox 12, the close code <code>CLOSE_NORMAL</code> was used when the channel was closed due to an unexpected error or unspecified error condition.",
                        "Prior to Firefox 8, the <code>WebSocket</code> close event was sent to the listener as a simple event."
                    ]
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CloseEvent"
        }
    ],
    "dom-customelementregistry-define": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "define",
            "slug": "API/CustomElementRegistry/define",
            "summary": "The define() method of the CustomElementRegistry interface defines a new custom element.",
            "support": {
                "chrome": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "53",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "41",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "41",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "safari": {
                    "version_added": "10.1",
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'"
                },
                "safari_ios": {
                    "version_added": "10.3",
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'"
                },
                "samsunginternet_android": [
                    {
                        "version_added": "9.0",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "6.0",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "79",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ]
            },
            "title": "CustomElementRegistry.define()"
        }
    ],
    "dom-customelementregistry-get": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "get",
            "slug": "API/CustomElementRegistry/get",
            "summary": "The get() method of the CustomElementRegistry interface returns the constructor for a previously-defined custom element.",
            "support": {
                "chrome": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "53",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "41",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "41",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "safari": {
                    "version_added": "10.1",
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'"
                },
                "safari_ios": {
                    "version_added": "10.3",
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'"
                },
                "samsunginternet_android": [
                    {
                        "version_added": "9.0",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "6.0",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "79",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ]
            },
            "title": "CustomElementRegistry.get()"
        }
    ],
    "dom-customelementregistry-upgrade": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "upgrade",
            "slug": "API/CustomElementRegistry/upgrade",
            "summary": "The upgrade() method of the CustomElementRegistry interface upgrades all shadow-containing custom elements in a Node subtree, even before they are connected to the main document.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "68"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "55"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": "68"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomElementRegistry.upgrade()"
        }
    ],
    "dom-customelementregistry-whendefined": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "whenDefined",
            "slug": "API/CustomElementRegistry/whenDefined",
            "summary": "The whenDefined() method of the CustomElementRegistry interface returns a Promise that resolves when the named element is defined.",
            "support": {
                "chrome": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "53",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "41",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "41",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "safari": {
                    "version_added": "10.1",
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'"
                },
                "safari_ios": {
                    "version_added": "10.3",
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'"
                },
                "samsunginternet_android": [
                    {
                        "version_added": "9.0",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "6.0",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "66",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "54",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79",
                        "notes": "Support for 'Customized built-in elements' as well."
                    },
                    {
                        "version_added": "79",
                        "notes": "Support for 'Autonomous custom elements' only."
                    }
                ]
            },
            "title": "CustomElementRegistry.whenDefined()"
        }
    ],
    "customelementregistry": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "CustomElementRegistry",
            "slug": "API/CustomElementRegistry",
            "summary": "The CustomElementRegistry interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomElementRegistry"
        }
    ],
    "dom-parsing-and-serialization": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMParser.json",
            "name": "DOMParser",
            "slug": "API/DOMParser",
            "summary": "The DOMParser interface provides the ability to parse XML or HTML source code from a string into a DOM Document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMParser"
        }
    ],
    "the-domstringlist-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMStringList.json",
            "name": "DOMStringList",
            "slug": "API/DOMStringList",
            "summary": "A type returned by some APIs which contains a list of DOMString (strings).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DOMStringList"
        }
    ],
    "domstringmap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMStringMap.json",
            "name": "DOMStringMap",
            "slug": "API/DOMStringMap",
            "summary": "The DOMStringMap interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DOMStringMap"
        }
    ],
    "dom-datatransfer": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/DataTransfer.json",
            "name": "DataTransfer",
            "slug": "API/DataTransfer/DataTransfer",
            "summary": "The DataTransfer constructor creates a new DataTransfer object instance.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer()"
        }
    ],
    "dom-datatransfer-cleardata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "clearData",
            "slug": "API/DataTransfer/clearData",
            "summary": "The DataTransfer.clearData() method removes the drag operation's drag data for the given type. If data for the given type does not exist, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.clearData()"
        }
    ],
    "dom-datatransfer-dropeffect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "dropEffect",
            "slug": "API/DataTransfer/dropEffect",
            "summary": "The DataTransfer.dropEffect property controls the feedback (typically visual) the user is given during a drag and drop operation. It will affect which cursor is displayed while dragging. For example, when the user hovers over a target drop element, the browser's cursor may indicate which type of operation will occur.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.dropEffect"
        }
    ],
    "dom-datatransfer-effectallowed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "effectAllowed",
            "slug": "API/DataTransfer/effectAllowed",
            "summary": "The DataTransfer.effectAllowed property specifies the effect that is allowed for a drag operation. The copy operation is used to indicate that the data being dragged will be copied from its present location to the drop location. The move operation is used to indicate that the data being dragged will be moved, and the link operation is used to indicate that some form of relationship or connection will be created between the source and drop locations.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.effectAllowed"
        }
    ],
    "dom-datatransfer-files": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "files",
            "slug": "API/DataTransfer/files",
            "summary": "The DataTransfer.files property is a list of the files in the drag operation. If the operation includes no files, the list is empty.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.files"
        }
    ],
    "dom-datatransfer-getdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "getData",
            "slug": "API/DataTransfer/getData",
            "summary": "The DataTransfer.getData() method retrieves drag data (as a DOMString) for the specified type. If the drag operation does not include data, this method returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.getData()"
        }
    ],
    "dom-datatransfer-items": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/DataTransfer.json",
            "name": "items",
            "slug": "API/DataTransfer/items",
            "summary": "The read-only DataTransfer property items property is a list of the data transfer items in a drag operation. The list includes one item for each item in the operation and if the operation had no items, the list is empty.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer.items"
        }
    ],
    "dom-datatransfer-setdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "setData",
            "slug": "API/DataTransfer/setData",
            "summary": "The DataTransfer.setData() method sets the drag operation's drag data to the specified data and type. If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type. If data for the given type already exists, the existing data is replaced in the same position. That is, the order of the types list is not changed when replacing data of the same type.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer.setData()"
        }
    ],
    "dom-datatransfer-setdragimage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "setDragImage",
            "slug": "API/DataTransfer/setDragImage",
            "summary": "When a drag occurs, a translucent image is generated from the drag target (the element the dragstart event is fired at), and follows the mouse pointer during the drag. This image is created automatically, so you do not need to create it yourself. However, if a custom image is desired, the DataTransfer.setDragImage() method can be used to set the custom image to be used. The image will typically be an <image> element but it can also be a <canvas> or any other visible element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.setDragImage()"
        }
    ],
    "dom-datatransfer-types": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "types",
            "slug": "API/DataTransfer/types",
            "summary": "The DataTransfer.types read-only property returns an array of the drag data formats (as strings) that were set in the dragstart event. The order of the formats is the same order as the data included in the drag operation.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10",
                    "notes": [
                        "The property returns a <a href='https://developer.mozilla.org/docs/Web/API/DOMStringList'><code>DOMStringList</code></a>.",
                        "<code>Text</code> is returned instead of <code>text/plain</code>"
                    ]
                },
                "opera": {
                    "version_added": true,
                    "notes": "As of Opera 12, <code>Text</code> is returned instead of <code>text/plain</code>"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.types"
        }
    ],
    "datatransfer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "DataTransfer",
            "slug": "API/DataTransfer",
            "summary": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "As of Firefox 52, the <a href='https://developer.mozilla.org/docs/Web/API/DataTransfer/types'><code>DataTransfer.types</code></a> property returns a frozen array of <a href='https://developer.mozilla.org/docs/Web/API/DOMString'><code>DOMString</code></a>s as per spec, rather than a <a href='https://developer.mozilla.org/docs/Web/API/DOMStringList'><code>DOMStringList</code></a>."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "As of Firefox 52, the <a href='https://developer.mozilla.org/docs/Web/API/DataTransfer/types'><code>DataTransfer.types</code></a> property returns a frozen array of <a href='https://developer.mozilla.org/docs/Web/API/DOMString'><code>DOMString</code></a>s as per spec, rather than a <a href='https://developer.mozilla.org/docs/Web/API/DOMStringList'><code>DOMStringList</code></a>."
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer"
        }
    ],
    "dom-datatransferitem-getasfile": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "getAsFile",
            "slug": "API/DataTransferItem/getAsFile",
            "summary": "If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem.getAsFile()"
        }
    ],
    "dom-datatransferitem-getasstring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "getAsString",
            "slug": "API/DataTransferItem/getAsString",
            "summary": "The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string).",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem.getAsString()"
        }
    ],
    "dom-datatransferitem-kind": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "kind",
            "slug": "API/DataTransferItem/kind",
            "summary": "The read-only DataTransferItem.kind property returns a DataTransferItem representing the drag data item kind: some text or some file.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem.kind"
        }
    ],
    "dom-datatransferitem-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "type",
            "slug": "API/DataTransferItem/type",
            "summary": "The read-only DataTransferItem.type property returns the type (format) of the DataTransferItem object representing the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem.type"
        }
    ],
    "datatransferitem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "DataTransferItem",
            "slug": "API/DataTransferItem",
            "summary": "The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem"
        }
    ],
    "the-datatransferitemlist-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "DataTransferItem",
            "slug": "API/DataTransferItemList/DataTransferItem",
            "summary": "The DataTransferItem() getter method implements support for accessing items in the DataTransferItemList using array-style syntax (that is DataTransferItem[index]).",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList.DataTransferItem()"
        }
    ],
    "dom-datatransferitemlist-add": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "add",
            "slug": "API/DataTransferItemList/add",
            "summary": "The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList.add()"
        }
    ],
    "dom-datatransferitemlist-clear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "clear",
            "slug": "API/DataTransferItemList/clear",
            "summary": "The DataTransferItemList method clear() removes all DataTransferItem objects from the drag data items list, leaving the list empty.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList.clear()"
        }
    ],
    "dom-datatransferitemlist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "length",
            "slug": "API/DataTransferItemList/length",
            "summary": "The read-only length property of the DataTransferItemList interface returns the number of items currently in the drag item list.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList.length"
        }
    ],
    "dom-datatransferitemlist-remove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "remove",
            "slug": "API/DataTransferItemList/remove",
            "summary": "undefined.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": {
                    "version_added": "31"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "2.0"
                },
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList.remove()"
        }
    ],
    "datatransferitemlist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "DataTransferItemList",
            "slug": "API/DataTransferItemList",
            "summary": "The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList"
        }
    ],
    "dom-dedicatedworkerglobalscope-close": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "close",
            "slug": "API/DedicatedWorkerGlobalScope/close",
            "summary": "The close() method of the DedicatedWorkerGlobalScope interface discards any tasks queued in the DedicatedWorkerGlobalScope's event loop, effectively closing this particular scope.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "54"
                },
                "firefox_android": {
                    "version_added": "54"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DedicatedWorkerGlobalScope.close()"
        }
    ],
    "dom-dedicatedworkerglobalscope-name": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "name",
            "slug": "API/DedicatedWorkerGlobalScope/name",
            "summary": "The name read-only property of the DedicatedWorkerGlobalScope interface returns the name that the Worker was (optionally) given when it was created. This is the name that the Worker() constructor can pass to get a reference to the DedicatedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": {
                    "version_added": "55"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "DedicatedWorkerGlobalScope.name"
        }
    ],
    "handler-dedicatedworkerglobalscope-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "onmessage",
            "slug": "API/DedicatedWorkerGlobalScope/onmessage",
            "summary": "The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker — i.e. when a message is sent to the worker using the Worker.postMessage method.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope.onmessage"
        }
    ],
    "handler-dedicatedworkerglobalscope-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "onmessageerror",
            "slug": "API/DedicatedWorkerGlobalScope/onmessageerror",
            "summary": "The onmessageerror event handler of the DedicatedWorkerGlobalScope interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the worker—that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope.onmessageerror"
        }
    ],
    "dom-dedicatedworkerglobalscope-postmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "postMessage",
            "slug": "API/DedicatedWorkerGlobalScope/postMessage",
            "summary": "The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope.postMessage()"
        }
    ],
    "dedicatedworkerglobalscope": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "DedicatedWorkerGlobalScope",
            "slug": "API/DedicatedWorkerGlobalScope",
            "summary": "The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope"
        }
    ],
    "stop-parsing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "DOMContentLoaded_event",
            "slug": "API/Document/DOMContentLoaded_event",
            "summary": "The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "domcontentloaded",
                "title": "DOMContentLoaded"
            },
            "title": "Document: DOMContentLoaded event"
        }
    ],
    "dom-document-body": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "body",
            "slug": "API/Document/body",
            "summary": "The Document.body property represents the <body> or <frameset> node of the current document, or null if no such element exists.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2",
                    "notes": "The <code>body</code> property was implemented on the <code>HTMLDocument</code> interface in Firefox for a long time, hence <code>document.body</code> would not return the <code>&lt;body&gt;</code> element if the document's <code>Content-Type</code> was not set to <code>text/html</code> or <code>application/xhtml+xml</code> (or if it came from <code>DOMParser.parseFromString</code> without the <code>text/html</code> type being used). This has been fixed in Firefox 60."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "The <code>body</code> property was implemented on the <code>HTMLDocument</code> interface in Firefox for a long time, hence <code>document.body</code> would not return the <code>&lt;body&gt;</code> element if the document's <code>Content-Type</code> was not set to <code>text/html</code> or <code>application/xhtml+xml</code> (or if it came from <code>DOMParser.parseFromString</code> without the <code>text/html</code> type being used). This has been fixed in Firefox 60."
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "9.6"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.body"
        }
    ],
    "dom-document-close": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "close",
            "slug": "API/Document/close",
            "summary": "The Document.close() method finishes writing to a document, opened with Document.open().",
            "support": {
                "chrome": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "chrome_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Before Samsung Internet 9.0, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "webview_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                }
            },
            "title": "Document.close()"
        }
    ],
    "dom-document-currentscript": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "currentScript",
            "slug": "API/Document/currentScript",
            "summary": "The Document.currentScript property returns the <script> element whose script is currently being processed and isn't a JavaScript module. (For modules use import.meta instead.)",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": {
                    "version_added": "29"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "16"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": "2.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "document-currentscript",
                "title": "document.currentScript"
            },
            "title": "Document.currentScript"
        }
    ],
    "dom-document-defaultview": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "defaultView",
            "slug": "API/Document/defaultView",
            "summary": "In browsers, document.defaultView returns the window object associated with a document, or null if none is available.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.defaultView"
        }
    ],
    "making-entire-documents-editable:-the-designmode-idl-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "designMode",
            "slug": "API/Document/designMode",
            "summary": "document.designMode controls whether the entire document is editable. Valid values are \"on\" and \"off\". According to the specification, this property is meant to default to \"off\". Firefox follows this standard. The earlier versions of Chrome and IE default to \"inherit\". Starting in Chrome 43, the default is \"off\" and \"inherit\" is no longer supported. In IE6-10, the value is capitalized.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.designMode"
        }
    ],
    "dom-document-dir": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "dir",
            "slug": "API/Document/dir",
            "summary": "The Document.dir property is a DOMString representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right.",
            "support": {
                "chrome": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "chrome_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Incorrect behavior before Firefox 23."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Incorrect behavior before Firefox 23."
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Before Samsung Internet 9.0, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "webview_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                }
            },
            "title": "Document.dir"
        }
    ],
    "relaxing-the-same-origin-restriction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "domain",
            "slug": "API/Document/domain",
            "summary": "The domain property of the Document interface gets/sets the domain portion of the origin of the current document, as used by the same-origin policy.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "From Firefox 62, if the domain cannot be identified, <code>domain</code> returns an empty string instead of <code>null</code>. See <a href='https://bugzil.la/819475'>bug 819475</a>."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "From Firefox 62, if the domain cannot be identified, <code>domain</code> returns an empty string instead of <code>null</code>. See <a href='https://bugzil.la/819475'>bug 819475</a>."
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.domain"
        }
    ],
    "dndevents": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/Document.json",
            "name": "drag_event",
            "slug": "API/Document/drag_event",
            "summary": "The drag event is fired every few hundred milliseconds as an element or text selection is being dragged by the user.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "partial_implementation": true,
                    "notes": "Firefox doesn't set the mouse coordinates during the drag event. See <a href='https://bugzil.la/505521'>bug 505521</a>."
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: drag event"
        },
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/Document.json",
            "name": "dragend_event",
            "slug": "API/Document/dragend_event",
            "summary": "The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).",
            "support": {
                "chrome": {
                    "version_added": "4",
                    "notes": "Prior to Chrome 72, the <code>dragend</code> event was not dispatched if an iframe (not necessarily the source target) is involved in a DOM operation. See <a href='https://crbug.com/737691'>issue 737691</a> for more details."
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "partial_implementation": true,
                    "notes": [
                        "Firefox doesn't set the mouse coordinates during the drag event. See <a href='https://bugzil.la/505521'>bug 505521</a>.",
                        "In Firefox, <code>dragend</code> is not dispatched if the source node is moved or removed during the drag (e.g. on <code>drop</code> or <code>dragover</code>). See <a href='https://bugzil.la/460801'>bug 460801</a> for details."
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Prior to Chrome 72, the <code>dragend</code> event was not dispatched if an iframe (not necessarily the source target) is involved in a DOM operation. See <a href='https://crbug.com/737691'>issue 737691</a> for more details."
                }
            },
            "title": "Document: dragend event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "dragenter_event",
            "slug": "API/Document/dragenter_event",
            "summary": "The dragenter event is fired when a dragged element or text selection enters a valid drop target.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "In Firefox, the <code>dragenter</code> event is fired twice when the dropzone is parent of draggable or draggable itself. See <a href='https://bugzil.la/804036'>bug 804036</a> for details."
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: dragenter event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "dragleave_event",
            "slug": "API/Document/dragleave_event",
            "summary": "The dragleave event is fired when a dragged element or text selection leaves a valid drop target.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: dragleave event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "dragover_event",
            "slug": "API/Document/dragover_event",
            "summary": "The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: dragover event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "dragstart_event",
            "slug": "API/Document/dragstart_event",
            "summary": "The dragstart event is fired when the user starts dragging an element or text selection.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: dragstart event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "drop_event",
            "slug": "API/Document/drop_event",
            "summary": "The drop event is fired when an element or text selection is dropped on a valid drop target.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: drop event"
        }
    ],
    "dom-document-embeds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "embeds",
            "slug": "API/Document/embeds",
            "summary": "The embeds read-only property of the Document interface returns a list of the embedded <object> elements within the current document.",
            "support": {
                "chrome": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "chrome_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Before Samsung Internet 9.0, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "webview_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                }
            },
            "title": "Document.embeds"
        }
    ],
    "dom-document-forms": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "forms",
            "slug": "API/Document/forms",
            "summary": "The forms read-only property of the Document interface returns an HTMLCollection listing all the <form> elements contained in the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.forms"
        }
    ],
    "dom-document-getelementsbyname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByName",
            "slug": "API/Document/getElementsByName",
            "summary": "The getElementsByName() method of the Document object returns a NodeList Collection of elements with a given name in the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5",
                    "notes": "Returns an <code>HTMLCollection</code>, not a <code>NodeList</code>"
                },
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.getElementsByName()"
        }
    ],
    "dom-document-hasfocus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "hasFocus",
            "slug": "API/Document/hasFocus",
            "summary": "The hasFocus() method of the Document interface returns a Boolean value indicating whether the document or any element inside the document has focus. This method can be used to determine whether the active element in a document has focus.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.hasFocus()"
        }
    ],
    "dom-document-head": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "head",
            "slug": "API/Document/head",
            "summary": "The head read-only property of the Document interface returns the <head> element of the current document.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "documenthead",
                "title": "document.head"
            },
            "title": "Document.head"
        }
    ],
    "dom-document-images": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "images",
            "slug": "API/Document/images",
            "summary": "The images read-only property of the Document interface returns a collection of the images in the current HTML document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.images"
        }
    ],
    "dom-document-lastmodified": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "lastModified",
            "slug": "API/Document/lastModified",
            "summary": "The lastModified property of the Document interface returns a string containing the date and time on which the current document was last modified.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.lastModified"
        }
    ],
    "dom-document-links": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "links",
            "slug": "API/Document/links",
            "summary": "The links read-only property of the Document interface returns a collection of all <area> elements and <a> elements in a document with a value for the href attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.links"
        }
    ],
    "the-location-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "location",
            "slug": "API/Document/location",
            "summary": "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.location"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "Location",
            "slug": "API/Location",
            "summary": "The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "3"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Location"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "location",
            "slug": "API/Window/location",
            "summary": "The Window.location read-only property returns a Location object with information about the current location of the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 57, single quotes contained in URLs were escaped when accessed via URL APIs. See <a href='https://bugzil.la/1386683'>bug 1386683</a>."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Before Firefox 57, single quotes contained in URLs were escaped when accessed via URL APIs. See <a href='https://bugzil.la/1386683'>bug 1386683</a>."
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.location"
        }
    ],
    "dom-document-open": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "open",
            "slug": "API/Document/open",
            "summary": "The Document.open() method opens a document for writing.",
            "support": {
                "chrome": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "chrome_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Before Samsung Internet 9.0, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "webview_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                }
            },
            "title": "Document.open()"
        }
    ],
    "dom-document-plugins": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "plugins",
            "slug": "API/Document/plugins",
            "summary": "The plugins read-only property of the Document interface returns an HTMLCollection object containing one or more HTMLEmbedElements representing the <embed> elements in the current document.",
            "support": {
                "chrome": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "chrome_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Before Samsung Internet 9.0, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "webview_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 64, this property was accessed through the <code>HTMLDocument</code> alias."
                }
            },
            "title": "Document.plugins"
        }
    ],
    "current-document-readiness": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "readyState",
            "slug": "API/Document/readyState",
            "summary": "The Document.readyState property describes the loading state of the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "11"
                    },
                    {
                        "version_added": "9",
                        "version_removed": "11",
                        "notes": "Internet Explorer 9 and 10 have bugs where the 'interactive' state can be fired too early before the document has finished parsing."
                    },
                    {
                        "version_added": "8",
                        "version_removed": "9",
                        "partial_implementation": true,
                        "notes": "Only supports 'complete'."
                    }
                ],
                "opera": {
                    "version_added": "11",
                    "notes": "Opera Presto fires 'complete' late after the 'load' event (in an incorrect order as per HTML5 standard specification)."
                },
                "opera_android": {
                    "version_added": "11",
                    "notes": "Opera Presto fires 'complete' late after the 'load' event (in an incorrect order as per HTML5 standard specification)."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.readyState"
        }
    ],
    "event-readystatechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "readystatechange_event",
            "slug": "API/Document/readystatechange_event",
            "summary": "The readystatechange event is fired when the readyState attribute of a document has changed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Document: readystatechange event"
        }
    ],
    "dom-document-referrer-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "referrer",
            "slug": "API/Document/referrer",
            "summary": "The Document.referrer property returns the URI of the page that linked to this page.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.referrer"
        }
    ],
    "dom-document-scripts": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "scripts",
            "slug": "API/Document/scripts",
            "summary": "The scripts property of the Document interface returns a list of the <script> elements in the document. The returned object is an HTMLCollection.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": {
                    "version_added": "9"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.scripts"
        }
    ],
    "document.title": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "title",
            "slug": "API/Document/title",
            "summary": "The document.title property gets or sets the current title of the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.title"
        }
    ],
    "dom-document-write": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "write",
            "slug": "API/Document/write",
            "summary": "The Document.write() method writes a string of text to a document stream opened by document.open().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document.write()"
        }
    ],
    "dom-document-writeln": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "writeln",
            "slug": "API/Document/writeln",
            "summary": "Writes a string of text followed by a newline character to a document.",
            "support": {
                "chrome": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "chrome_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "Before Samsung Internet 9.0, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "webview_android": {
                    "version_added": "45",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 64, this method was accessed through the <code>HTMLDocument</code> alias."
                }
            },
            "title": "Document.writeln()"
        }
    ],
    "the-document-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "Document",
            "slug": "API/Document",
            "summary": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document"
        }
    ],
    "dom-document-activeelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentOrShadowRoot.json",
            "name": "activeElement",
            "slug": "API/DocumentOrShadowRoot/activeElement",
            "summary": "The activeElement read-only property of the Document and ShadowRoot interfaces returns the Element within the DOM or shadow DOM tree that currently has focus.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentOrShadowRoot.activeElement"
        }
    ],
    "the-dragevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DragEvent.json",
            "name": "DragEvent",
            "slug": "API/DragEvent/DragEvent",
            "summary": "This constructor is used to create a synthetic DragEvent object.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DragEvent()"
        }
    ],
    "dom-dragevent-datatransfer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DragEvent.json",
            "name": "dataTransfer",
            "slug": "API/DragEvent/dataTransfer",
            "summary": "The DragEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object).",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DragEvent.dataTransfer"
        }
    ],
    "dragevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DragEvent.json",
            "name": "DragEvent",
            "slug": "API/DragEvent",
            "summary": "The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DragEvent"
        }
    ],
    "event-contextmenu": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "contextmenu_event",
            "slug": "API/Element/contextmenu_event",
            "summary": "The contextmenu event fires when the user attempts to open a context menu. This event is typically triggered by clicking the right mouse button, or by pressing the context menu key.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: contextmenu event"
        }
    ],
    "the-errorevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ErrorEvent.json",
            "name": "ErrorEvent",
            "slug": "API/ErrorEvent",
            "summary": "The ErrorEvent interface represents events providing information related to errors in scripts or in files.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ErrorEvent"
        }
    ],
    "dom-eventsource": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "EventSource",
            "slug": "API/EventSource/EventSource",
            "summary": "The EventSource() constructor returns a newly-created EventSource, which represents a remote resource.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource()"
        }
    ],
    "dom-eventsource-close": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "close",
            "slug": "API/EventSource/close",
            "summary": "The close() method of the EventSource interface closes the connection, if one is made, and sets the EventSource.readyState attribute to 2 (closed).",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource.close()"
        }
    ],
    "event-error": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "error_event",
            "slug": "API/EventSource/error_event",
            "summary": "The error event of the EventSource API is fired when a connection with an event source fails to be opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: error event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WebSocket.json",
            "name": "error_event",
            "slug": "API/WebSocket/error_event",
            "summary": "The error event is fired when a connection with a WebSocket has been closed due to an error (some data couldn't be sent for example).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket: error event"
        }
    ],
    "handler-eventsource-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "onerror",
            "slug": "API/EventSource/onerror",
            "summary": "The onerror property of the EventSource interface is an EventHandler called when an error occurs and the error event is dispatched on an EventSource object.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource.onerror"
        }
    ],
    "handler-eventsource-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "onmessage",
            "slug": "API/EventSource/onmessage",
            "summary": "The onmessage property of the EventSource interface is an EventHandler called when a message event is received, that is when a message is coming from the source.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource.onmessage"
        }
    ],
    "handler-eventsource-onopen": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "onopen",
            "slug": "API/EventSource/onopen",
            "summary": "The onopen property of the EventSource interface is an EventHandler called when an open event is received, that is when the connection was just opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource.onopen"
        }
    ],
    "event-open": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "open_event",
            "slug": "API/EventSource/open_event",
            "summary": "The open event of the EventSource API is fired when a connection with an event source is opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: open event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WebSocket.json",
            "name": "open_event",
            "slug": "API/WebSocket/open_event",
            "summary": "The open event is fired when a connection with a WebSocket is opened.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket: open event"
        }
    ],
    "dom-eventsource-readystate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "readyState",
            "slug": "API/EventSource/readyState",
            "summary": "The readyState read-only property of the EventSource interface returns a number representing the state of the connection.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource.readyState"
        }
    ],
    "dom-eventsource-url": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "url",
            "slug": "API/EventSource/url",
            "summary": "The url read-only property of the EventSource interface returns a DOMString representing the URL of the source.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource.url"
        }
    ],
    "dom-eventsource-withcredentials": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "withCredentials",
            "slug": "API/EventSource/withCredentials",
            "summary": "The withCredentials read-only property of the EventSource interface returns a Boolean indicating whether the EventSource object was instantiated with CORS credentials set.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource.withCredentials"
        }
    ],
    "the-eventsource-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "EventSource",
            "slug": "API/EventSource",
            "summary": "The EventSource interface is web content's interface to server-sent events. An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource"
        }
    ],
    "concept-input-type-file-selected": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FileList.json",
            "name": "FileList",
            "slug": "API/FileList",
            "summary": "An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FileList"
        }
    ],
    "the-formdataevent-interface": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/FormDataEvent.json",
            "name": "FormDataEvent",
            "slug": "API/FormDataEvent/FormDataEvent",
            "summary": "The FormDataEvent() constructor creates a new FormDataEvent object instance.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": {
                    "version_added": "77"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "64"
                },
                "opera_android": {
                    "version_added": "55"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormDataEvent()"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/FormDataEvent.json",
            "name": "FormDataEvent",
            "slug": "API/FormDataEvent",
            "summary": "The FormDataEvent interface represents a formdata event — such an event is fired on an HTMLFormElement object after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": {
                    "version_added": "77"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "64"
                },
                "opera_android": {
                    "version_added": "55"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormDataEvent"
        }
    ],
    "dom-formdataevent-formdata": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/FormDataEvent.json",
            "name": "formData",
            "slug": "API/FormDataEvent/formData",
            "summary": "The formData read only property of the FormDataEvent interface contains the FormData object representing the data contained in the form when the event was fired.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": {
                    "version_added": "77"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "64"
                },
                "opera_android": {
                    "version_added": "55"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormDataEvent.formData"
        }
    ],
    "handler-onabort": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onabort",
            "slug": "API/GlobalEventHandlers/onabort",
            "summary": "The onabort property of the GlobalEventHandlers mixin is the EventHandler for processing abort events sent to the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onabort"
        }
    ],
    "handler-onblur": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onblur",
            "slug": "API/GlobalEventHandlers/onblur",
            "summary": "The onblur property of the GlobalEventHandlers mixin is the EventHandler for processing blur events. It's available on Element, Document, and Window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onblur"
        }
    ],
    "handler-oncancel": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "oncancel",
            "slug": "API/GlobalEventHandlers/oncancel",
            "summary": "The oncancel property of the GlobalEventHandlers mixin is an EventHandler for processing cancel events sent to a <dialog> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncancel"
        }
    ],
    "handler-oncanplay": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "oncanplay",
            "slug": "API/GlobalEventHandlers/oncanplay",
            "summary": "The oncanplay property of the GlobalEventHandlers mixin is the EventHandler for processing canplay events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncanplay"
        }
    ],
    "handler-oncanplaythrough": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "oncanplaythrough",
            "slug": "API/GlobalEventHandlers/oncanplaythrough",
            "summary": "The oncanplaythrough property of the GlobalEventHandlers mixin is the EventHandler for processing canplaythrough events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncanplaythrough"
        }
    ],
    "handler-onchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onchange",
            "slug": "API/GlobalEventHandlers/onchange",
            "summary": "The onchange property of the GlobalEventHandlers mixin is an EventHandler for processing change events.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onchange"
        }
    ],
    "handler-onclick": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onclick",
            "slug": "API/GlobalEventHandlers/onclick",
            "summary": "The onclick property of the GlobalEventHandlers mixin is the EventHandler for processing click events on a given element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onclick"
        }
    ],
    "handler-onclose": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onclose",
            "slug": "API/GlobalEventHandlers/onclose",
            "summary": "The onclose property of the GlobalEventHandlers mixin is an EventHandler for processing close events sent to a <dialog> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onclose"
        }
    ],
    "handler-oncontextmenu": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "oncontextmenu",
            "slug": "API/GlobalEventHandlers/oncontextmenu",
            "summary": "The oncontextmenu property of the GlobalEventHandlers mixin is an EventHandler that processes contextmenu events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncontextmenu"
        }
    ],
    "handler-oncuechange": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "oncuechange",
            "slug": "API/GlobalEventHandlers/oncuechange",
            "summary": "The oncuechange property of the GlobalEventHandlers mixin is the EventHandler for processing cuechange events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "68",
                        "notes": "Added for the <code>&lt;track&gt;</code> element (<code>HTMLTrackElement</code>) in Firefox 68."
                    },
                    {
                        "version_added": "31",
                        "notes": "Added for the <code>TextTrack</code> interface in Firefox 31."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "68",
                        "notes": "Added for the <code>&lt;track&gt;</code> element (<code>HTMLTrackElement</code>) in Firefox 68."
                    },
                    {
                        "version_added": "31",
                        "notes": "Added for the <code>TextTrack</code> interface in Firefox 31."
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncuechange"
        }
    ],
    "handler-ondblclick": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondblclick",
            "slug": "API/GlobalEventHandlers/ondblclick",
            "summary": "The ondblclick property of the GlobalEventHandlers mixin is an EventHandler that processes dblclick events on the given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.ondblclick"
        }
    ],
    "ix-handler-ondrag": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondrag",
            "slug": "API/GlobalEventHandlers/ondrag",
            "summary": "A global event handler for the drag event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.ondrag"
        }
    ],
    "ix-handler-ondragend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondragend",
            "slug": "API/GlobalEventHandlers/ondragend",
            "summary": "A global event handler for the dragend event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.ondragend"
        }
    ],
    "ix-handler-ondragenter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondragenter",
            "slug": "API/GlobalEventHandlers/ondragenter",
            "summary": "A global event handler for the dragenter event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.ondragenter"
        }
    ],
    "ix-handler-ondragleave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondragleave",
            "slug": "API/GlobalEventHandlers/ondragleave",
            "summary": "A global event handler for the dragleave event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.ondragleave"
        }
    ],
    "ix-handler-ondragover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondragover",
            "slug": "API/GlobalEventHandlers/ondragover",
            "summary": "A global event handler for the dragover event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.ondragover"
        }
    ],
    "ix-handler-ondragstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondragstart",
            "slug": "API/GlobalEventHandlers/ondragstart",
            "summary": "A global event handler for the dragstart event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.ondragstart"
        }
    ],
    "ix-handler-ondrop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondrop",
            "slug": "API/GlobalEventHandlers/ondrop",
            "summary": "A global event handler for the drop event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.ondrop"
        }
    ],
    "handler-ondurationchange": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "ondurationchange",
            "slug": "API/GlobalEventHandlers/ondurationchange",
            "summary": "The ondurationchange property of the GlobalEventHandlers mixin is the EventHandler for processing durationchange events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.ondurationchange"
        }
    ],
    "handler-onemptied": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onemptied",
            "slug": "API/GlobalEventHandlers/onemptied",
            "summary": "The onemptied property sets and returns the event handler for the emptied event.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onemptied"
        }
    ],
    "handler-onended": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onended",
            "slug": "API/GlobalEventHandlers/onended",
            "summary": "The onended property of the GlobalEventHandlers mixin is the EventHandler for processing ended events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onended"
        }
    ],
    "handler-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onerror",
            "slug": "API/GlobalEventHandlers/onerror",
            "summary": "The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onerror"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "onerror",
            "slug": "API/HTMLMediaElement/onerror",
            "summary": "The onerror property of the HTMLMediaElement interface is the EventHandler for processing error events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.onerror"
        }
    ],
    "handler-onfocus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onfocus",
            "slug": "API/GlobalEventHandlers/onfocus",
            "summary": "The onfocus property of the GlobalEventHandlers mixin is an EventHandler that processes focus events on the given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onfocus"
        }
    ],
    "handler-onformdata": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onformdata",
            "slug": "API/GlobalEventHandlers/onformdata",
            "summary": "The onformdata property of the GlobalEventHandlers mixin is the EventHandler for processing formdata events, fired after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor. onformdata is available on HTMLFormElement.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": {
                    "version_added": "77"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "64"
                },
                "opera_android": {
                    "version_added": "55"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onformdata"
        }
    ],
    "ix-handler-oninput": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "oninput",
            "slug": "API/GlobalEventHandlers/oninput",
            "summary": "The oninput property of the GlobalEventHandlers mixin is an EventHandler that processes input events on the <input>, <select>, and <textarea> elements. It also handles these events on elements where contenteditable or designMode are turned on.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oninput"
        }
    ],
    "handler-oninvalid": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "oninvalid",
            "slug": "API/GlobalEventHandlers/oninvalid",
            "summary": "The oninvalid property of the GlobalEventHandlers mixin is an EventHandler that processes invalid events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oninvalid"
        }
    ],
    "handler-onkeydown": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onkeydown",
            "slug": "API/GlobalEventHandlers/onkeydown",
            "summary": "The onkeydown property of the GlobalEventHandlers mixin is an EventHandler that processes keydown events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onkeydown"
        }
    ],
    "handler-onkeypress": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onkeypress",
            "slug": "API/GlobalEventHandlers/onkeypress",
            "summary": "The onkeypress property of the GlobalEventHandlers mixin is an EventHandler that processes keypress events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onkeypress"
        }
    ],
    "handler-onkeyup": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onkeyup",
            "slug": "API/GlobalEventHandlers/onkeyup",
            "summary": "The onkeyup property of the GlobalEventHandlers mixin is an EventHandler that processes keyup events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onkeyup"
        }
    ],
    "handler-onload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onload",
            "slug": "API/GlobalEventHandlers/onload",
            "summary": "The onload property of the GlobalEventHandlers mixin is an EventHandler that processes load events on a Window, XMLHttpRequest, <img> element, etc.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onload"
        }
    ],
    "handler-onloadeddata": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onloadeddata",
            "slug": "API/GlobalEventHandlers/onloadeddata",
            "summary": "The onloadeddata property of the GlobalEventHandlers mixin is the EventHandler for processing loadeddata events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onloadeddata"
        }
    ],
    "handler-onloadedmetadata": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onloadedmetadata",
            "slug": "API/GlobalEventHandlers/onloadedmetadata",
            "summary": "The onloadedmetadata property of the GlobalEventHandlers mixin is the EventHandler for processing loadedmetadata events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onloadedmetadata"
        }
    ],
    "handler-onloadstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onloadstart",
            "slug": "API/GlobalEventHandlers/onloadstart",
            "summary": "The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "safari": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "safari_ios": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements."
                }
            },
            "title": "GlobalEventHandlers.onloadstart"
        }
    ],
    "handler-onmousedown": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onmousedown",
            "slug": "API/GlobalEventHandlers/onmousedown",
            "summary": "The onmousedown property of the GlobalEventHandlers mixin is an EventHandler that processes mousedown events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmousedown"
        }
    ],
    "handler-onmouseenter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onmouseenter",
            "slug": "API/GlobalEventHandlers/onmouseenter",
            "summary": "The onmouseenter property of the GlobalEventHandlers mixin is the EventHandler for processing mouseenter events.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "17"
                },
                "opera_android": {
                    "version_added": "18"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onmouseenter"
        }
    ],
    "handler-onmouseleave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onmouseleave",
            "slug": "API/GlobalEventHandlers/onmouseleave",
            "summary": "The onmouseleave property of the GlobalEventHandlers mixin is the EventHandler for processing mouseleave events.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "17"
                },
                "opera_android": {
                    "version_added": "18"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onmouseleave"
        }
    ],
    "handler-onmousemove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onmousemove",
            "slug": "API/GlobalEventHandlers/onmousemove",
            "summary": "The onmousemove property of the GlobalEventHandlers mixin is an EventHandler that processes mousemove events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmousemove"
        }
    ],
    "handler-onmouseout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onmouseout",
            "slug": "API/GlobalEventHandlers/onmouseout",
            "summary": "The onmouseout property of the GlobalEventHandlers mixin is an EventHandler that processes mouseout events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseout"
        }
    ],
    "handler-onmouseover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onmouseover",
            "slug": "API/GlobalEventHandlers/onmouseover",
            "summary": "The onmouseover property of the GlobalEventHandlers mixin is an EventHandler that processes mouseover events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseover"
        }
    ],
    "handler-onmouseup": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onmouseup",
            "slug": "API/GlobalEventHandlers/onmouseup",
            "summary": "The onmouseup property of the GlobalEventHandlers mixin is an EventHandler that processes mouseup events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseup"
        }
    ],
    "handler-onpause": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onpause",
            "slug": "API/GlobalEventHandlers/onpause",
            "summary": "The onpause property of the GlobalEventHandlers mixin is the EventHandler for processing pause events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onpause"
        }
    ],
    "handler-onplay": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onplay",
            "slug": "API/GlobalEventHandlers/onplay",
            "summary": "The onplay property of the GlobalEventHandlers mixin is the EventHandler for processing play events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onplay"
        }
    ],
    "handler-onreset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onreset",
            "slug": "API/GlobalEventHandlers/onreset",
            "summary": "The onreset property of the GlobalEventHandlers mixin is an EventHandler that processes reset events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onreset"
        }
    ],
    "handler-onresize": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onresize",
            "slug": "API/GlobalEventHandlers/onresize",
            "summary": "The onresize property of the GlobalEventHandlers interface is an EventHandler that processes resize events.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onresize"
        }
    ],
    "handler-onscroll": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onscroll",
            "slug": "API/GlobalEventHandlers/onscroll",
            "summary": "The onscroll property of the GlobalEventHandlers mixin is an EventHandler that processes scroll events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onscroll"
        }
    ],
    "handler-onselect": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onselect",
            "slug": "API/GlobalEventHandlers/onselect",
            "summary": "The onselect property of the GlobalEventHandlers mixin is an EventHandler that processes select events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onselect"
        }
    ],
    "handler-onsubmit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onsubmit",
            "slug": "API/GlobalEventHandlers/onsubmit",
            "summary": "The onsubmit property of the GlobalEventHandlers mixin is an EventHandler that processes submit events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onsubmit"
        }
    ],
    "handler-onwheel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "onwheel",
            "slug": "API/GlobalEventHandlers/onwheel",
            "summary": "The onwheel property of the GlobalEventHandlers mixin is an EventHandler that processes wheel events.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "48"
                },
                "opera_android": {
                    "version_added": "45"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "61"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers.onwheel"
        }
    ],
    "globaleventhandlers": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GlobalEventHandlers.json",
            "name": "GlobalEventHandlers",
            "slug": "API/GlobalEventHandlers",
            "summary": "The GlobalEventHandlers mixin describes the event handlers common to several interfaces like HTMLElement, Document, or Window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GlobalEventHandlers"
        }
    ],
    "attr-hyperlink-download": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "download",
            "slug": "API/HTMLAnchorElement/download",
            "summary": "The HTMLAnchorElement.download property is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value, if any, specifies the default file name for use in labeling the resource in a local file system. If the name is not a valid file name in the underlying OS, the browser will adjust it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement.download"
        }
    ],
    "dom-a-rel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "rel",
            "slug": "API/HTMLAnchorElement/rel",
            "summary": "The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLAnchorElement.rel"
        }
    ],
    "dom-a-rellist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "relList",
            "slug": "API/HTMLAnchorElement/relList",
            "summary": "The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <a> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": {
                    "version_added": "65"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "65"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rellist",
                "title": "relList (DOMTokenList)"
            },
            "title": "HTMLAnchorElement.relList"
        }
    ],
    "htmlanchorelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "HTMLAnchorElement",
            "slug": "API/HTMLAnchorElement",
            "summary": "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to <a> element; not to be confused with <link>, which is represented by HTMLLinkElement)",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLAnchorElement"
        }
    ],
    "dom-area-rel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "rel",
            "slug": "API/HTMLAreaElement/rel",
            "summary": "The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <area> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement.rel"
        }
    ],
    "dom-area-rellist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "relList",
            "slug": "API/HTMLAreaElement/relList",
            "summary": "The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <area> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": {
                    "version_added": "65"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "65"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement.relList"
        }
    ],
    "htmlareaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "HTMLAreaElement",
            "slug": "API/HTMLAreaElement",
            "summary": "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLAreaElement"
        }
    ],
    "dom-audio": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAudioElement.json",
            "name": "Audio",
            "slug": "API/HTMLAudioElement/Audio",
            "summary": "The Audio() constructor creates and returns a new HTMLAudioElement which can be either attached to a document for the user to interact with and/or listen to, or can be used offscreen to manage and play audio.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Audio()"
        }
    ],
    "htmlaudioelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAudioElement.json",
            "name": "HTMLAudioElement",
            "slug": "API/HTMLAudioElement",
            "summary": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAudioElement"
        }
    ],
    "htmlbrelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLBRElement.json",
            "name": "HTMLBRElement",
            "slug": "API/HTMLBRElement",
            "summary": "The HTMLBRElement interface represents a HTML line break element (<br>). It inherits from HTMLElement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLBRElement"
        }
    ],
    "htmlbaseelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLBaseElement.json",
            "name": "HTMLBaseElement",
            "slug": "API/HTMLBaseElement",
            "summary": "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLBaseElement"
        }
    ],
    "htmlbodyelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLBodyElement.json",
            "name": "HTMLBodyElement",
            "slug": "API/HTMLBodyElement",
            "summary": "The HTMLBodyElement interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLBodyElement"
        }
    ],
    "dom-lfe-labels": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLButtonElement.json",
            "name": "labels",
            "slug": "API/HTMLButtonElement/labels",
            "summary": "The HTMLButtonElement.labels read-only property returns a NodeList of the <label> elements associated with the <button> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLButtonElement.labels"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "labels",
            "slug": "API/HTMLInputElement/labels",
            "summary": "The HTMLInputElement.labels read-only property returns a NodeList of the <label> elements associated with the <input> element.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement.labels"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMeterElement.json",
            "name": "labels",
            "slug": "API/HTMLMeterElement/labels",
            "summary": "The HTMLMeterElement.labels read-only property returns a NodeList of the <label> elements associated with the <meter> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMeterElement.labels"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOutputElement.json",
            "name": "labels",
            "slug": "API/HTMLOutputElement/labels",
            "summary": "The HTMLOutputElement.labels read-only property returns a NodeList of the <label> elements associated with the <output> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLOutputElement.labels"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLProgressElement.json",
            "name": "labels",
            "slug": "API/HTMLProgressElement/labels",
            "summary": "The HTMLProgressElement.labels read-only property returns a NodeList of the <label> elements associated with the <progress> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLProgressElement.labels"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "labels",
            "slug": "API/HTMLSelectElement/labels",
            "summary": "The HTMLSelectElement.labels read-only property returns a NodeList of the <label> elements associated with the <select> element.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement.labels"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTextAreaElement.json",
            "name": "labels",
            "slug": "API/HTMLTextAreaElement/labels",
            "summary": "The HTMLTextAreaElement.labels read-only property returns a NodeList of the <label> elements associated with the <textarea> element.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTextAreaElement.labels"
        }
    ],
    "htmlbuttonelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLButtonElement.json",
            "name": "HTMLButtonElement",
            "slug": "API/HTMLButtonElement",
            "summary": "The HTMLButtonElement interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLButtonElement"
        }
    ],
    "dom-canvas-getcontext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "getContext",
            "slug": "API/HTMLCanvasElement/getContext",
            "summary": "The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported, or the canvas has already been set to a different context mode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement.getContext()"
        }
    ],
    "attr-canvas-height": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "height",
            "slug": "API/HTMLCanvasElement/height",
            "summary": "The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement.height"
        }
    ],
    "dom-canvas-toblob": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "toBlob",
            "slug": "API/HTMLCanvasElement/toBlob",
            "summary": "The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "19"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10",
                    "prefix": "ms"
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement.toBlob()"
        }
    ],
    "dom-canvas-todataurl": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "toDataURL",
            "slug": "API/HTMLCanvasElement/toDataURL",
            "summary": "The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement.toDataURL()"
        }
    ],
    "dom-canvas-transfercontroltooffscreen": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "transferControlToOffscreen",
            "slug": "API/HTMLCanvasElement/transferControlToOffscreen",
            "summary": "The HTMLCanvasElement.transferControlToOffscreen() method transfers control to an OffscreenCanvas object, either on the main thread or on a worker.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "44",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "44",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement.transferControlToOffscreen()"
        }
    ],
    "attr-canvas-width": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "width",
            "slug": "API/HTMLCanvasElement/width",
            "summary": "The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement.width"
        }
    ],
    "htmlcanvaselement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "HTMLCanvasElement",
            "slug": "API/HTMLCanvasElement",
            "summary": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9",
                    "notes": "Opera Mini 5.0 and later has partial support."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Opera Mini 5.0 and later has partial support."
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement"
        }
    ],
    "htmldlistelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDListElement.json",
            "name": "HTMLDListElement",
            "slug": "API/HTMLDListElement",
            "summary": "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLDListElement"
        }
    ],
    "dom-data-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDataElement.json",
            "name": "value",
            "slug": "API/HTMLDataElement/value",
            "summary": "The value property of the HTMLDataElement interface returns a DOMString reflecting the value HTML attribute.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "49"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "62"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDataElement.value"
        }
    ],
    "htmldataelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDataElement.json",
            "name": "HTMLDataElement",
            "slug": "API/HTMLDataElement",
            "summary": "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "49"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "62"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDataElement"
        }
    ],
    "htmldatalistelement": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLDataListElement.json",
            "name": "HTMLDataListElement",
            "slug": "API/HTMLDataListElement",
            "summary": "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDataListElement"
        }
    ],
    "event-toggle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDetailsElement.json",
            "name": "toggle_event",
            "slug": "API/HTMLDetailsElement/toggle_event",
            "summary": "The toggle event fires when the open/closed state of a <details> element is toggled.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLDetailsElement: toggle event"
        }
    ],
    "htmldetailselement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDetailsElement.json",
            "name": "HTMLDetailsElement",
            "slug": "API/HTMLDetailsElement",
            "summary": "The HTMLDetailsElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <details> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLDetailsElement"
        }
    ],
    "event-cancel": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "cancel_event",
            "slug": "API/HTMLDialogElement/cancel_event",
            "summary": "The cancel event fires on a <dialog> when the user instructs the browser that they wish to dismiss the current open dialog. For example, the browser might fire this event when the user presses the Esc key or clicks a \"Close dialog\" button which is part of the browser's UI.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLDialogElement: cancel event"
        }
    ],
    "dom-dialog-close": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "close",
            "slug": "API/HTMLDialogElement/close",
            "summary": "Void.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "firefox_android": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement.close()"
        }
    ],
    "event-close": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "close_event",
            "slug": "API/HTMLDialogElement/close_event",
            "summary": "The close event is fired on an HTMLDialogElement object when the dialog it represents has been closed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLDialogElement: close event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WebSocket.json",
            "name": "close_event",
            "slug": "API/WebSocket/close_event",
            "summary": "The close event is fired when a connection with a WebSocket is closed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket: close event"
        }
    ],
    "dom-dialog-open": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "open",
            "slug": "API/HTMLDialogElement/open",
            "summary": "A Boolean representing the state of the open HTML attribute. true means it is set, and therefore the dialog is shown. false means it not set, and therefore the dialog is not shown.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "firefox_android": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement.open"
        }
    ],
    "dom-dialog-returnvalue": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "returnValue",
            "slug": "API/HTMLDialogElement/returnValue",
            "summary": "The returnValue property of the HTMLDialogElement interface gets or sets the return value for the <dialog>, usually to indicate which button the user pressed to close it.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "firefox_android": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement.returnValue"
        }
    ],
    "dom-dialog-show": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "show",
            "slug": "API/HTMLDialogElement/show",
            "summary": "The show() method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "firefox_android": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement.show()"
        }
    ],
    "dom-dialog-showmodal": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "showModal",
            "slug": "API/HTMLDialogElement/showModal",
            "summary": "The showModal() method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays into the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "firefox_android": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement.showModal()"
        }
    ],
    "htmldialogelement": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "HTMLDialogElement",
            "slug": "API/HTMLDialogElement",
            "summary": "The HTMLDialogElement interface provides methods to manipulate <dialog> elements. It inherits properties and methods from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "firefox_android": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement"
        }
    ],
    "htmldivelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDivElement.json",
            "name": "HTMLDivElement",
            "slug": "API/HTMLDivElement",
            "summary": "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLDivElement"
        }
    ],
    "htmldocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDocument.json",
            "name": "HTMLDocument",
            "slug": "API/HTMLDocument",
            "summary": "The HTMLDocument interface, which may be accessed through the Window.HTMLDocument property, extends the Window.HTMLDocument property to include methods and properties that are specific to HTML documents.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLDocument"
        }
    ],
    "dom-accesskeylabel": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "accessKeyLabel",
            "slug": "API/HTMLElement/accessKeyLabel",
            "summary": "The HTMLElement.accessKeyLabel read-only property returns a String that represents the element's assigned access key (if any); otherwise it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": {
                    "version_added": "14"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "accessKeyLabel"
        }
    ],
    "dom-blur": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "blur",
            "slug": "API/HTMLOrForeignElement/blur",
            "summary": "The HTMLElement.blur() method removes keyboard focus from the current element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement.blur()"
        }
    ],
    "dom-click": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "click",
            "slug": "API/HTMLElement/click",
            "summary": "The HTMLElement.click() method simulates a mouse click on an element.",
            "support": {
                "chrome": {
                    "version_added": "9",
                    "notes": "Before Chrome 19, <code>click()</code> is only defined on buttons and inputs."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Before Chrome 19, <code>click()</code> is only defined on buttons and inputs."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3",
                    "notes": [
                        "Before Firefox 5, <code>click()</code> is only defined on buttons and inputs, and has no effect on text and file inputs.",
                        "Starting in Firefox 75, the <code>click()</code> function works even when the element is not attached to a DOM tree."
                    ]
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before Samsung Internet 1.5, <code>click()</code> is only defined on buttons and inputs."
                },
                "webview_android": {
                    "version_added": "37",
                    "notes": "Before Android WebView 4.4, <code>click()</code> is only defined on buttons and inputs."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 19, <code>click()</code> is only defined on buttons and inputs."
                }
            },
            "title": "HTMLElement.click()"
        }
    ],
    "contenteditable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "contentEditable",
            "slug": "API/HTMLElement/contentEditable",
            "summary": "The contentEditable property of the HTMLElement interface specifies whether or not the element is editable.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "contenteditable",
                "title": "contenteditable attribute (basic support)"
            },
            "title": "HTMLElement.contentEditable"
        }
    ],
    "dom-dataset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dataset",
            "slug": "API/HTMLOrForeignElement/dataset",
            "summary": "The dataset read-only property of the HTMLOrForeignElement interface provides read/write access to all the custom data attributes (data-*) set on the element.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOrForeignElement.dataset"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SVGElement.json",
            "name": "dataset",
            "slug": "API/HTMLOrForeignElement/dataset",
            "summary": "The dataset read-only property of the HTMLOrForeignElement interface provides read/write access to all the custom data attributes (data-*) set on the element.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": {
                    "version_added": "51"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "55"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOrForeignElement.dataset"
        }
    ],
    "dom-dir": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dir",
            "slug": "API/HTMLElement/dir",
            "summary": "The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement.dir"
        }
    ],
    "dom-focus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "focus",
            "slug": "API/HTMLOrForeignElement/focus",
            "summary": "The HTMLElement.focus() method sets focus on the specified element, if it can be focused. The focused element is the element which will receive keyboard and similar events by default.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement.focus()"
        }
    ],
    "dom-hidden": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "hidden",
            "slug": "API/HTMLElement/hidden",
            "summary": "The HTMLElement property hidden is a Boolean which is true if the element is hidden; otherwise the value is false. This is quite different from using the CSS property display to control the visibility of an element.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement.hidden"
        }
    ],
    "inert-subtrees": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLElement.json",
            "name": "inert",
            "slug": "API/HTMLElement/inert",
            "summary": "The HTMLElement property inert is a Boolean, when present, may make the browser \"ignore\" the element from assistive technologies, page search and text selection. This can be useful when building UIs such as modals where you would want to \"trap\" the focus inside the modal when it's visible.",
            "support": {
                "chrome": {
                    "version_added": "60",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "60",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "81",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "html5.inert.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "81",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "html5.inert.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "44",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                }
            },
            "title": "inert"
        }
    ],
    "the-innertext-idl-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "innerText",
            "slug": "API/HTMLElement/innerText",
            "summary": "The innerText property of the HTMLElement interface represents the \"rendered\" text content of a node and its descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "9.6"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "innertext",
                "title": "HTMLElement.innerText"
            },
            "title": "HTMLElement.innerText"
        }
    ],
    "event-input-input": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "input_event",
            "slug": "API/HTMLElement/input_event",
            "summary": "The input event fires when the value of an <input>, <select>, or <textarea> element has been changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only supports <code>input</code> of type <code>text</code> and <code>password</code>."
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-event",
                "title": "input event"
            },
            "title": "HTMLElement: input event"
        }
    ],
    "dom-iscontenteditable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "isContentEditable",
            "slug": "API/HTMLElement/isContentEditable",
            "summary": "The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement.isContentEditable"
        }
    ],
    "attr-nonce": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "nonce",
            "slug": "API/HTMLOrForeignElement/nonce",
            "summary": "The nonce property of the HTMLOrForeignElement interface returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "61"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOrForeignElement.nonce"
        }
    ],
    "dom-tabindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "tabIndex",
            "slug": "API/HTMLOrForeignElement/tabIndex",
            "summary": "The tabIndex property of the HTMLOrForeignElement interface represents the tab order of the current element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8",
                    "partial_implementation": true,
                    "notes": "Returns incorrect value for elements without an explicit tabindex attribute. See <a href='https://developer.microsoft.com/microsoft-edge/platform/issues/4365703/'>issue 4365703</a> for details."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOrForeignElement.tabIndex"
        }
    ],
    "dom-title": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "title",
            "slug": "API/HTMLElement/title",
            "summary": "The HTMLElement.title property represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement.title"
        }
    ],
    "htmlelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "HTMLElement",
            "slug": "API/HTMLElement",
            "summary": "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement"
        }
    ],
    "htmlembedelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLEmbedElement.json",
            "name": "HTMLEmbedElement",
            "slug": "API/HTMLEmbedElement",
            "summary": "The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function."
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting with Opera 45, this interface can no longer be called as a function."
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting with Opera 45, this interface can no longer be called as a function."
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting with Samsung Internet 7.0, this interface can no longer be called as a function."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function."
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function."
                }
            },
            "title": "HTMLEmbedElement"
        }
    ],
    "htmlfieldsetelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFieldSetElement.json",
            "name": "HTMLFieldSetElement",
            "slug": "API/HTMLFieldSetElement",
            "summary": "The HTMLFieldSetElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFieldSetElement"
        }
    ],
    "dom-htmlformcontrolscollection-nameditem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormControlsCollection.json",
            "name": "namedItem",
            "slug": "API/HTMLFormControlsCollection/namedItem",
            "summary": "The HTMLFormControlsCollection.namedItem() method returns the RadioNodeList or the Element in the collection whose name or id match the specified name, or null if no node matches.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "27",
                        "version_removed": "33",
                        "partial_implementation": true,
                        "notes": "Returned a <a href='https://developer.mozilla.org/docs/Web/API/NodeList'><code>NodeList</code></a> instead of a <a href='https://developer.mozilla.org/docs/Web/API/RadioNodeList'><code>RadioNodeList</code></a>."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "27",
                        "version_removed": "33",
                        "partial_implementation": true,
                        "notes": "Returned a <a href='https://developer.mozilla.org/docs/Web/API/NodeList'><code>NodeList</code></a> instead of a <a href='https://developer.mozilla.org/docs/Web/API/RadioNodeList'><code>RadioNodeList</code></a>."
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormControlsCollection.namedItem()"
        }
    ],
    "htmlformcontrolscollection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormControlsCollection.json",
            "name": "HTMLFormControlsCollection",
            "slug": "API/HTMLFormControlsCollection",
            "summary": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormControlsCollection"
        }
    ],
    "dom-form-acceptcharset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "acceptCharset",
            "slug": "API/HTMLFormElement/acceptCharset",
            "summary": "The HTMLFormElement.acceptCharset property represents a list of the supported character encodings for the given <form> element. This list can be comma-separated or space-separated.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.acceptCharset"
        }
    ],
    "dom-fs-action": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "action",
            "slug": "API/HTMLFormElement/action",
            "summary": "The HTMLFormElement.action property represents the action of the <form> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.action"
        }
    ],
    "dom-form-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "elements",
            "slug": "API/HTMLFormElement/elements",
            "summary": "The HTMLFormElement property elements returns an HTMLFormControlsCollection listing all the form controls contained in the <form> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement.elements"
        }
    ],
    "dom-fs-enctype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "enctype",
            "slug": "API/HTMLFormElement/enctype",
            "summary": "The HTMLFormElement.enctype property is the MIME type of content that is used to submit the form to the server. Possible values are:",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.enctype"
        }
    ],
    "event-formdata": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "formdata_event",
            "slug": "API/HTMLFormElement/formdata_event",
            "summary": "The formdata event fires after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": {
                    "version_added": "77"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "64"
                },
                "opera_android": {
                    "version_added": "55"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: formdata event"
        }
    ],
    "dom-form-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "length",
            "slug": "API/HTMLFormElement/length",
            "summary": "The HTMLFormElement.length read-only property returns the number of controls in the <form> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.length"
        }
    ],
    "dom-fs-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "method",
            "slug": "API/HTMLFormElement/method",
            "summary": "The HTMLFormElement.method property represents the HTTP method used to submit the <form>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.method"
        }
    ],
    "dom-form-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "name",
            "slug": "API/HTMLFormElement/name",
            "summary": "The HTMLFormElement.name property represents the name of the current <form> element as a string.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.name"
        }
    ],
    "dom-cva-reportvalidity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "reportValidity",
            "slug": "API/HTMLFormElement/reportValidity",
            "summary": "The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "40"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement.reportValidity()"
        }
    ],
    "dom-form-requestsubmit": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "requestSubmit",
            "slug": "API/HTMLFormElement/requestSubmit",
            "summary": "The HTMLFormElement method requestSubmit() requests that the form be submitted using a specific submit button.",
            "support": {
                "chrome": {
                    "version_added": "76"
                },
                "chrome_android": {
                    "version_added": "76"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "63"
                },
                "opera_android": {
                    "version_added": "54"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "76"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement.requestSubmit()"
        }
    ],
    "dom-form-reset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "reset",
            "slug": "API/HTMLFormElement/reset",
            "summary": "The HTMLFormElement.reset() method restores a form element's default values. This method does the same thing as clicking the form's reset button.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement.reset()"
        }
    ],
    "event-reset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "reset_event",
            "slug": "API/HTMLFormElement/reset_event",
            "summary": "The reset event fires when a <form> is reset.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement: reset event"
        }
    ],
    "dom-form-submit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "submit",
            "slug": "API/HTMLFormElement/submit",
            "summary": "The HTMLFormElement.submit() method submits a given <form>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.submit()"
        }
    ],
    "event-submit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "submit_event",
            "slug": "API/HTMLFormElement/submit_event",
            "summary": "The submit event fires when a <form> is submitted.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: submit event"
        }
    ],
    "dom-fs-target": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "target",
            "slug": "API/HTMLFormElement/target",
            "summary": "The target property of the HTMLFormElement interface represents the target of the form's action (i.e., the frame in which to render its output).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement.target"
        }
    ],
    "htmlformelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "HTMLFormElement",
            "slug": "API/HTMLFormElement",
            "summary": "The HTMLFormElement interface represents a <form> element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement"
        }
    ],
    "htmlframesetelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFrameSetElement.json",
            "name": "HTMLFrameSetElement",
            "slug": "API/HTMLFrameSetElement",
            "summary": "The HTMLFrameSetElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating <frameset> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFrameSetElement"
        }
    ],
    "htmlhrelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHRElement.json",
            "name": "HTMLHRElement",
            "slug": "API/HTMLHRElement",
            "summary": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLHRElement"
        }
    ],
    "htmlheadelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHeadElement.json",
            "name": "HTMLHeadElement",
            "slug": "API/HTMLHeadElement",
            "summary": "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLHeadElement"
        }
    ],
    "htmlheadingelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHeadingElement.json",
            "name": "HTMLHeadingElement",
            "slug": "API/HTMLHeadingElement",
            "summary": "The HTMLHeadingElement interface represents the different heading elements, <h1> through <h6>. It inherits methods and properties from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLHeadingElement"
        }
    ],
    "htmlhtmlelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHtmlElement.json",
            "name": "HTMLHtmlElement",
            "slug": "API/HTMLHtmlElement",
            "summary": "The HTMLHtmlElement interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLHtmlElement"
        }
    ],
    "dom-hyperlink-hash": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "hash",
            "slug": "API/HTMLHyperlinkElementUtils/hash",
            "summary": "The HTMLHyperlinkElementUtils.hash property returns a USVString containing a '#' followed by the fragment identifier of the URL.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface. Also, from Firefox 29 to Firefox 40, the returned value was incorrectly percent-decoded."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface. Also, from Firefox 29 to Firefox 40, the returned value was incorrectly percent-decoded."
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.hash"
        }
    ],
    "dom-hyperlink-host": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "host",
            "slug": "API/HTMLHyperlinkElementUtils/host",
            "summary": "The HTMLHyperlinkElementUtils.host property is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": "5",
                    "notes": "In Internet Explorer 9, the host of an <a href='https://developer.mozilla.org/docs/Web/HTML/Element/a'><code>&lt;a&gt;</code></a> always include the port (e.g. <code>developer.mozilla.org:443</code>), even if there is no explicit port in the <code>href</code> attribute value."
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.host"
        }
    ],
    "dom-hyperlink-hostname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "hostname",
            "slug": "API/HTMLHyperlinkElementUtils/hostname",
            "summary": "The HTMLHyperlinkElementUtils.hostname property is a USVString containing the domain of the URL.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.hostname"
        }
    ],
    "dom-hyperlink-href": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "href",
            "slug": "API/HTMLHyperlinkElementUtils/href",
            "summary": "The HTMLHyperlinkElementUtils.href property is a stringifier that returns a USVString containing the whole URL, and allows the href to be updated.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.href"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "toString",
            "slug": "API/HTMLHyperlinkElementUtils/toString",
            "summary": "The HTMLHyperlinkElementUtils.toString() stringifier method returns a USVString containing the whole URL. It is a read-only version of HTMLHyperlinkElementUtils.href.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLHyperlinkElementUtils.toString()"
        }
    ],
    "dom-hyperlink-origin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "origin",
            "slug": "API/HTMLHyperlinkElementUtils/origin",
            "summary": "The HTMLHyperlinkElementUtils.origin read-only property is a USVString containing the Unicode serialization of the origin of the represented URL",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "26",
                    "notes": [
                        "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 49, results for URL using the <code>blob</code> scheme incorrectly returned <code>null</code>."
                    ]
                },
                "firefox_android": {
                    "version_added": "26",
                    "notes": [
                        "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 49, results for URL using the <code>blob</code> scheme incorrectly returned <code>null</code>."
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.origin"
        }
    ],
    "dom-hyperlink-password": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "password",
            "slug": "API/HTMLHyperlinkElementUtils/password",
            "summary": "The HTMLHyperlinkElementUtils.password property is a USVString containing the password specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "26",
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "26",
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.password"
        }
    ],
    "dom-hyperlink-pathname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "pathname",
            "slug": "API/HTMLHyperlinkElementUtils/pathname",
            "summary": "The HTMLHyperlinkElementUtils.pathname property is a USVString containing an initial '/' followed by the path of the URL (or the empty string if there is no path).",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ]
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ]
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.pathname"
        }
    ],
    "dom-hyperlink-port": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "port",
            "slug": "API/HTMLHyperlinkElementUtils/port",
            "summary": "The HTMLHyperlinkElementUtils.port property is a USVString containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.port"
        }
    ],
    "dom-hyperlink-protocol": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "protocol",
            "slug": "API/HTMLHyperlinkElementUtils/protocol",
            "summary": "The HTMLHyperlinkElementUtils.protocol property is a USVString representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.protocol"
        }
    ],
    "dom-hyperlink-search": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "search",
            "slug": "API/HTMLHyperlinkElementUtils/search",
            "summary": "The HTMLHyperlinkElementUtils.search property is a search string, also called a query string, that is USVString containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ]
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ]
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.search"
        }
    ],
    "dom-hyperlink-username": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "username",
            "slug": "API/HTMLHyperlinkElementUtils/username",
            "summary": "The HTMLHyperlinkElementUtils.username property is a USVString containing the username specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "26",
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "firefox_android": {
                    "version_added": "26",
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils.username"
        }
    ],
    "htmlhyperlinkelementutils": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHyperlinkElementUtils.json",
            "name": "HTMLHyperlinkElementUtils",
            "slug": "API/HTMLHyperlinkElementUtils",
            "summary": "The HTMLHyperlinkElementUtils mixin defines utility methods and properties to work with HTMLAnchorElement and HTMLAreaElement. These utilities allow to deal with common features like URLs.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": [
                        "This mixin was called <code>URLUtils</code> before Firefox 45, and was also implemented to other by other interfaces, like <a href='https://developer.mozilla.org/docs/Web/API/Location'><code>Location</code></a>. From Firefox 45, the other interfaces implement their own version of the properties and methods they need.",
                        "Firefox was a bug whereby single contained in URLs are escaped when accessed via URL APIs (<a href='https://bugzil.la/1386683'>bug 1386683</a>). This has been as of Firefox 57."
                    ]
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": [
                        "This mixin was called <code>URLUtils</code> before Firefox 45, and was also implemented to other by other interfaces, like <a href='https://developer.mozilla.org/docs/Web/API/Location'><code>Location</code></a>. From Firefox 45, the other interfaces implement their own version of the properties and methods they need.",
                        "Firefox was a bug whereby single contained in URLs are escaped when accessed via URL APIs (<a href='https://bugzil.la/1386683'>bug 1386683</a>). This has been as of Firefox 57."
                    ]
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Starting in Opera 39, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Starting in Samsung Internet 6.0, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Starting in Chrome 52, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>"
                }
            },
            "title": "HTMLHyperlinkElementUtils"
        }
    ],
    "dom-iframe-contentdocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "contentDocument",
            "slug": "API/HTMLIFrameElement/contentDocument",
            "summary": "If the iframe and the iframe's parent document are Same Origin, returns a Document (that is, the active document in the inline frame's nested browsing context), else returns null.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "contentDocument"
        }
    ],
    "dom-iframe-contentwindow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "contentWindow",
            "slug": "API/HTMLIFrameElement/contentWindow",
            "summary": "The contentWindow property returns the Window object of an HTMLIFrameElement. You can use this Window object to access the iframe's document and its internal DOM. This attribute is read-only, but its properties can be manipulated like the global Window object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement.contentWindow"
        }
    ],
    "dom-iframe-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLIFrameElement/referrerPolicy",
            "summary": "The HTMLIFrameElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the <iframe> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": {
                    "version_added": "51"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "38"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "51"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement.referrerPolicy"
        }
    ],
    "dom-iframe-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "src",
            "slug": "API/HTMLIFrameElement/src",
            "summary": "The HTMLIFrameElement.src property reflects the HTML referrerpolicy attribute of the <iframe> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement.src"
        }
    ],
    "htmliframeelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "HTMLIFrameElement",
            "slug": "API/HTMLIFrameElement",
            "summary": "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLIFrameElement"
        }
    ],
    "dom-image": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "Image",
            "slug": "API/HTMLImageElement/Image",
            "summary": "The Image() constructor creates a new HTMLImageElement instance. It is functionally equivalent to document.createElement('img').",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Image()"
        }
    ],
    "attr-img-align": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "align",
            "slug": "API/HTMLImageElement/align",
            "summary": "The obsolete align property of the HTMLImageElement interface is a string which indicates how to position the image relative to its container.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.align"
        }
    ],
    "dom-img-alt": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "alt",
            "slug": "API/HTMLImageElement/alt",
            "summary": "The HTMLImageElement property alt provides fallback (alternate) text to display when the image specified by the <img> element is not loaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.alt"
        }
    ],
    "dom-img-border": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "border",
            "slug": "API/HTMLImageElement/border",
            "summary": "The obsolete HTMLImageElement property border specifies the number of pixels thick the border surrounding the image should be. A value of 0, the default, indicates that no border should be drawn.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.border"
        }
    ],
    "dom-img-complete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "complete",
            "slug": "API/HTMLImageElement/complete",
            "summary": "The read-only HTMLImageElement interface's complete attribute is a Boolean value which indicates whether or not the image has completely loaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "8",
                    "notes": "IE reports <code>false</code> for broken images."
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.complete"
        }
    ],
    "dom-img-crossorigin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "crossOrigin",
            "slug": "API/HTMLImageElement/crossOrigin",
            "summary": "The HTMLImageElement interface's crossOrigin attribute is a string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.crossOrigin"
        }
    ],
    "dom-img-currentsrc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "currentSrc",
            "slug": "API/HTMLImageElement/currentSrc",
            "summary": "The read-only HTMLImageElement property currentSrc indicates the URL of the image which is currently presented in the <img> element it represents.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "name": "dom.image.srcset.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "name": "dom.image.srcset.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.currentSrc"
        }
    ],
    "dom-img-decode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "decode",
            "slug": "API/HTMLImageElement/decode",
            "summary": "The decode() method of the HTMLImageElement interface returns a Promise that resolves when the image is decoded and it is safe to append the image to the DOM.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": {
                    "version_added": "64"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": {
                    "version_added": "68"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "64"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.decode()"
        },
        {
            "engines": [
                "blink"
            ],
            "filename": "api/SVGImageElement.json",
            "name": "decode",
            "slug": "API/SVGImageElement/decode",
            "summary": "The decode() method of the SVGImageElement interface initiates asynchronous decoding of an image, returning a Promise that ",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": {
                    "version_added": "65"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "65"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SVGImageElement.decode"
        }
    ],
    "dom-img-decoding": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "decoding",
            "slug": "API/HTMLImageElement/decoding",
            "summary": "The decoding property of the HTMLImageElement interface represents a hint given to the browser on how it should decode the image.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": {
                    "version_added": "65"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "65"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.decoding"
        }
    ],
    "dom-img-height": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "height",
            "slug": "API/HTMLImageElement/height",
            "summary": "The height property of the HTMLImageElement interface indicates the height at which the image is drawn, in CSS pixels if the image is being drawn or rendered to any visual medium such as the screen or a printer; otherwise, it's the natural, pixel density corrected height of the image. ",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.height"
        }
    ],
    "attr-img-hspace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "hspace",
            "slug": "API/HTMLImageElement/hspace",
            "summary": "The obsolete hspace property of the HTMLImageElement interface specifies the number of pixels of empty space to leave empty on the left and right sides of the <img> element when laying out the page.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.hspace"
        }
    ],
    "dom-img-ismap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "isMap",
            "slug": "API/HTMLImageElement/isMap",
            "summary": "The HTMLImageElement proeprty isMap is a Boolean value which indicates that the image is to be used by a server-side image map. This may only be used on images located within an <a> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.isMap"
        }
    ],
    "attr-img-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "name",
            "slug": "API/HTMLImageElement/name",
            "summary": "The HTMLImageElement interface's deprecated name property specifies a name for the element. This has been replaced by the id property available on all elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.name"
        }
    ],
    "dom-img-naturalheight": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "naturalHeight",
            "slug": "API/HTMLImageElement/naturalHeight",
            "summary": "The HTMLImageElement interface's naturalHeight property is a read-only value which returns the intrinsic (natural), density-corrected height of the image in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.naturalHeight"
        }
    ],
    "dom-img-naturalwidth": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "naturalWidth",
            "slug": "API/HTMLImageElement/naturalWidth",
            "summary": "The HTMLImageElement interface's read-only naturalWidth property returns the intrinsic (natural), density-corrected width of the image in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "img-naturalwidth-naturalheight",
                "title": "naturalWidth & naturalHeight image properties"
            },
            "title": "HTMLImageElement.naturalWidth"
        }
    ],
    "dom-img-sizes": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "sizes",
            "slug": "API/HTMLImageElement/sizes",
            "summary": "The HTMLImageElement property sizes allows you to specify the layout width of the image for each of a list of media conditions. This provides the ability to automatically select among different images—even images of different orientations or aspect ratios—as the document state changes to match different media conditions.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "33",
                        "version_removed": "52",
                        "flags": [
                            {
                                "name": "dom.image.picture.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "33",
                        "version_removed": "52",
                        "flags": [
                            {
                                "name": "dom.image.picture.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.sizes"
        }
    ],
    "dom-img-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "src",
            "slug": "API/HTMLImageElement/src",
            "summary": "The HTMLImageElement property src, which reflects the HTML src attribute, specifies the image to display in the <img> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.src"
        }
    ],
    "dom-img-srcset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "srcset",
            "slug": "API/HTMLImageElement/srcset",
            "summary": "The HTMLImageElement property srcset is a string which identifies one or more image candidate strings, separated using commas (,) each specifying image resources to use under given circumstances.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": {
                    "version_added": "34"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "name": "dom.image.srcset.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "name": "dom.image.srcset.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "21"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": "2.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.srcset"
        }
    ],
    "dom-img-usemap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "useMap",
            "slug": "API/HTMLImageElement/useMap",
            "summary": "The useMap property on the HTMLImageElement interface reflects the value of the HTML usemap attribute, which is a string providing the name of the client-side image map to apply to the image.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.useMap"
        }
    ],
    "dom-img-vspace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "vspace",
            "slug": "API/HTMLImageElement/vspace",
            "summary": "The obsolete vspace property of the HTMLImageElement interface specifies the number of pixels of empty space to leave empty on the top and bottom of the <img> element when laying out the page.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.vspace"
        }
    ],
    "dom-img-width": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "width",
            "slug": "API/HTMLImageElement/width",
            "summary": "The width property of the HTMLImageElement interface indicates the width at which an image is drawn in CSS pixels if it's being drawn or rendered to any visual medium such as a screen or printer. Otherwise, it's the natural, pixel density-corrected width of the image. ",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement.width"
        }
    ],
    "htmlimageelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "HTMLImageElement",
            "slug": "API/HTMLImageElement",
            "summary": "The HTMLImageElement interface represents an HTML <img> element, providing the properties and methods used to manipulate image elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement"
        }
    ],
    "the-constraint-validation-api": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "invalid_event",
            "slug": "API/HTMLInputElement/invalid_event",
            "summary": "The invalid event fires when a submittable element has been checked for validity and doesn't satisfy its constraints.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "constraint-validation",
                "title": "Constraint Validation API"
            },
            "title": "HTMLInputElement: invalid event"
        }
    ],
    "attr-input-multiple": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "multiple",
            "slug": "API/HTMLInputElement/multiple",
            "summary": "The HTMLInputElement.multiple property indicates if an input can have more than one value. Firefox currently only supports multiple for <input type=\"file\">.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "input-file-multiple",
                "title": "Multiple file selection"
            },
            "title": "HTMLInputElement.multiple"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "input#attr-multiple",
            "slug": "HTML/Element/input#attr-multiple",
            "summary": "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "input-file-multiple",
                "title": "Multiple file selection"
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "dom-textarea/input-setrangetext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "setRangeText",
            "slug": "API/HTMLInputElement/setRangeText",
            "summary": "The HTMLInputElement.setRangeText() method replaces a range of text in an <input> or <textarea> element with a new string.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "qq_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "uc_android": {
                    "version_added": true
                },
                "uc_chinese_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement.setRangeText()"
        }
    ],
    "dom-textarea/input-setselectionrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "setSelectionRange",
            "slug": "API/HTMLInputElement/setSelectionRange",
            "summary": "The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an <input> or <textarea> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "qq_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "uc_android": {
                    "version_added": null
                },
                "uc_chinese_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-selection",
                "title": "Selection controls for input & textarea"
            },
            "title": "HTMLInputElement.setSelectionRange()"
        }
    ],
    "dom-input-stepdown": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "stepDown",
            "slug": "API/HTMLInputElement/stepDown",
            "summary": "The HTMLInputElement.stepDown([n]) method decrements the value of a numeric type of  <input> element by the value of the step attribute or up to n multiples of the step attribute if a number is passed as the parameter. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16",
                    "notes": "Experimental, and without specific UI. There are still differences with the latest spec: <a href='https://bugzil.la/835773'>bug 835773</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.experimental_forms",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLInputElement.stepDown()"
        }
    ],
    "dom-input-stepup": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "stepUp",
            "slug": "API/HTMLInputElement/stepUp",
            "summary": "The HTMLInputElement.stepUp() method increments the value of a numeric type of  <input> element by the value of the step attribute, or the default step value if the step attribute is not explicitly set. The method, when invoked, increments the value by (step * n), where n defaults to 1 if not specified, and step defaults to the default value for step if not specified.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16",
                    "notes": "Experimental, and without specific UI. There are still differences with the latest spec: <a href='https://bugzil.la/835773'>bug 835773</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.experimental_forms",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLInputElement.stepUp()"
        }
    ],
    "htmlinputelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "HTMLInputElement",
            "slug": "API/HTMLInputElement",
            "summary": "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement"
        }
    ],
    "htmllielement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLIElement.json",
            "name": "HTMLLIElement",
            "slug": "API/HTMLLIElement",
            "summary": "The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Prior to Firefox 10, Gecko incorrectly reflected negative value attributes to 0."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Prior to Firefox 10, Gecko incorrectly reflected negative value attributes to 0."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLIElement"
        }
    ],
    "dom-label-control": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "control",
            "slug": "API/HTMLLabelElement/control",
            "summary": "The read-only HTMLLabelElement.control property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the <label> element is associated, or null if the label isn't associated with a control.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement.control"
        }
    ],
    "dom-label-form": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "form",
            "slug": "API/HTMLLabelElement/form",
            "summary": "The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement.form"
        }
    ],
    "dom-label-htmlfor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "htmlFor",
            "slug": "API/HTMLLabelElement/htmlFor",
            "summary": "The HTMLLabelElement.htmlFor property reflects the value of the for content property. That means that this script-accessible property is used to set and read the value of the content property for, which is the ID of the label's associated control element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement.htmlFor"
        }
    ],
    "htmllabelelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "HTMLLabelElement",
            "slug": "API/HTMLLabelElement",
            "summary": "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement"
        }
    ],
    "htmllegendelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLegendElement.json",
            "name": "HTMLLegendElement",
            "slug": "API/HTMLLegendElement",
            "summary": "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLegendElement"
        }
    ],
    "attr-link-rel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "rel",
            "slug": "API/HTMLLinkElement/rel",
            "summary": "The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <link> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLinkElement.rel"
        }
    ],
    "dom-link-rellist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "relList",
            "slug": "API/HTMLLinkElement/relList",
            "summary": "The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <link> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "30"
                },
                "firefox_android": {
                    "version_added": "30"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLinkElement.relList"
        }
    ],
    "htmllinkelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "HTMLLinkElement",
            "slug": "API/HTMLLinkElement",
            "summary": "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa (corresponds to <link> element; not to be confused with <a>, which is represented by HTMLAnchorElement). This object inherits all of the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLLinkElement"
        }
    ],
    "htmlmapelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMapElement.json",
            "name": "HTMLMapElement",
            "slug": "API/HTMLMapElement",
            "summary": "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMapElement"
        }
    ],
    "event-media-abort": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "abort_event",
            "slug": "API/HTMLMediaElement/abort_event",
            "summary": "The abort event is fired when the resource was not fully loaded, but not as the result of an error.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement: abort event"
        }
    ],
    "dom-media-audiotracks": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "audioTracks",
            "slug": "API/HTMLMediaElement/audioTracks",
            "summary": "The read-only audioTracks property on HTMLMediaElement objects returns an AudioTrackList object listing all of the  AudioTrack objects representing the media element's audio tracks.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "HTMLMediaElement.audioTracks"
        }
    ],
    "dom-media-autoplay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "autoplay",
            "slug": "API/HTMLMediaElement/autoplay",
            "summary": "The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "30"
                },
                "opera_android": {
                    "version_added": "30"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.autoplay"
        }
    ],
    "media-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "buffered",
            "slug": "API/HTMLMediaElement/buffered",
            "summary": "The HTMLMediaElement.buffered read-only property returns a new TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.buffered"
        }
    ],
    "event-media-canplay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canplay_event",
            "slug": "API/HTMLMediaElement/canplay_event",
            "summary": "The canplay event is fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: canplay event"
        }
    ],
    "event-media-canplaythrough": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canplaythrough_event",
            "slug": "API/HTMLMediaElement/canplaythrough_event",
            "summary": "The canplaythrough event is fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: canplaythrough event"
        }
    ],
    "dom-navigator-canplaytype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canPlayType",
            "slug": "API/HTMLMediaElement/canPlayType",
            "summary": "The HTMLMediaElement method canPlayType() reports how likely it is that the current browser will be able to play media of a given MIME type.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Prior to Firefox 28, <code>canPlayType()</code> returned <code>probably</code> when asked about WebM audio or video files without the <code>codecs</code> parameter. Since multiple codecs are supported, this is not enough information to determine if a file can be played, so <code>maybe</code> is now correctly returned."
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.canPlayType()"
        }
    ],
    "dom-media-controls": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "controls",
            "slug": "API/HTMLMediaElement/controls",
            "summary": "The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.controls"
        }
    ],
    "attr-media-crossorigin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "crossOrigin",
            "slug": "API/HTMLMediaElement/crossOrigin",
            "summary": "The HTMLMediaElement.crossOrigin property is the CORS setting for this image element. See CORS settings attributes for details.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "22"
                    },
                    {
                        "version_added": "12",
                        "version_removed": "22",
                        "alternative_name": "crossorigin"
                    }
                ],
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.crossOrigin"
        }
    ],
    "dom-media-currentsrc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "currentSrc",
            "slug": "API/HTMLMediaElement/currentSrc",
            "summary": "The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.currentSrc"
        }
    ],
    "dom-media-currenttime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "currentTime",
            "slug": "API/HTMLMediaElement/currentTime",
            "summary": "The HTMLMediaElement interface's currentTime property specifies the current playback time in seconds.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.currentTime"
        }
    ],
    "dom-media-defaultmuted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "defaultMuted",
            "slug": "API/HTMLMediaElement/defaultMuted",
            "summary": "The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.defaultMuted"
        }
    ],
    "dom-media-defaultplaybackrate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "defaultPlaybackRate",
            "slug": "API/HTMLMediaElement/defaultPlaybackRate",
            "summary": "The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": "20"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.defaultPlaybackRate"
        }
    ],
    "dom-media-duration": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "duration",
            "slug": "API/HTMLMediaElement/duration",
            "summary": "The read-only HTMLMediaElement property duration indicates the length of the element's media in seconds.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.duration"
        }
    ],
    "event-media-durationchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "durationchange_event",
            "slug": "API/HTMLMediaElement/durationchange_event",
            "summary": "The durationchange event is fired when the duration attribute has been updated.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: durationchange event"
        }
    ],
    "event-media-emptied": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "emptied_event",
            "slug": "API/HTMLMediaElement/emptied_event",
            "summary": "The emptied event is fired when the media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: emptied event"
        }
    ],
    "dom-media-ended": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ended",
            "slug": "API/HTMLMediaElement/ended",
            "summary": "The HTMLMediaElement.ended indicates whether the media element has ended playback.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.ended"
        }
    ],
    "event-media-ended": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ended_event",
            "slug": "API/HTMLMediaElement/ended_event",
            "summary": "The ended event is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available. ",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: ended event"
        }
    ],
    "dom-media-error": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "error",
            "slug": "API/HTMLMediaElement/error",
            "summary": "The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error. When an error event is received by the element, you can determine details about what happened by examining this object.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.error"
        }
    ],
    "event-media-error": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "error_event",
            "slug": "API/HTMLMediaElement/error_event",
            "summary": "The error event is fired when the resource could not be loaded due to an error (for example, a network connectivity problem).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement: error event"
        }
    ],
    "dom-media-fastseek": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "fastSeek",
            "slug": "API/HTMLMediaElement/fastSeek",
            "summary": "The HTMLMediaElement.fastSeek() method quickly seeks the media to the new time with precision tradeoff.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "HTMLMediaElement.fastSeek()"
        }
    ],
    "dom-media-load": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "load",
            "slug": "API/HTMLMediaElement/load",
            "summary": "The HTMLMediaElement method load() resets the media element to its initial state and begins the process of selecting a media source and loading the media in preparation for playback to begin at the beginning.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.load()"
        }
    ],
    "event-media-loadeddata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadeddata_event",
            "slug": "API/HTMLMediaElement/loadeddata_event",
            "summary": "The loadeddata event is fired when the frame at the current playback position of the media has finished loading; often the first frame. ",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadeddata event"
        }
    ],
    "event-media-loadedmetadata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadedmetadata_event",
            "slug": "API/HTMLMediaElement/loadedmetadata_event",
            "summary": "The loadedmetadata event is fired when the metadata has been loaded.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadedmetadata event"
        }
    ],
    "event-media-loadstart": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadstart_event",
            "slug": "API/HTMLMediaElement/loadstart_event",
            "summary": "The loadstart event is fired when the browser has started to load a resource.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement: loadstart event"
        }
    ],
    "dom-media-loop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loop",
            "slug": "API/HTMLMediaElement/loop",
            "summary": "The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.loop"
        }
    ],
    "dom-media-muted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "muted",
            "slug": "API/HTMLMediaElement/muted",
            "summary": "The HTMLMediaElement.muted indicates whether the media element muted.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.muted"
        }
    ],
    "dom-media-networkstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "networkState",
            "slug": "API/HTMLMediaElement/networkState",
            "summary": "The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "The <code>NETWORK_LOADED</code> state was removed to align with the HTML spec in Firefox 4."
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.networkState"
        }
    ],
    "dom-media-pause": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "pause",
            "slug": "API/HTMLMediaElement/pause",
            "summary": "The HTMLMediaElement.pause() method will pause playback of the media, if the media is already in a paused state this method will have no effect.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.pause()"
        }
    ],
    "event-media-pause": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "pause_event",
            "slug": "API/HTMLMediaElement/pause_event",
            "summary": "The pause event is sent when a request to pause an activity is handled and the activity has entered its paused state, most commonly after the media has been paused through a call to the element's pause() method.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: pause event"
        }
    ],
    "dom-media-paused": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "paused",
            "slug": "API/HTMLMediaElement/paused",
            "summary": "The read-only HTMLMediaElement.paused property tells whether the media element is paused.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.paused"
        }
    ],
    "dom-media-play": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "play",
            "slug": "API/HTMLMediaElement/play",
            "summary": "The HTMLMediaElement play() method attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.play()"
        }
    ],
    "event-media-play": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "play_event",
            "slug": "API/HTMLMediaElement/play_event",
            "summary": "The play event is fired when the paused property is changed from true to false, as a result of the play method, or the autoplay attribute.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: play event"
        }
    ],
    "dom-media-playbackrate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "playbackRate",
            "slug": "API/HTMLMediaElement/playbackRate",
            "summary": "The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": "20"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.playbackRate"
        }
    ],
    "event-media-playing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "playing_event",
            "slug": "API/HTMLMediaElement/playing_event",
            "summary": "The playing event is fired when playback is ready to start after having been paused or delayed due to lack of data.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: playing event"
        }
    ],
    "event-media-progress": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "progress_event",
            "slug": "API/HTMLMediaElement/progress_event",
            "summary": "The progress event is fired periodically as the browser loads a resource.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement: progress event"
        }
    ],
    "event-media-ratechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ratechange_event",
            "slug": "API/HTMLMediaElement/ratechange_event",
            "summary": "The ratechange event is fired when the playback rate has changed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: ratechange event"
        }
    ],
    "dom-media-readystate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "readyState",
            "slug": "API/HTMLMediaElement/readyState",
            "summary": "The HTMLMediaElement.readyState property indicates the readiness state of the media.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.readyState"
        }
    ],
    "dom-media-seekable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seekable",
            "slug": "API/HTMLMediaElement/seekable",
            "summary": "The seekable read-only property of the HTMLMediaElement returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.seekable"
        }
    ],
    "event-media-seeked": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seeked_event",
            "slug": "API/HTMLMediaElement/seeked_event",
            "summary": "The seeked event is fired when a seek operation completed, the current playback position has changed, and the Boolean seeking attribute is changed to false.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: seeked event"
        }
    ],
    "event-media-seeking": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seeking_event",
            "slug": "API/HTMLMediaElement/seeking_event",
            "summary": "The seeking event is fired when a seek operation starts, meaning the Boolean seeking attribute has changed to true and the media is seeking a new position.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: seeking event"
        }
    ],
    "dom-media-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "src",
            "slug": "API/HTMLMediaElement/src",
            "summary": "The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.src"
        }
    ],
    "dom-media-srcobject": [
        {
            "engines": [
                "webkit"
            ],
            "partial": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "srcObject",
            "slug": "API/HTMLMediaElement/srcObject",
            "summary": "The srcObject property of the HTMLMediaElement interface sets or returns the object which serves as the source of the media associated with the HTMLMediaElement.",
            "support": {
                "chrome": {
                    "version_added": "52",
                    "partial_implementation": true,
                    "notes": "Currently only supports <code>MediaStream</code> objects."
                },
                "chrome_android": {
                    "version_added": "52",
                    "partial_implementation": true,
                    "notes": "Currently only supports <code>MediaStream</code> objects."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "42",
                        "partial_implementation": true,
                        "notes": "Currently only supports <code>MediaStream</code> objects."
                    },
                    {
                        "version_added": "18",
                        "version_removed": "58",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "42",
                        "partial_implementation": true,
                        "notes": "Currently only supports <code>MediaStream</code> objects."
                    },
                    {
                        "version_added": "18",
                        "version_removed": "58",
                        "prefix": "moz"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39",
                    "partial_implementation": true,
                    "notes": "Currently only supports <code>MediaStream</code> objects."
                },
                "opera_android": {
                    "version_added": "41",
                    "partial_implementation": true,
                    "notes": "Currently only supports <code>MediaStream</code> objects."
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "partial_implementation": true,
                    "version_added": "6.0",
                    "notes": "Currently only supports <code>MediaStream</code> objects."
                },
                "webview_android": {
                    "version_added": "52",
                    "partial_implementation": true,
                    "notes": "Currently only supports <code>MediaStream</code> objects."
                },
                "edge_blink": {
                    "version_added": "79",
                    "partial_implementation": true,
                    "notes": "Currently only supports <code>MediaStream</code> objects."
                }
            },
            "title": "HTMLMediaElement.srcObject"
        }
    ],
    "event-media-stalled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "stalled_event",
            "slug": "API/HTMLMediaElement/stalled_event",
            "summary": "The stalled event is fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: stalled event"
        }
    ],
    "event-media-suspend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "suspend_event",
            "slug": "API/HTMLMediaElement/suspend_event",
            "summary": "The suspend event is fired when media data loading has been suspended.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: suspend event"
        }
    ],
    "dom-media-texttracks": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "textTracks",
            "slug": "API/HTMLMediaElement/textTracks",
            "summary": "The read-only textTracks property on HTMLMediaElement objects returns a TextTrackList object listing all of the TextTrack objects representing the media element's text tracks",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMedia​Element​.textTracks"
        }
    ],
    "event-media-timeupdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "timeupdate_event",
            "slug": "API/HTMLMediaElement/timeupdate_event",
            "summary": "The timeupdate event is fired when the time indicated by the currentTime attribute has been updated.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: timeupdate event"
        }
    ],
    "dom-media-videotracks": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "videoTracks",
            "slug": "API/HTMLMediaElement/videoTracks",
            "summary": "The read-only videoTracks property on HTMLMediaElement objects returns a VideoTrackList object listing all of the VideoTrack objects representing the media element's video tracks.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "HTMLMediaElement.videoTracks"
        }
    ],
    "dom-media-volume": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "volume",
            "slug": "API/HTMLMediaElement/volume",
            "summary": "The HTMLMediaElement.volume property sets the volume at which the media will be played.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement.volume"
        }
    ],
    "event-media-volumechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "volumechange_event",
            "slug": "API/HTMLMediaElement/volumechange_event",
            "summary": "The volumechange event is fired when the volume has changed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement: volumechange event"
        }
    ],
    "event-media-waiting": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "waiting_event",
            "slug": "API/HTMLMediaElement/waiting_event",
            "summary": "The waiting event is fired when playback has stopped because of a temporary lack of data.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement: waiting event"
        }
    ],
    "htmlmediaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "HTMLMediaElement",
            "slug": "API/HTMLMediaElement",
            "summary": "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement"
        }
    ],
    "htmlmenuelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMenuElement.json",
            "name": "HTMLMenuElement",
            "slug": "API/HTMLMenuElement",
            "summary": "The HTMLMenuElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating <menu> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMenuElement"
        }
    ],
    "htmlmetaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMetaElement.json",
            "name": "HTMLMetaElement",
            "slug": "API/HTMLMetaElement",
            "summary": "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLMetaElement"
        }
    ],
    "htmlmeterelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMeterElement.json",
            "name": "HTMLMeterElement",
            "slug": "API/HTMLMeterElement",
            "summary": "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMeterElement"
        }
    ],
    "htmlmodelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLModElement.json",
            "name": "HTMLModElement",
            "slug": "API/HTMLModElement",
            "summary": "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLModElement"
        }
    ],
    "htmlolistelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOListElement.json",
            "name": "HTMLOListElement",
            "slug": "API/HTMLOListElement",
            "summary": "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLOListElement"
        }
    ],
    "dom-cva-checkvalidity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "checkValidity",
            "slug": "API/HTMLObjectElement/checkValidity",
            "summary": "The checkValidity() method of the HTMLObjectElement interface returns a Boolean that always is true, because object objects are never candidates for constraint validation.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": "46"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.checkValidity"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "checkValidity",
            "slug": "API/HTMLSelectElement/checkValidity",
            "summary": "The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement.checkValidity()"
        }
    ],
    "dom-object-contentwindow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "contentDocument",
            "slug": "API/HTMLObjectElement/contentDocument",
            "summary": "The contentDocument read-only property of the HTMLObjectElement interface Returns a Document representing the active document of the object element's nested browsing context, if any; otherwise null.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.contentDocument"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "contentWindow",
            "slug": "API/HTMLObjectElement/contentWindow",
            "summary": "The contentWindow read-only property of the HTMLObjectElement interface returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise null.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.contentWindow"
        }
    ],
    "dom-object-data": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "data",
            "slug": "API/HTMLObjectElement/data",
            "summary": "The data property of the HTMLObjectElement interface returns a DOMString that reflects the data HTML attribute, specifying the address of a resource's data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.data"
        }
    ],
    "dom-fae-form": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "form",
            "slug": "API/HTMLObjectElement/form",
            "summary": "The form read-only property of the HTMLObjectElement interface Retuns a HTMLFormElement representing the object element's form owner, or null if there isn't one.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": "46"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.form"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "form",
            "slug": "API/HTMLSelectElement/form",
            "summary": "The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with of a <form> element, then it returns null.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.form"
        }
    ],
    "dom-dim-height": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "height",
            "slug": "API/HTMLObjectElement/height",
            "summary": "The height property of the HTMLObjectElement interface Returns a DOMString that reflects the height HTML attribute, specifying the displayed height of the resource in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.height"
        }
    ],
    "dom-object-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "name",
            "slug": "API/HTMLObjectElement/name",
            "summary": "The name property of the HTMLObjectElement interface returns a DOMString that reflects the name HTML attribute, specifying the name of the browsing context.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.name"
        }
    ],
    "dom-cva-setcustomvalidity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "setCustomValidity",
            "slug": "API/HTMLObjectElement/setCustomValidity",
            "summary": "The setCustomValidity() method of the HTMLObjectElement interface sets a custom validity message for the element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLObjectElement.setCustomValidity"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "setCustomValidity",
            "slug": "API/HTMLSelectElement/setCustomValidity",
            "summary": "The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.setCustomValidity()"
        }
    ],
    "dom-object-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "type",
            "slug": "API/HTMLObjectElement/type",
            "summary": "The type property of the HTMLObjectElement interface returns a DOMString that reflects the type HTML attribute, specifying the MIME type of the resource.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.type"
        }
    ],
    "dom-object-usemap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "useMap",
            "slug": "API/HTMLObjectElement/useMap",
            "summary": "The useMap property of the HTMLObjectElement interface returns a DOMString that reflects the usemap HTML attribute, specifying a <map> element to use.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.useMap"
        }
    ],
    "dom-cva-validationmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "validationMessage",
            "slug": "API/HTMLObjectElement/validationMessage",
            "summary": "The validationMessage read-only property of the HTMLObjectElement interface returns a DOMString representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": "46"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.validationMessage"
        }
    ],
    "dom-cva-validity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "validity",
            "slug": "API/HTMLObjectElement/validity",
            "summary": "The validity read-only property of the HTMLObjectElement interface returns a ValidityState with the validity states that this element is in.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": "46"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.validity"
        }
    ],
    "dom-dim-width": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "width",
            "slug": "API/HTMLObjectElement/width",
            "summary": "The width property of the HTMLObjectElement interface returns a DOMString that reflects the width HTML attribute, specifying the displayed width of the resource in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.width"
        }
    ],
    "dom-cva-willvalidate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "willValidate",
            "slug": "API/HTMLObjectElement/willValidate",
            "summary": "The willValidate read-only property of the HTMLObjectElement interface returns a Boolean that indicates whether the element is a candidate for constraint validation. Always false for HTMLObjectElement objects.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": "46"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement.willValidate"
        }
    ],
    "htmlobjectelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "HTMLObjectElement",
            "slug": "API/HTMLObjectElement",
            "summary": "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement"
        }
    ],
    "htmloptgroupelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOptGroupElement.json",
            "name": "HTMLOptGroupElement",
            "slug": "API/HTMLOptGroupElement",
            "summary": "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLOptGroupElement"
        }
    ],
    "htmloptionelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOptionElement.json",
            "name": "HTMLOptionElement",
            "slug": "API/HTMLOptionElement",
            "summary": "The HTMLOptionElement interface represents <option> elements and inherits all classes and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLOptionElement"
        }
    ],
    "the-htmloptionscollection-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOptionsCollection.json",
            "name": "HTMLOptionsCollection",
            "slug": "API/HTMLOptionsCollection",
            "summary": "This interface inherits the methods of its parent, HTMLCollection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLOptionsCollection"
        }
    ],
    "htmloutputelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOutputElement.json",
            "name": "HTMLOutputElement",
            "slug": "API/HTMLOutputElement",
            "summary": "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLOutputElement"
        }
    ],
    "htmlparagraphelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLParagraphElement.json",
            "name": "HTMLParagraphElement",
            "slug": "API/HTMLParagraphElement",
            "summary": "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLParagraphElement"
        }
    ],
    "htmlparamelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLParamElement.json",
            "name": "HTMLParamElement",
            "slug": "API/HTMLParamElement",
            "summary": "The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <param> elements, representing a pair of a key and a value that acts as a parameter for an <object> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLParamElement"
        }
    ],
    "htmlpictureelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLPictureElement.json",
            "name": "HTMLPictureElement",
            "slug": "API/HTMLPictureElement",
            "summary": "The HTMLPictureElement interface represents a <picture> HTML element. It doesn't implement specific properties or methods.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": {
                    "version_added": "38"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.image.picture.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.image.picture.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "25"
                },
                "opera_android": {
                    "version_added": "25"
                },
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "38"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLPictureElement"
        }
    ],
    "htmlpreelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLPreElement.json",
            "name": "HTMLPreElement",
            "slug": "API/HTMLPreElement",
            "summary": "The HTMLPreElement interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLPreElement"
        }
    ],
    "htmlprogresselement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLProgressElement.json",
            "name": "HTMLProgressElement",
            "slug": "API/HTMLProgressElement",
            "summary": "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLProgressElement"
        }
    ],
    "htmlquoteelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLQuoteElement.json",
            "name": "HTMLQuoteElement",
            "slug": "API/HTMLQuoteElement",
            "summary": "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLQuoteElement"
        }
    ],
    "dom-script-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLScriptElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLScriptElement/referrerPolicy",
            "summary": "The referrerPolicy property of the HTMLScriptElement interface reflects the HTML referrerpolicy of the <script> element and fetches made by that script, defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": {
                    "version_added": "70"
                },
                "chrome_android": {
                    "version_added": "70"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "65"
                },
                "firefox_android": {
                    "version_added": "65"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": {
                    "version_added": "14"
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": "70"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLScriptElement.referrerPolicy"
        }
    ],
    "htmlscriptelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLScriptElement.json",
            "name": "HTMLScriptElement",
            "slug": "API/HTMLScriptElement",
            "summary": "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLScriptElement"
        }
    ],
    "dom-select-add": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "add",
            "slug": "API/HTMLSelectElement/add",
            "summary": "The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.add()"
        }
    ],
    "dom-fe-autofocus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "autofocus",
            "slug": "API/HTMLSelectElement/autofocus",
            "summary": "The HTMLSelectElement.autofocus property is a Boolean that reflects the autofocus HTML attribute, which indicates whether the associated <select> element  will get input focus when the page loads, unless the user overrides it.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.autofocus"
        }
    ],
    "dom-fe-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "disabled",
            "slug": "API/HTMLSelectElement/disabled",
            "summary": "The HTMLSelectElement.disabled is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.disabled"
        }
    ],
    "dom-select-item": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "item",
            "slug": "API/HTMLSelectElement/item",
            "summary": "The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in the parameter, or null if there are none.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.item()"
        }
    ],
    "dom-select-nameditem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "namedItem",
            "slug": "API/HTMLSelectElement/namedItem",
            "summary": "The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true,
                    "notes": "<code>namedItem</code> does not appear to take the <code>name</code> attribute into account (only the <code>id</code> attribute) on Internet Explorer and Edge. There is a <a href='https://connect.microsoft.com/IE/feedbackdetail/view/2414092/'>bug report</a> to Microsoft about this."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.namedItem()"
        }
    ],
    "dom-select-options": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "options",
            "slug": "API/HTMLSelectElement/options",
            "summary": "The HTMLSelectElement.options read-only property returns a HTMLOptionsCollection of the <option> elements contained by the <select> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.options"
        }
    ],
    "dom-select-remove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "remove",
            "slug": "API/HTMLSelectElement/remove",
            "summary": "The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.remove()"
        }
    ],
    "dom-select-selectedindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "selectedIndex",
            "slug": "API/HTMLSelectElement/selectedIndex",
            "summary": "The HTMLSelectElement.selectedIndex is a long that reflects the index of the first or last selected <option> element, depending on the value of multiple. The value -1 indicates that no element is selected.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.selectedIndex"
        }
    ],
    "dom-select-selectedoptions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "selectedOptions",
            "slug": "API/HTMLSelectElement/selectedOptions",
            "summary": "The read-only HTMLSelectElement property selectedOptions contains a list of the <option> elements contained within the <select> element that are currently selected. The list of selected options is an HTMLCollection object with one entry per currently selected option.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement.selectedOptions"
        }
    ],
    "dom-select-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "type",
            "slug": "API/HTMLSelectElement/type",
            "summary": "The HTMLSelectElement.type read-only property returns the form control's type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "1"
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement.type"
        }
    ],
    "htmlselectelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "HTMLSelectElement",
            "slug": "API/HTMLSelectElement",
            "summary": "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2",
                    "notes": "You should watch for <a href='https://developer.mozilla.org/docs/Web/Events/change'>change</a> events on <a href='https://developer.mozilla.org/docs/Web/HTML/Element/select'><code>&lt;select&gt;</code></a> instead of watching <code>&lt;option&gt;</code> elements for events. See <a href='https://bugzil.la/1090602'>bug 1090602</a> and <a href='https://developer.mozilla.org/docs/Mozilla/Firefox/Multiprocess_Firefox/Web_content_compatibility'>Multiprocess Firefox Web content compatibility</a> for details."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "1"
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement"
        }
    ],
    "dom-slot-assignedelements": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "assignedElements",
            "slug": "API/HTMLSlotElement/assignedElements",
            "summary": "The assignedElements() property of the HTMLSlotElement interface returns a sequence of the elements assigned to this slot (and no other nodes). If the flatten option is set to true, it also returns the assigned elements of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": {
                    "version_added": "65"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "66"
                },
                "firefox_android": {
                    "version_added": "66"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "65"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement.assignedElements()"
        }
    ],
    "dom-slot-assignednodes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "assignedNodes",
            "slug": "API/HTMLSlotElement/assignedNodes",
            "summary": "The assignedNodes() property of the HTMLSlotElement interface returns a sequence of the nodes assigned to this slot, and if the flatten option is set to true, the assigned nodes of any other slots that are descendants of this slot. If no assigned nodes are found, it returns the slot's fallback content.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement.assignedNodes()"
        }
    ],
    "dom-slot-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "name",
            "slug": "API/HTMLSlotElement/name",
            "summary": "The name property of the HTMLSlotElement interface returns or sets the slot name. A slot is a placeholder inside a web component that users can fill with their own markup.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement.name"
        }
    ],
    "htmlslotelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "HTMLSlotElement",
            "slug": "API/HTMLSlotElement",
            "summary": "Fired on an HTMLSlotElement instance (<slot> element) when the node(s) contained in that slot change.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement"
        }
    ],
    "htmlsourceelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSourceElement.json",
            "name": "HTMLSourceElement",
            "slug": "API/HTMLSourceElement",
            "summary": "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSourceElement"
        }
    ],
    "htmlspanelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSpanElement.json",
            "name": "HTMLSpanElement",
            "slug": "API/HTMLSpanElement",
            "summary": "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLSpanElement"
        }
    ],
    "attr-style-media": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLStyleElement.json",
            "name": "media",
            "slug": "API/HTMLStyleElement/media",
            "summary": "The HTMLStyleElement.media property specifies the intended destination medium for style information.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLStyleElement.media"
        }
    ],
    "htmlstyleelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLStyleElement.json",
            "name": "HTMLStyleElement",
            "slug": "API/HTMLStyleElement",
            "summary": "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLStyleElement"
        }
    ],
    "htmltablecaptionelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableCaptionElement.json",
            "name": "HTMLTableCaptionElement",
            "slug": "API/HTMLTableCaptionElement",
            "summary": "The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableCaptionElement"
        }
    ],
    "htmltablecellelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableCellElement.json",
            "name": "HTMLTableCellElement",
            "slug": "API/HTMLTableCellElement",
            "summary": "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableCellElement"
        }
    ],
    "htmltablecolelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableColElement.json",
            "name": "HTMLTableColElement",
            "slug": "API/HTMLTableColElement",
            "summary": "The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableColElement"
        }
    ],
    "dom-table-caption": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "caption",
            "slug": "API/HTMLTableElement/caption",
            "summary": "The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, this property is null.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.caption"
        }
    ],
    "dom-table-createcaption": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "createCaption",
            "slug": "API/HTMLTableElement/createCaption",
            "summary": "The HTMLTableElement.createCaption() method returns the <caption> element associated with a given <table>. If no <caption> element exists on the table, this method creates it, and then returns it.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.createCaption()"
        }
    ],
    "dom-table-createtfoot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "createTFoot",
            "slug": "API/HTMLTableElement/createTFoot",
            "summary": "The HTMLTableElement.createTFoot() method returns the <tfoot> element associated with a given <table>. If no footer exists in the table, this methods creates it, and then returns it.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.createTFoot()"
        }
    ],
    "dom-table-createthead": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "createTHead",
            "slug": "API/HTMLTableElement/createTHead",
            "summary": "The HTMLTableElement.createTHead() method returns the <thead> element associated with a given <table>. If no header exists in the table, this method creates it, and then returns it.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.createTHead()"
        }
    ],
    "dom-table-deletecaption": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteCaption",
            "slug": "API/HTMLTableElement/deleteCaption",
            "summary": "The HTMLTableElement.deleteCaption() method removes the <caption> element from a given <table>. If there is no <caption> element associated with the table, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.deleteCaption()"
        }
    ],
    "dom-table-deleterow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteRow",
            "slug": "API/HTMLTableElement/deleteRow",
            "summary": "The HTMLTableElement.deleteRow() method removes a specific row (<tr>) from a given <table>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.deleteRow()"
        }
    ],
    "dom-table-deletetfoot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteTFoot",
            "slug": "API/HTMLTableElement/deleteTFoot",
            "summary": "The HTMLTableElement.deleteTFoot() method removes the <tfoot> element from a given <table>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.deleteTFoot()"
        }
    ],
    "dom-table-deletethead": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteTHead",
            "slug": "API/HTMLTableElement/deleteTHead",
            "summary": "The HTMLTableElement.deleteTHead() removes the <thead> element from a given <table>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.deleteTHead()"
        }
    ],
    "dom-table-insertrow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "insertRow",
            "slug": "API/HTMLTableElement/insertRow",
            "summary": "The HTMLTableElement.insertRow() method inserts a new row (<tr>) in a given <table>, and returns a reference to the new row.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3",
                    "notes": "Starting with Firefox 20, the index argument has been made optional and defaults to -1 as per HTML specification."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Starting with Firefox 20, the index argument has been made optional and defaults to -1 as per HTML specification."
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement.insertRow()"
        }
    ],
    "dom-table-rows": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "rows",
            "slug": "API/HTMLTableElement/rows",
            "summary": "The read-only HTMLTableElement property rows returns a live HTMLCollection of all the rows in the table, including the rows contained within any <thead>, <tfoot>, and <tbody> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.rows"
        }
    ],
    "dom-table-tbodies": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "tBodies",
            "slug": "API/HTMLTableElement/tBodies",
            "summary": "The HTMLTableElement.tBodies read-only property returns a live HTMLCollection of the bodies in a <table>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.tBodies"
        }
    ],
    "dom-table-tfoot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "tFoot",
            "slug": "API/HTMLTableElement/tFoot",
            "summary": "The HTMLTableElement.tFoot property represents the <tfoot> element of a <table>. Its value will be null if there is no such element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.tFoot"
        }
    ],
    "dom-table-thead": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "tHead",
            "slug": "API/HTMLTableElement/tHead",
            "summary": "The HTMLTableElement.tHead represents the <thead> element of a <table> . Its value will be null if there is no such element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.tHead"
        }
    ],
    "htmltableelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "HTMLTableElement",
            "slug": "API/HTMLTableElement",
            "summary": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement"
        }
    ],
    "dom-tr-insertcell": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableRowElement.json",
            "name": "insertCell",
            "slug": "API/HTMLTableRowElement/insertCell",
            "summary": "The HTMLTableRowElement.insertCell() method inserts a new cell (<td>) into a table row (<tr>) and returns a reference to the cell.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableRowElement.insertCell()"
        }
    ],
    "htmltablerowelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableRowElement.json",
            "name": "HTMLTableRowElement",
            "slug": "API/HTMLTableRowElement",
            "summary": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableRowElement"
        }
    ],
    "htmltablesectionelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableSectionElement.json",
            "name": "HTMLTableSectionElement",
            "slug": "API/HTMLTableSectionElement",
            "summary": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTableSectionElement"
        }
    ],
    "dom-template-content": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTemplateElement.json",
            "name": "content",
            "slug": "API/HTMLTemplateElement/content",
            "summary": "The HTMLTemplateElement.content property returns a <template> element's template contents (a DocumentFragment).",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTemplateElement.content"
        }
    ],
    "htmltemplateelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTemplateElement.json",
            "name": "HTMLTemplateElement",
            "slug": "API/HTMLTemplateElement",
            "summary": "The HTMLTemplateElement interface enables access to the contents of an HTML <template> element.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTemplateElement"
        }
    ],
    "htmltextareaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTextAreaElement.json",
            "name": "HTMLTextAreaElement",
            "slug": "API/HTMLTextAreaElement",
            "summary": "The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of <textarea> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTextAreaElement"
        }
    ],
    "dom-time-datetime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTimeElement.json",
            "name": "dateTime",
            "slug": "API/HTMLTimeElement/dateTime",
            "summary": "The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "62"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTimeElement.dateTime"
        }
    ],
    "htmltimeelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTimeElement.json",
            "name": "HTMLTimeElement",
            "slug": "API/HTMLTimeElement",
            "summary": "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "62"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTimeElement"
        }
    ],
    "htmltitleelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTitleElement.json",
            "name": "HTMLTitleElement",
            "slug": "API/HTMLTitleElement",
            "summary": "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTitleElement"
        }
    ],
    "event-media-cuechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTrackElement.json",
            "name": "cuechange_event",
            "slug": "API/HTMLTrackElement/cuechange_event",
            "summary": "The cuechange event fires when a TextTrack has changed the currently displaying cues.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": {
                    "version_added": "68"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLTrackElement: cuechange event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "cuechange_event",
            "slug": "API/TextTrack/cuechange_event",
            "summary": "The cuechange event fires when a TextTrack has changed the currently displaying cues.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TextTrack: cuechange event"
        }
    ],
    "dom-track-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTrackElement.json",
            "name": "src",
            "slug": "API/HTMLTrackElement/src",
            "summary": "The HTMLTrackElement.src property reflects the value of the <track> element's src attribute, which indicates the URL of the text track's data.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "31",
                        "notes": "Setting the <code>src</code> property did not work properly in versions prior to 50."
                    },
                    {
                        "version_added": "24",
                        "version_removed": "30",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "media.webvtt.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "31",
                        "notes": "Setting the <code>src</code> property did not work properly in versions prior to 50."
                    },
                    {
                        "version_added": "24",
                        "version_removed": "30",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "media.webvtt.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTrackElement.src"
        }
    ],
    "htmltrackelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTrackElement.json",
            "name": "HTMLTrackElement",
            "slug": "API/HTMLTrackElement",
            "summary": "The HTMLTrackElement interface represents an HTML <track> element within the DOM. This element can be used as a child of either <audio> or <video> to specify a text track containing information such as closed captions or subtitles.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "31",
                        "notes": "Prior to Firefox 50, text tracks would only load if the <track> element is in a document."
                    },
                    {
                        "version_added": "24",
                        "version_removed": "30",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "media.webvtt.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "31",
                        "notes": "Prior to Firefox 50, text tracks would only load if the <track> element is in a document."
                    },
                    {
                        "version_added": "24",
                        "version_removed": "30",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "media.webvtt.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTrackElement"
        }
    ],
    "htmlulistelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLUListElement.json",
            "name": "HTMLUListElement",
            "slug": "API/HTMLUListElement",
            "summary": "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLUListElement"
        }
    ],
    "htmlunknownelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLUnknownElement.json",
            "name": "HTMLUnknownElement",
            "slug": "API/HTMLUnknownElement",
            "summary": "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLUnknownElement"
        }
    ],
    "dom-video-videoheight": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLVideoElement.json",
            "name": "videoHeight",
            "slug": "API/HTMLVideoElement/videoHeight",
            "summary": "The HTMLVideoElement interface's read-only videoHeight property indicates the intrinsic height of the video, expressed in CSS pixels. In simple terms, this is the height of the media in its natural size.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLVideoElement.videoHeight"
        }
    ],
    "dom-video-videowidth": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLVideoElement.json",
            "name": "videoWidth",
            "slug": "API/HTMLVideoElement/videoWidth",
            "summary": "The HTMLVideoElement interface's read-only videoWidth property indicates the intrinsic width of the video, expressed in CSS pixels. In simple terms, this is the width of the media in its natural size.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLVideoElement.videoWidth"
        }
    ],
    "htmlvideoelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLVideoElement.json",
            "name": "HTMLVideoElement",
            "slug": "API/HTMLVideoElement",
            "summary": "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTMLVideoElement"
        }
    ],
    "dom-hashchangeevent-newurl": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HashChangeEvent.json",
            "name": "newURL",
            "slug": "API/HashChangeEvent/newURL",
            "summary": "The newURL read-only property of the HashChangeEvent interface returns the new URL to which the window is navigating.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HashChangeEvent.newURL"
        }
    ],
    "dom-hashchangeevent-oldurl": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HashChangeEvent.json",
            "name": "oldURL",
            "slug": "API/HashChangeEvent/oldURL",
            "summary": "The oldURL read-only property of the HashChangeEvent interface returns the previous URL from which the window was navigated.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HashChangeEvent.oldURL"
        }
    ],
    "the-hashchangeevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HashChangeEvent.json",
            "name": "HashChangeEvent",
            "slug": "API/HashChangeEvent",
            "summary": "The HashChangeEvent interface represents events that fire when the fragment identifier of the URL has changed.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "hashchange",
                "title": "Hashchange event"
            },
            "title": "HashChangeEvent"
        }
    ],
    "history": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "back",
            "slug": "API/History/back",
            "summary": "The History.back() method causes the browser to move back one page in the session history.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "History.back()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "forward",
            "slug": "API/History/forward",
            "summary": "The History.forward() method causes the browser to move forward one page in the session history. It has the same effect as calling history.go(1).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "History.forward()"
        }
    ],
    "dom-history-go": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "go",
            "slug": "API/History/go",
            "summary": "The History.go() method loads a specific page from the session history. You can use it to move forwards and backwards through the history depending on the value of a parameter.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "History.go()"
        }
    ],
    "dom-history-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "length",
            "slug": "API/History/length",
            "summary": "The History.length read-only property returns an integer representing the number of elements in the session history, including the currently loaded page.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "History.length"
        }
    ],
    "dom-history-pushstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "pushState",
            "slug": "API/History/pushState",
            "summary": "In an HTML document, the history.pushState() method adds an entry to the browser's session history stack.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Until Firefox 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using <a href='https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm'>the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Until Firefox 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using <a href='https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm'>the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed."
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "history",
                "title": "Session history management"
            },
            "title": "History.pushState()"
        }
    ],
    "dom-history-replacestate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "replaceState",
            "slug": "API/History/replaceState",
            "summary": "The History.replaceState() method modifies the current history entry, replacing it with the stateObj, title, and URL passed in the method parameters. This method is particularly useful when you want to update the state object or URL of the current history entry in response to some user action.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Until Firefox 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using <a href='https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm'>the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Until Firefox 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using <a href='https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm'>the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed."
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History.replaceState()"
        }
    ],
    "scroll-restoration-mode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "scrollRestoration",
            "slug": "API/History/scrollRestoration",
            "summary": "The scrollRestoration property of History interface allows web applications to explicitly set default scroll restoration behavior on history navigation.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": "46"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "33"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History.scrollRestoration"
        }
    ],
    "the-history-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "History",
            "slug": "API/History",
            "summary": "The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "history",
            "slug": "API/Window/history",
            "summary": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.history"
        }
    ],
    "dom-imagebitmap-close": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "close",
            "slug": "API/ImageBitmap/close",
            "summary": "The ImageBitmap.close() method disposes of all graphical resources associated with an ImageBitmap.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": {
                    "version_added": "46"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap.close()"
        }
    ],
    "dom-imagebitmap-height": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "height",
            "slug": "API/ImageBitmap/height",
            "summary": "The read-only ImageBitmap.height property returns the ImageBitmap object's height in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": {
                    "version_added": "42"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap.height"
        }
    ],
    "dom-imagebitmap-width": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "width",
            "slug": "API/ImageBitmap/width",
            "summary": "The read-only ImageBitmap.width property returns the ImageBitmap object's width in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": {
                    "version_added": "42"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap.width"
        }
    ],
    "imagebitmap": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "ImageBitmap",
            "slug": "API/ImageBitmap",
            "summary": "The ImageBitmap interface represents a bitmap image which can be drawn to a <canvas> without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": {
                    "version_added": "42"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap"
        }
    ],
    "dom-imagebitmaprenderingcontext-transferfromimagebitmap": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ImageBitmapRenderingContext.json",
            "name": "transferFromImageBitmap",
            "slug": "API/ImageBitmapRenderingContext/transferFromImageBitmap",
            "summary": "The ImageBitmapRenderingContext.transferFromImageBitmap() method displays the given ImageBitmap in the canvas associated with this rendering context. The ownership of the ImageBitmap is transferred to the canvas as well.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "52"
                    },
                    {
                        "version_added": "46",
                        "version_removed": "52",
                        "alternative_name": "transferImageBitmap"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "52"
                    },
                    {
                        "version_added": "46",
                        "version_removed": "52",
                        "alternative_name": "transferImageBitmap"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmapRenderingContext.transferFromImageBitmap()"
        }
    ],
    "the-imagebitmaprenderingcontext-interface": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ImageBitmapRenderingContext.json",
            "name": "ImageBitmapRenderingContext",
            "slug": "API/ImageBitmapRenderingContext",
            "summary": "The ImageBitmapRenderingContext interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap. Its context id (the first argument to HTMLCanvasElement.getContext() or OffscreenCanvas.getContext()) is \"bitmaprenderer\".",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": {
                    "version_added": "46"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmapRenderingContext"
        }
    ],
    "dom-imagedata": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/ImageData.json",
            "name": "ImageData",
            "slug": "API/ImageData/ImageData",
            "summary": "The ImageData() constructor returns a newly instantiated ImageData object built from the typed array given and having the specified width and height.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "42"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "29"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageData()"
        }
    ],
    "dom-imagedata-data": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "data",
            "slug": "API/ImageData/data",
            "summary": "The readonly ImageData.data property returns a Uint8ClampedArray that contains the ImageData object's pixel data. Data is stored as a one-dimensional array in the RGBA order, with integer values between 0 and 255 (inclusive).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "ImageData.data"
        }
    ],
    "dom-imagedata-height": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "height",
            "slug": "API/ImageData/height",
            "summary": "The readonly ImageData.height property returns the number of rows in the ImageData object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "ImageData.height"
        }
    ],
    "dom-imagedata-width": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "width",
            "slug": "API/ImageData/width",
            "summary": "The readonly ImageData.width property returns the number of pixels per row in the ImageData object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "ImageData.width"
        }
    ],
    "imagedata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "ImageData",
            "slug": "API/ImageData",
            "summary": "The ImageData interface represents the underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageData"
        }
    ],
    "dom-location-ancestororigins": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "ancestorOrigins",
            "slug": "API/Location/ancestorOrigins",
            "summary": "The ancestorOrigins read-only property of the Location interface is a static DOMStringList containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given Location object.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Location: ancestorOrigins"
        }
    ],
    "dom-location-assign": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "assign",
            "slug": "API/Location/assign",
            "summary": "The Location.assign() method causes the window to load and display the document at the URL specified. After the navigation occurs, the user can navigate back to the page that called Location.assign() by pressing the \"back\" button.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Location: assign()"
        }
    ],
    "dom-location-hash": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "hash",
            "slug": "API/Location/hash",
            "summary": "The hash property of the Location interface returns a USVString containing a '#' followed by the fragment identifier of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: hash"
        }
    ],
    "dom-location-host": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "host",
            "slug": "API/Location/host",
            "summary": "The host property of the Location interface is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: host"
        }
    ],
    "dom-location-hostname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "hostname",
            "slug": "API/Location/hostname",
            "summary": "The hostname property of the Location interface is a USVString containing the domain of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: hostname"
        }
    ],
    "dom-location-href": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "href",
            "slug": "API/Location/href",
            "summary": "The href property of the Location interface is a stringifier that returns a USVString containing the whole URL, and allows the href to be updated.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: href"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Location.json",
            "name": "toString",
            "slug": "API/Location/toString",
            "summary": "The toString() stringifier method of the Location interface returns a USVString containing the whole URL. It is a read-only version of Location.href.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": "11",
                    "notes": "Intranet sites are set to Compatibility View, which will emulate IE7 and omit <code>window.location.toString</code>."
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Location: toString()"
        }
    ],
    "dom-location-origin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "origin",
            "slug": "API/Location/origin",
            "summary": "The origin read-only property of the Location interface is a USVString containing the Unicode serialization of the origin of the represented URL",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26",
                    "notes": "Before Firefox 49, results for URL using the blob scheme incorrectly returned null."
                },
                "firefox_android": {
                    "version_added": "26",
                    "notes": "Before Firefox 49, results for URL using the blob scheme incorrectly returned null."
                },
                "ie": {
                    "version_added": "11",
                    "notes": "Intranet sites are set to Compatibility View, which will emulate IE7 and omit <code>window.location.origin</code>."
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true,
                    "notes": "According to <a href='https://developer.apple.com/documentation/webkitjs/location/1631059-origin'>Apple's documentation</a>, <code>window.location.origin</code> is supported since Safari 10 (both desktop and mobile), but the feature seems to be present in some older versions as well. Because of this, the exact versions supporting this feature cannot be determined reliably."
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: origin"
        }
    ],
    "dom-location-pathname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "pathname",
            "slug": "API/Location/pathname",
            "summary": "The pathname property of the Location interface is a USVString containing an initial '/' followed by the path of the URL (or the empty string if there is no path).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "Before Firefox 53, the <code>pathname</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false, <code>pathname</code> would return \"/x?a=true&b=false\" rather than \"/x\"."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "Before Firefox 53, the <code>pathname</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false, <code>pathname</code> would return \"/x?a=true&b=false\" rather than \"/x\"."
                },
                "ie": {
                    "version_added": true,
                    "notes": "Internet Explorer does not provide the leading slash character in the <code>pathname</code> (<code>docs/Web/API/Location</code> instead of <code>/docs/Web/API/Location</code>)."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: pathname"
        }
    ],
    "dom-location-port": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "port",
            "slug": "API/Location/port",
            "summary": "The port property of the Location interface is a USVString containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: port"
        }
    ],
    "dom-location-protocol": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "protocol",
            "slug": "API/Location/protocol",
            "summary": "The protocol property of the Location interface is a USVString representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: protocol"
        }
    ],
    "dom-location-reload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "reload",
            "slug": "API/Location/reload",
            "summary": "The Location.reload() method reloads the current URL, like the Refresh button.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5",
                    "notes": "If a page added to <em>Trusted Sites</em> contains a cross-origin iframe, then calling <code>reload()</code> from within the iframe reloads the trusted page (in other words, the top page reloads, not the iframe)."
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Location: reload()"
        }
    ],
    "dom-location-replace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "replace",
            "slug": "API/Location/replace",
            "summary": "The replace() method of the Location interface replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Location: replace()"
        }
    ],
    "dom-location-search": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "search",
            "slug": "API/Location/search",
            "summary": "The search property of the Location interface is a search string, also called a query string; that is, a USVString containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": "Before Firefox 53, the <code>search</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false, <code>search</code> would return \"\", rather than \"?a=true&b=false\"."
                },
                "firefox_android": {
                    "version_added": "22",
                    "notes": "Before Firefox 53, the <code>search</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false, <code>search</code> would return \"\", rather than \"?a=true&b=false\"."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Location: search"
        }
    ],
    "dom-mediaerror-code": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaError.json",
            "name": "code",
            "slug": "API/MediaError/code",
            "summary": "The read-only property MediaError.code returns a numeric value which represents the kind of error that occurred on a media element. To get a text string with specific diagnostic information, see MediaError.message.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "MediaError.code"
        }
    ],
    "dom-mediaerror-message": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/MediaError.json",
            "name": "message",
            "slug": "API/MediaError/message",
            "summary": "The read-only property MediaError.message returns a DOMString which contains a human-readable string offering specific diagnostic details related to the error described by the MediaError object, or an empty string (\"\") if no diagnostic information can be determined or provided.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": {
                    "version_added": "59"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "46"
                },
                "opera_android": {
                    "version_added": "43"
                },
                "safari": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "7.0"
                },
                "webview_android": {
                    "version_added": "59"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaError.message"
        }
    ],
    "mediaerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaError.json",
            "name": "MediaError",
            "slug": "API/MediaError",
            "summary": "The MediaError interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "MediaError"
        }
    ],
    "dom-messagechannel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "MessageChannel",
            "slug": "API/MessageChannel/MessageChannel",
            "summary": "The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "notes": "Must be imported from the <code>worker_threads</code> module."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel()"
        }
    ],
    "dom-messagechannel-port1": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "port1",
            "slug": "API/MessageChannel/port1",
            "summary": "The port1 read-only property of the MessageChannel interface returns the first port of the message channel — the port attached to the context that originated the channel.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel.port1"
        }
    ],
    "dom-messagechannel-port2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "port2",
            "slug": "API/MessageChannel/port2",
            "summary": "The port2 read-only property of the MessageChannel interface returns the second port of the message channel — the port attached to the context at the other end of the channel, which the message is initially sent to.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel.port2"
        }
    ],
    "message-channels": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "MessageChannel",
            "slug": "API/MessageChannel",
            "summary": "The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "notes": "Must be imported from the <code>worker_threads</code> module."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel"
        }
    ],
    "dom-event-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "MessageEvent",
            "slug": "API/MessageEvent/MessageEvent",
            "summary": "The MessageEvent() constructor creates a new MessageEvent object instance.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent.MessageEvent()"
        }
    ],
    "dom-messageevent-data": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "data",
            "slug": "API/MessageEvent/data",
            "summary": "The data read-only property of the MessageEvent interface represents the data sent by the message emitter.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent.data"
        }
    ],
    "dom-messageevent-lasteventid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "lastEventId",
            "slug": "API/MessageEvent/lastEventId",
            "summary": "The lastEventId read-only property of the MessageEvent interface is a DOMString representing a unique ID for the event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent.lastEventId"
        }
    ],
    "dom-messageevent-origin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "origin",
            "slug": "API/MessageEvent/origin",
            "summary": "The origin read-only property of the MessageEvent interface is a USVString representing the origin of the message emitter.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent.origin"
        }
    ],
    "dom-messageevent-ports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "ports",
            "slug": "API/MessageEvent/ports",
            "summary": "The ports read-only property of the MessageEvent interface is an array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent.ports"
        }
    ],
    "dom-messageevent-source": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "source",
            "slug": "API/MessageEvent/source",
            "summary": "The source read-only property of the MessageEvent interface is a MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": {
                    "version_added": "55"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "MessageEvent.source"
        }
    ],
    "messageevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "MessageEvent",
            "slug": "API/MessageEvent",
            "summary": "The MessageEvent interface represents a message received by a target object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent"
        }
    ],
    "dom-messageport-close": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "close",
            "slug": "API/MessagePort/close",
            "summary": "The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort.close()"
        }
    ],
    "handler-messageport-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "onmessage",
            "slug": "API/MessagePort/onmessage",
            "summary": "The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port — that is, when the port receives a message.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort.onmessage"
        }
    ],
    "handler-messageport-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/MessagePort.json",
            "name": "onmessageerror",
            "slug": "API/MessagePort/onmessageerror",
            "summary": "The onmessageerror event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the port—that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort.onmessageerror"
        }
    ],
    "dom-messageport-postmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "postMessage",
            "slug": "API/MessagePort/postMessage",
            "summary": "The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort.postMessage()"
        }
    ],
    "dom-messageport-start": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "start",
            "slug": "API/MessagePort/start",
            "summary": "The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using MessageChannel.onmessage.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort.start()"
        }
    ],
    "message-ports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "MessagePort",
            "slug": "API/MessagePort",
            "summary": "The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "notes": "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort"
        }
    ],
    "mimetype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MimeType.json",
            "name": "MimeType",
            "slug": "API/MimeType",
            "summary": "The MimeType interface provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "MimeType"
        }
    ],
    "mimetypearray": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MimeTypeArray.json",
            "name": "MimeTypeArray",
            "slug": "API/MimeTypeArray",
            "summary": "The MimeTypeArray interface returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "MimeTypeArray"
        }
    ],
    "dom-navigator-cookieenabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "cookieEnabled",
            "slug": "API/Navigator/cookieEnabled",
            "summary": "navigator.cookieEnabled returns a Boolean value that indicates whether cookies are enabled or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Prior to Firefox 8, <code>navigator.cookieEnabled</code> would report the wrong result if a site exception was in place for the page on which the check was performed. This has been fixed."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Prior to Firefox 8, <code>navigator.cookieEnabled</code> would report the wrong result if a site exception was in place for the page on which the check was performed. This has been fixed."
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator.cookieEnabled"
        }
    ],
    "custom-handlers": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Navigator.json",
            "name": "registerProtocolHandler",
            "slug": "API/Navigator/registerProtocolHandler",
            "summary": "The Navigator method registerProtocolHandler() lets web sites register their ability to open or handle particular URL schemes (aka protocols).",
            "support": {
                "chrome": {
                    "version_added": "13",
                    "notes": [
                        "Allowed schemes include <code>mailto</code>, <code>mms</code>, <code>nntp</code>, <code>rtsp</code>, and <code>webcal</code>. Custom protocols must be prefixed with <code>web+</code>.",
                        "From Chrome 77, the URL parameter only accepts <code>http</code> or <code>https</code> URLs."
                    ]
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": [
                        "Allowed schemes include <code>mailto</code>, <code>mms</code>, <code>nntp</code>, <code>rtsp</code>, and <code>webcal</code>. Custom protocols must be prefixed with <code>web+</code>.",
                        "From Chrome 77, the URL parameter only accepts <code>http</code> or <code>https</code> URLs."
                    ]
                }
            },
            "caniuse": {
                "feature": "registerprotocolhandler",
                "title": "Custom protocol handling"
            },
            "title": "Navigator.registerProtocolHandler()"
        }
    ],
    "dom-navigator-vendor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "vendor",
            "slug": "API/Navigator/vendor",
            "summary": "The value of the Navigator vendor property is always either \"Google Inc.\", \"Apple Computer, Inc.\", or (in Firefox) the empty string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator.vendor"
        }
    ],
    "the-navigator-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "Navigator",
            "slug": "API/Navigator",
            "summary": "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator"
        }
    ],
    "dom-navigator-hardwareconcurrency": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/NavigatorConcurrentHardware.json",
            "name": "hardwareConcurrency",
            "slug": "API/NavigatorConcurrentHardware/hardwareConcurrency",
            "summary": "The navigator.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "navigator.hardwareConcurrency"
        }
    ],
    "navigator.hardwareconcurrency": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/NavigatorConcurrentHardware.json",
            "name": "NavigatorConcurrentHardware",
            "slug": "API/NavigatorConcurrentHardware",
            "summary": "The NavigatorConcurrentHardware mixin adds to the Navigator interface features which allow Web content to determine how many logical processors the user has available, in order to let content and Web apps optimize their operations to best take advantage of the user's CPU.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "hardwareconcurrency",
                "title": "navigator.hardwareConcurrency"
            },
            "title": "NavigatorConcurrentHardware"
        }
    ],
    "dom-navigator-useragent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorID.json",
            "name": "userAgent",
            "slug": "API/NavigatorID/userAgent",
            "summary": "The NavigatorID.userAgent read-only property returns the user agent string for the current browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "NavigatorID.userAgent"
        }
    ],
    "navigatorid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorID.json",
            "name": "NavigatorID",
            "slug": "API/NavigatorID",
            "summary": "The NavigatorID interface contains methods and properties related to the identity of the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "NavigatorID"
        }
    ],
    "dom-navigator-language": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorLanguage.json",
            "name": "language",
            "slug": "API/NavigatorLanguage/language",
            "summary": "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Prior to Firefox 4, this property's value was also part of the user agent string, as reported by <code>navigator.userAgent</code>. Starting in Firefox 5, this property's value is based on the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11",
                    "notes": "Closest available (non-standard) properties are <code>userLanguage</code> and <code>browserLanguage</code>."
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                }
            },
            "title": "NavigatorLanguage.language"
        }
    ],
    "dom-navigator-languages": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorLanguage.json",
            "name": "languages",
            "slug": "API/NavigatorLanguage/languages",
            "summary": "The NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first.",
            "support": {
                "chrome": {
                    "version_added": "32",
                    "notes": "In Chrome, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>."
                },
                "chrome_android": {
                    "version_added": "32",
                    "notes": "In Chrome, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "32",
                    "notes": "In Firefox, the <code>navigator.languages</code> property's value is taken from the <code>intl.accept_languages</code> preference."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "In Firefox, the <code>navigator.languages</code> property's value is taken from the <code>intl.accept_languages</code> preference."
                },
                "ie": {
                    "version_added": "11",
                    "notes": "Closest available (non-standard) properties are <code>userLanguage</code> and <code>browserLanguage</code>."
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "2.0",
                    "notes": "In Samsung Internet, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>."
                },
                "webview_android": {
                    "version_added": "4.4.3",
                    "notes": "In Chrome, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "In Chrome, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>."
                }
            },
            "title": "NavigatorLanguage.languages"
        }
    ],
    "navigatorlanguage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorLanguage.json",
            "name": "NavigatorLanguage",
            "slug": "API/NavigatorLanguage",
            "summary": "NavigatorLanguage contains methods and properties related to the language of the navigator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NavigatorLanguage"
        }
    ],
    "dom-navigator-online": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorOnLine.json",
            "name": "onLine",
            "slug": "API/NavigatorOnLine/onLine",
            "summary": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Earlier versions of Chrome incorrectly return true when a tab is first opened, but it starts reporting the correct connectivity status after the first network event. Windows: 11, Mac: 14, Chrome OS: 13, Linux: Always returns <code>true</code>. For history, see <a href='https://crbug.com/7469'>crbug.com/7469</a>."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Since Firefox 4 the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity. Since Firefox 41, on OS X and Windows, the returned values follow the actual network connectivity, unless 'Work offline' mode is selected (where it will always return <code>false</code>)."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8",
                    "notes": "in Internet Explorer 8 'online' and 'offline' events are raised on the <code>document.body</code>; under IE 9 they are raised on both <code>document.body</code> and <code>window</code>."
                },
                "opera": {
                    "version_added": "3",
                    "notes": "From Opera 11.1 until Opera 12.1, the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "From Opera 11.1 until Opera 12.1, the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity."
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Faulty in a WebView component, see Issue <a href='http://code.google.com/p/android/issues/detail?id=16760'>bug 16760</a>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Earlier versions of Chrome incorrectly return true when a tab is first opened, but it starts reporting the correct connectivity status after the first network event. Windows: 11, Mac: 14, Chrome OS: 13, Linux: Always returns <code>true</code>. For history, see <a href='https://crbug.com/7469'>crbug.com/7469</a>."
                }
            },
            "title": "Navigator.onLine"
        }
    ],
    "browser-state": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorOnLine.json",
            "name": "NavigatorOnLine",
            "slug": "API/NavigatorOnLine",
            "summary": "The NavigatorOnLine interface contains methods and properties related to the connectivity status of the browser.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "online-status",
                "title": "Online/offline status"
            },
            "title": "NavigatorOnLine"
        }
    ],
    "dom-navigator-javaenabled": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/NavigatorPlugins.json",
            "name": "javaEnabled",
            "slug": "API/NavigatorPlugins/javaEnabled",
            "summary": "This method indicates whether the current browser is Java-enabled or not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins.javaEnabled()"
        }
    ],
    "dom-navigator-mimetypes": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/NavigatorPlugins.json",
            "name": "mimeTypes",
            "slug": "API/NavigatorPlugins/mimeTypes",
            "summary": "Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins.mimeTypes"
        }
    ],
    "dom-navigator-plugins": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/NavigatorPlugins.json",
            "name": "plugins",
            "slug": "API/NavigatorPlugins/plugins",
            "summary": "Returns a PluginArray object, listing the Plugin objects describing the plugins installed in the application.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins.plugins"
        }
    ],
    "navigatorplugins": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NavigatorPlugins.json",
            "name": "NavigatorPlugins",
            "slug": "API/NavigatorPlugins",
            "summary": "The NavigatorPlugins mixin adds to the Navigator interface methods and properties for discovering and interacting with plugins installed into the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins"
        }
    ],
    "dom-offscreencanvas": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "OffscreenCanvas",
            "slug": "API/OffscreenCanvas/OffscreenCanvas",
            "summary": "The OffscreenCanvas() constructor returns a newly instantiated OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "46",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "46",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas()"
        }
    ],
    "dom-offscreencanvas-converttoblob": [
        {
            "engines": [
                "blink"
            ],
            "altname": [
                "gecko"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "convertToBlob",
            "slug": "API/OffscreenCanvas/convertToBlob",
            "summary": "The OffscreenCanvas.convertToBlob()method creates a Blob object representing the image contained in the canvas.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "alternative_name": "toBlob",
                    "version_added": "46",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "alternative_name": "toBlob",
                    "version_added": "46",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas.convertToBlob()"
        }
    ],
    "dom-offscreencanvas-getcontext": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "getContext",
            "slug": "API/OffscreenCanvas/getContext",
            "summary": "The OffscreenCanvas.getContext() method returns a drawing context for an offscreen canvas, or null if the context identifier is not supported.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas.getContext()"
        }
    ],
    "dom-offscreencanvas-height": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "height",
            "slug": "API/OffscreenCanvas/height",
            "summary": "The height property returns and sets the height of an OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas.height"
        }
    ],
    "dom-offscreencanvas-transfertoimagebitmap": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "transferToImageBitmap",
            "slug": "API/OffscreenCanvas/transferToImageBitmap",
            "summary": "The OffscreenCanvas.transferToImageBitmap() method creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "46",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "46",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas.transferToImageBitmap()"
        }
    ],
    "dom-offscreencanvas-width": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "width",
            "slug": "API/OffscreenCanvas/width",
            "summary": "The width property returns and sets the width of an OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas.width"
        }
    ],
    "the-offscreencanvas-interface": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "OffscreenCanvas",
            "slug": "API/OffscreenCanvas",
            "summary": "The OffscreenCanvas interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "44",
                    "partial_implementation": true,
                    "notes": "See <a href='https://bugzil.la/1390089'>bug 1390089</a>.",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "offscreencanvas",
                "title": "OffscreenCanvas"
            },
            "title": "OffscreenCanvas"
        }
    ],
    "dom-pagetransitionevent-persisted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PageTransitionEvent.json",
            "name": "persisted",
            "slug": "API/PageTransitionEvent/persisted",
            "summary": "The persisted read-only property indicates if a webpage is loading from a cache.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "11",
                    "notes": "The <code>persisted</code> property is known to be buggy in Internet Explorer. It is advised to check if <code>window.performance.navigation.type == 2</code> as well."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "PageTransitionEvent.persisted"
        }
    ],
    "the-pagetransitionevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PageTransitionEvent.json",
            "name": "PageTransitionEvent",
            "slug": "API/PageTransitionEvent",
            "summary": "The PageTransitionEvent event object is available inside handler functions for the pageshow and pagehide events, fired when a document is being loaded or unloaded.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "PageTransitionEvent"
        }
    ],
    "dom-path2d": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Path2D.json",
            "name": "Path2D",
            "slug": "API/Path2D/Path2D",
            "summary": "The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": "42"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Path2D()"
        }
    ],
    "dom-path2d-addpath": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Path2D.json",
            "name": "addPath",
            "slug": "API/Path2D/addPath",
            "summary": "The Path2D.addPath() method of the Canvas 2D API adds one Path2D object to another Path2D object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": {
                    "version_added": "34"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Path2D.addPath()"
        }
    ],
    "path2d-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Path2D.json",
            "name": "Path2D",
            "slug": "API/Path2D",
            "summary": "The Path2D interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "path2d",
                "title": "Path2D"
            },
            "title": "Path2D"
        }
    ],
    "dom-plugin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Plugin.json",
            "name": "Plugin",
            "slug": "API/Plugin",
            "summary": "The Plugin interface provides information about a browser plugin.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Plugin"
        }
    ],
    "pluginarray": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PluginArray.json",
            "name": "PluginArray",
            "slug": "API/PluginArray",
            "summary": "The PluginArray interface is used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\"name\") methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "PluginArray"
        }
    ],
    "popstateevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PopStateEvent.json",
            "name": "PopStateEvent",
            "slug": "API/PopStateEvent",
            "summary": "PopStateEvent is an event handler for the popstate event on the window.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PopStateEvent"
        }
    ],
    "the-promiserejectionevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "PromiseRejectionEvent",
            "slug": "API/PromiseRejectionEvent/PromiseRejectionEvent",
            "summary": "The PromiseRejectionEvent() constructor returns a newly created PromiseRejectionEvent, which represents events fired when a JavaScript Promise is rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": {
                    "version_added": "68",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.promise_rejection_events.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent()"
        }
    ],
    "dom-promiserejectionevent-promise": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "promise",
            "slug": "API/PromiseRejectionEvent/promise",
            "summary": "The PromiseRejectionEvent interface's promise read-only property indicates the JavaScript Promise which was rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": {
                    "version_added": "68",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.promise_rejection_events.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent.promise"
        }
    ],
    "dom-promiserejectionevent-reason": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "reason",
            "slug": "API/PromiseRejectionEvent/reason",
            "summary": "The PromiseRejectionEvent reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": {
                    "version_added": "68",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.promise_rejection_events.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent.reason"
        }
    ],
    "promiserejectionevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "PromiseRejectionEvent",
            "slug": "API/PromiseRejectionEvent",
            "summary": "The PromiseRejectionEvent interface represents events which are sent to the global script context when JavaScript Promises are rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": {
                    "version_added": "68",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.promise_rejection_events.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent"
        }
    ],
    "dom-radionodelist-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/RadioNodeList.json",
            "name": "value",
            "slug": "API/RadioNodeList/value",
            "summary": "If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RadioNodeList.value"
        }
    ],
    "radionodelist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/RadioNodeList.json",
            "name": "RadioNodeList",
            "slug": "API/RadioNodeList",
            "summary": "The RadioNodeList interface represents a collection of radio elements in a <form> or a <fieldset> element.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RadioNodeList"
        }
    ],
    "image-decoding-hint": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/SVGImageElement.json",
            "name": "decoding",
            "slug": "API/SVGImageElement/decoding",
            "summary": "The decoding property of the SVGImageElement interface represents a hint given to the browser on how it should decode the image.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": {
                    "version_added": "65"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "65"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SVGImageElement.decoding"
        }
    ],
    "dom-sharedworker": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SharedWorker.json",
            "name": "SharedWorker",
            "slug": "API/SharedWorker/SharedWorker",
            "summary": "The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7"
                },
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker()"
        }
    ],
    "dom-sharedworker-port": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SharedWorker.json",
            "name": "port",
            "slug": "API/SharedWorker/port",
            "summary": "The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7"
                },
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker.port"
        }
    ],
    "sharedworker": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SharedWorker.json",
            "name": "SharedWorker",
            "slug": "API/SharedWorker",
            "summary": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7"
                },
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker"
        }
    ],
    "dom-sharedworkerglobalscope-close": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "close",
            "slug": "API/SharedWorkerGlobalScope/close",
            "summary": "The close() method of the SharedWorkerGlobalScope interface discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "54"
                },
                "firefox_android": {
                    "version_added": "54"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "SharedWorkerGlobalScope.close()"
        }
    ],
    "event-workerglobalscope-connect": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "connect_event",
            "slug": "API/SharedWorkerGlobalScope/connect_event",
            "summary": "The connect event is fired in shared workers at their SharedWorkerGlobalScope when a new client connects.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29",
                    "notes": "Before version 65 the <code>data</code> property of the event object was <code>null</code>; it is now initialized to an empty string, as per spec."
                },
                "firefox_android": {
                    "version_added": "29",
                    "notes": "Before version 65 the <code>data</code> property of the event object was <code>null</code>; it is now initialized to an empty string, as per spec."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope: connect event"
        }
    ],
    "dom-sharedworkerglobalscope-name": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "name",
            "slug": "API/SharedWorkerGlobalScope/name",
            "summary": "The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": {
                    "version_added": "55"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "SharedWorkerGlobalScope.name"
        }
    ],
    "handler-sharedworkerglobalscope-onconnect": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "onconnect",
            "slug": "API/SharedWorkerGlobalScope/onconnect",
            "summary": "The onconnect property of the SharedWorkerGlobalScope interface is an event handler representing the code to be called when the connect event is raised — that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope.onconnect"
        }
    ],
    "sharedworkerglobalscope": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "SharedWorkerGlobalScope",
            "slug": "API/SharedWorkerGlobalScope",
            "summary": "The SharedWorkerGlobalScope object (the SharedWorker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope"
        }
    ],
    "dom-storage-clear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "clear",
            "slug": "API/Storage/clear",
            "summary": "The clear() method of the Storage interface clears all keys stored in a given Storage object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage.clear()"
        }
    ],
    "dom-storage-getitem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "getItem",
            "slug": "API/Storage/getItem",
            "summary": "The getItem() method of the Storage interface, when passed a key name, will return that key's value, or null if the key does not exist, in the given Storage object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage.getItem()"
        }
    ],
    "dom-storage-key": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "key",
            "slug": "API/Storage/key",
            "summary": "The key() method of the Storage interface, when passed a number n, returns the name of the nth key in a given Storage object. The order of keys is user-agent defined, so you should not rely on it.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage.key()"
        }
    ],
    "dom-storage-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "length",
            "slug": "API/Storage/length",
            "summary": "The length read-only property of the Storage interface returns the number of data items stored in a given Storage object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage.length"
        }
    ],
    "dom-storage-removeitem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "removeItem",
            "slug": "API/Storage/removeItem",
            "summary": "The removeItem() method of the Storage interface, when passed a key name, will remove that key from the given Storage object if it exists. The Storage interface of the Web Storage API provides access to a particular domain's session or local storage.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage.removeItem()"
        }
    ],
    "dom-storage-setitem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "setItem",
            "slug": "API/Storage/setItem",
            "summary": "The setItem() method of the Storage interface, when passed a key name and value, will add that key to the given Storage object, or update that key's value if it already exists.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage.setItem()"
        }
    ],
    "storage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "Storage",
            "slug": "API/Storage",
            "summary": "The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "namevalue-storage",
                "title": "Web Storage - name/value pairs"
            },
            "title": "Storage"
        }
    ],
    "the-storageevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StorageEvent.json",
            "name": "StorageEvent",
            "slug": "API/StorageEvent",
            "summary": "A StorageEvent is sent to a window when a storage area it has access to is changed within the context of another document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StorageEvent"
        }
    ],
    "submitevent": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SubmitEvent.json",
            "name": "SubmitEvent",
            "slug": "API/SubmitEvent/SubmitEvent",
            "summary": "The SubmitEvent() constructor creates and returns a new SubmitEvent object, which is used to represent a submit event fired at an HTML form.",
            "support": {
                "chrome": {
                    "version_added": "81"
                },
                "chrome_android": {
                    "version_added": "81"
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "13.0"
                },
                "webview_android": {
                    "version_added": "81"
                },
                "edge_blink": {
                    "version_added": "81"
                }
            },
            "title": "SubmitEvent()"
        }
    ],
    "dom-submitevent-submitter": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SubmitEvent.json",
            "name": "submitter",
            "slug": "API/SubmitEvent/submitter",
            "summary": "The read-only submitter property found on the SubmitEvent interface specifies the submit button or other element that was invoked to cause the form to be submitted.",
            "support": {
                "chrome": {
                    "version_added": "81"
                },
                "chrome_android": {
                    "version_added": "81"
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "13.0"
                },
                "webview_android": {
                    "version_added": "81"
                },
                "edge_blink": {
                    "version_added": "81"
                }
            },
            "title": "SubmitEvent.submitter"
        }
    ],
    "the-submitevent-interface": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SubmitEvent.json",
            "name": "SubmitEvent",
            "slug": "API/SubmitEvent",
            "summary": "The SubmitEvent interface defines the object used to represent an HTML form's submit event. This event is fired at the <form> when the form's submit action is invoked.",
            "support": {
                "chrome": {
                    "version_added": "81"
                },
                "chrome_android": {
                    "version_added": "81"
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "13.0"
                },
                "webview_android": {
                    "version_added": "81"
                },
                "edge_blink": {
                    "version_added": "81"
                }
            },
            "title": "SubmitEvent"
        }
    ],
    "dom-textmetrics-actualboundingboxascent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxAscent",
            "slug": "API/TextMetrics/actualBoundingBoxAscent",
            "summary": "The read-only actualBoundingBoxAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels.",
            "support": {
                "chrome": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ]
            },
            "title": "TextMetrics.actualBoundingBoxAscent"
        }
    ],
    "dom-textmetrics-actualboundingboxdescent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxDescent",
            "slug": "API/TextMetrics/actualBoundingBoxDescent",
            "summary": "The read-only actualBoundingBoxDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.",
            "support": {
                "chrome": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ]
            },
            "title": "TextMetrics.actualBoundingBoxDescent"
        }
    ],
    "dom-textmetrics-actualboundingboxleft": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxLeft",
            "slug": "API/TextMetrics/actualBoundingBoxLeft",
            "summary": "The read-only actualBoundingBoxLeft property of the TextMetrics interface is a double giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels.",
            "support": {
                "chrome": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ]
            },
            "title": "TextMetrics.actualBoundingBoxLeft"
        }
    ],
    "dom-textmetrics-actualboundingboxright": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxRight",
            "slug": "API/TextMetrics/actualBoundingBoxRight",
            "summary": "The read-only actualBoundingBoxRight property of the TextMetrics interface is a double giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels.",
            "support": {
                "chrome": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "77"
                    },
                    {
                        "version_added": true,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "12.0"
                },
                "webview_android": {
                    "version_added": "77"
                },
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "77",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "Experimental Web Platform Features"
                            }
                        ]
                    }
                ]
            },
            "title": "TextMetrics.actualBoundingBoxRight"
        }
    ],
    "dom-textmetrics-alphabeticbaseline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "alphabeticBaseline",
            "slug": "API/TextMetrics/alphabeticBaseline",
            "summary": "The read-only alphabeticBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.baselines.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "TextMetrics.alphabeticBaseline"
        }
    ],
    "dom-textmetrics-emheightascent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "emHeightAscent",
            "slug": "API/TextMetrics/emHeightAscent",
            "summary": "The read-only emHeightAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the em square in the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.emHeight.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "TextMetrics.emHeightAscent"
        }
    ],
    "dom-textmetrics-emheightdescent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "emHeightDescent",
            "slug": "API/TextMetrics/emHeightDescent",
            "summary": "The read-only emHeightDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the em square in the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.emHeight.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "TextMetrics.emHeightDescent"
        }
    ],
    "dom-textmetrics-fontboundingboxascent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "fontBoundingBoxAscent",
            "slug": "API/TextMetrics/fontBoundingBoxAscent",
            "summary": "The read-only fontBoundingBoxAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.fontBoundingBox.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "TextMetrics.fontBoundingBoxAscent"
        }
    ],
    "dom-textmetrics-fontboundingboxdescent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "fontBoundingBoxDescent",
            "slug": "API/TextMetrics/fontBoundingBoxDescent",
            "summary": "The read-only fontBoundingBoxDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.fontBoundingBox.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "TextMetrics.fontBoundingBoxDescent"
        }
    ],
    "dom-textmetrics-hangingbaseline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "hangingBaseline",
            "slug": "API/TextMetrics/hangingBaseline",
            "summary": "The read-only hangingBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.baselines.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "TextMetrics.hangingBaseline"
        }
    ],
    "dom-textmetrics-ideographicbaseline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "ideographicBaseline",
            "slug": "API/TextMetrics/ideographicBaseline",
            "summary": "The read-only ideographicBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.baselines.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Experimental Web Platform Features"
                        }
                    ]
                }
            },
            "title": "TextMetrics.ideographicBaseline"
        }
    ],
    "dom-textmetrics-width": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "width",
            "slug": "API/TextMetrics/width",
            "summary": "The read-only width property of the TextMetrics interface contains the text's advance width (the width of that inline box) in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics.width"
        }
    ],
    "textmetrics": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "TextMetrics",
            "slug": "API/TextMetrics",
            "summary": "The TextMetrics interface represents the dimensions of a piece of text in the canvas; a textMetrics() instance can be retrieved using the CanvasRenderingContext2D.measureText() method.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics"
        }
    ],
    "dom-texttrack-mode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "mode",
            "slug": "API/TextTrack/mode",
            "summary": "The TextTrack interface's mode property is a string specifying and controlling the text track's mode: disabled, hidden, or showing.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Before Firefox 52, using JavaScript to change the mode of a text track that's part of a media element would send one change event to the element's textTracks TextTrackList for each change, even if mutliple changes are made in a single pass through the Firefox event loop. Starting in Firefox 52, these changes are reflected by a single event."
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack.mode"
        }
    ],
    "texttrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "TextTrack",
            "slug": "API/TextTrack",
            "summary": "This interface also inherits properties from EventTarget.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Firefox versions before Firefox 50 didn't display captions when playing media without one or more video tracks being played."
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack"
        }
    ],
    "texttrackcue": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "TextTrackCue",
            "slug": "API/TextTrackCue",
            "summary": "TextTrackCue is an abstract class which is used as the basis for the various derived cue types, such as VTTCue; you will instead work with those derived types.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue"
        }
    ],
    "dom-texttracklist-gettrackbyid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "getTrackById",
            "slug": "API/TextTrackList/getTrackById",
            "summary": "The TextTrackList method getTrackById() returns the first TextTrack object from the track list whose id matches the specified string.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "getTrackById()"
        }
    ],
    "dom-texttracklist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "length",
            "slug": "API/TextTrackList/length",
            "summary": "The read-only TextTrackList property length returns the number of entries in the TextTrackList, each of which is a TextTrack representing one track in the media element.",
            "support": {
                "chrome": {
                    "version_added": "44"
                },
                "chrome_android": {
                    "version_added": "44"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "31"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "44"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList.length"
        }
    ],
    "texttracklist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "TextTrackList",
            "slug": "API/TextTrackList",
            "summary": "The TextTrackList interface is used to represent a list of the text tracks defined by the <track> element, with each track represented by a separate textTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TextTrackList"
        }
    ],
    "dom-timeranges-end": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "end",
            "slug": "API/TimeRanges/end",
            "summary": "Returns the time offset at which a specified time range ends.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TimeRanges.end()"
        }
    ],
    "dom-timeranges-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "length",
            "slug": "API/TimeRanges/length",
            "summary": "The TimeRanges.length read-only property returns the number of ranges in the object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TimeRanges.length"
        }
    ],
    "dom-timeranges-start": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "start",
            "slug": "API/TimeRanges/start",
            "summary": "Returns the time offset at which a specified time range begins.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TimeRanges.start()"
        }
    ],
    "time-ranges": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "TimeRanges",
            "slug": "API/TimeRanges",
            "summary": "The TimeRanges interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the <audio> and <video> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TimeRanges"
        }
    ],
    "dom-trackevent-track": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/TrackEvent.json",
            "name": "track",
            "slug": "API/TrackEvent/track",
            "summary": "The read-only track property of the TrackEvent interface specifies the media track object to which the event applies.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TrackEvent.track"
        }
    ],
    "the-trackevent-interface": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/TrackEvent.json",
            "name": "TrackEvent",
            "slug": "API/TrackEvent",
            "summary": "The TrackEvent interface, which is part of the HTML DOM specification, is used for events which represent changes to a set of available tracks on an HTML media element; these events are addtrack and removetrack.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "TrackEvent"
        }
    ],
    "transferable-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Transferable.json",
            "name": "Transferable",
            "slug": "API/Transferable",
            "summary": "The Transferable interface represents an object that can be transfered between different execution contexts, like the main thread and Web workers.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10",
                    "notes": "Internet Explorer 10 only accepts a single <code>Transferable</code> object as parameter, but not an array."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Transferable"
        }
    ],
    "dom-validitystate-badinput": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "badInput",
            "slug": "API/ValidityState/badInput",
            "summary": "The read-only badInput property of a ValidityState object indicates if the user has provided input that the browser is unable to convert. For example, if you have a number input element whose content is a string. Note: While this is unsupported in Internet Explorer, any non-numeric value will be dismissed from the field if it is a number input.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "validityState.badInput"
        }
    ],
    "dom-validitystate-toolong": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "tooLong",
            "slug": "API/ValidityState/tooLong",
            "summary": "The read-only tooLong property of a ValidityState object indicates if the value of an <input> or <textarea>, after having been edited by the user, exceeds the maximum code-unit length established by the element's maxlength attribute.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Not supported in the unlikely case of the value being initially set too long, and then changed by the user to a still incorrect state. Per caniuse.com."
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "validityState.tooLong"
        }
    ],
    "dom-validitystate-tooshort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "tooShort",
            "slug": "API/ValidityState/tooShort",
            "summary": "The read-only tooShort property of a ValidityState object indicates if the value of an <input>, <button>, <select>, <output>, <fieldset> or <textarea>, after having been edited by the user, is less than the minimum code-unit length established by the element's minlength attribute.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "27"
                },
                "opera_android": {
                    "version_added": "27"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "67"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "validityState.tooShort"
        }
    ],
    "validitystate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "ValidityState",
            "slug": "API/ValidityState",
            "summary": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState"
        }
    ],
    "dom-videotrack-id": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "id",
            "slug": "API/VideoTrack/id",
            "summary": "The id property contains a string which uniquely identifies the track represented by the VideoTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack.id"
        }
    ],
    "dom-videotrack-kind": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "kind",
            "slug": "API/VideoTrack/kind",
            "summary": "The kind property contains a string indicating the category of video contained in the VideoTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack.kind"
        }
    ],
    "dom-videotrack-label": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "label",
            "slug": "API/VideoTrack/label",
            "summary": "The read-only VideoTrack property label returns a string specifying the video track's human-readable label, if one is available; otherwise, it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack.label"
        }
    ],
    "dom-videotrack-language": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "language",
            "slug": "API/VideoTrack/language",
            "summary": "The read-only VideoTrack property language returns a string identifying the language used in the video track.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "Videotrack.language"
        }
    ],
    "dom-videotrack-selected": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "selected",
            "slug": "API/VideoTrack/selected",
            "summary": "The VideoTrack property selected controls whether or not a particular video track is active.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack.selected"
        }
    ],
    "videotrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "VideoTrack",
            "slug": "API/VideoTrack",
            "summary": "The VideoTrack interface represents a single video track from a <video> element.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack"
        }
    ],
    "dom-videotracklist-gettrackbyid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "getTrackById",
            "slug": "API/VideoTrackList/getTrackById",
            "summary": "The VideoTrackList method getTrackById() returns the first VideoTrack object from the track list whose id matches the specified string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "getTrackById"
        }
    ],
    "dom-videotracklist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "length",
            "slug": "API/VideoTrackList/length",
            "summary": "The read-only VideoTrackList property length returns the number of entries in the VideoTrackList, each of which is a VideoTrack representing one video track in the media element.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList.length"
        }
    ],
    "dom-videotracklist-selectedindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "selectedIndex",
            "slug": "API/VideoTrackList/selectedIndex",
            "summary": "The read-only VideoTrackList property selectedIndex returns the index of the currently selected track, if any, or -1 otherwise.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList.selectedIndex"
        }
    ],
    "videotracklist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "VideoTrackList",
            "slug": "API/VideoTrackList",
            "summary": "The VideoTrackList interface is used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList"
        }
    ],
    "offscreencontext-commit": [
        {
            "engines": [
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/WebGLRenderingContext.json",
            "name": "commit",
            "slug": "API/WebGLRenderingContext/commit",
            "summary": "The WebGLRenderingContext.commit() method pushes frames back to the original HTMLCanvasElement, if the context is not directly fixed to a specific canvas.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "44",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "gfx.offscreencanvas.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "WebGLRenderingContext.commit()"
        }
    ],
    "dom-websocket": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WebSocket.json",
            "name": "WebSocket",
            "slug": "API/WebSocket/WebSocket",
            "summary": "The WebSocket() constructor returns a new WebSocket object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "7",
                        "notes": "Parameter <code>protocols</code> not supported."
                    }
                ],
                "firefox_android": {
                    "version_added": "7"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket()"
        }
    ],
    "dom-websocket-binarytype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "binaryType",
            "slug": "API/WebSocket/binaryType",
            "summary": "The WebSocket.binaryType property returns the type of binary data being transmitted by the connection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.binaryType"
        }
    ],
    "dom-websocket-bufferedamount": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "bufferedAmount",
            "slug": "API/WebSocket/bufferedAmount",
            "summary": "The WebSocket.bufferedAmount read-only property returns the number of bytes of data that have been queued using calls to send() but not yet transmitted to the network. This value resets to zero once all queued data has been sent. This value does not reset to zero when the connection is closed; if you keep calling send(), this will continue to climb.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.bufferedAmount"
        }
    ],
    "dom-websocket-close": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "close",
            "slug": "API/WebSocket/close",
            "summary": "The WebSocket.close() method closes the WebSocket connection or connection attempt, if any. If the connection is already CLOSED, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "8"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "8",
                        "notes": "Parameters not supported, see <a href='https://bugzil.la/674716'>bug 674716</a>."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "8"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "8",
                        "notes": "Parameters not supported, see <a href='https://bugzil.la/674716'>bug 674716</a>."
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebSocket.close()"
        }
    ],
    "dom-websocket-extensions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "extensions",
            "slug": "API/WebSocket/extensions",
            "summary": "The WebSocket.extensions read-only property returns the extensions selected by the server. This is currently only the empty string or a list of extensions as negotiated by the connection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.extensions"
        }
    ],
    "handler-websocket-onclose": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "onclose",
            "slug": "API/WebSocket/onclose",
            "summary": "The WebSocket.onclose property is an EventHandler that is called when the WebSocket connection's readyState changes to CLOSED. It is called with a CloseEvent.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.onclose"
        }
    ],
    "handler-websocket-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "onerror",
            "slug": "API/WebSocket/onerror",
            "summary": "The WebSocket interface's onerror event handler property is a function which gets called when an error occurs on the WebSocket.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.onerror"
        }
    ],
    "handler-websocket-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "onmessage",
            "slug": "API/WebSocket/onmessage",
            "summary": "The WebSocket.onmessage property is an EventHandler that is called when a message is received from the server. It is called with a MessageEvent.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.onmessage"
        }
    ],
    "handler-websocket-onopen": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "onopen",
            "slug": "API/WebSocket/onopen",
            "summary": "The WebSocket.onopen property is an EventHandler that is called when the WebSocket connection's readyState changes to 1; this indicates that the connection is ready to send and receive data. It is called with an Event.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.onopen"
        }
    ],
    "dom-websocket-protocol": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "protocol",
            "slug": "API/WebSocket/protocol",
            "summary": "The WebSocket.protocol read-only property returns the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object, or the empty string if no connection is established.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.protocol"
        }
    ],
    "dom-websocket-readystate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "readyState",
            "slug": "API/WebSocket/readyState",
            "summary": "The WebSocket.readyState read-only property returns the current state of the WebSocket connection.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "19"
                },
                "firefox_android": {
                    "version_added": "19"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "30"
                },
                "opera_android": {
                    "version_added": "30"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebSocket.readyState"
        }
    ],
    "dom-websocket-send": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "send",
            "slug": "API/WebSocket/send",
            "summary": "The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "18",
                        "notes": "See <a href='https://bugzil.la/775368'>bug 775368</a>."
                    },
                    {
                        "version_added": "11",
                        "version_removed": "18",
                        "notes": "Only parameter of type <code>ArrayBuffer</code> and <code>String</code> supported."
                    },
                    {
                        "version_added": "8",
                        "version_removed": "11",
                        "notes": "Only parameter of type <code>String</code> supported."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "8",
                        "notes": "Only parameter of type <code>String</code> supported. Returns <code>boolean</code>."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "18",
                        "notes": "See <a href='https://bugzil.la/775368'>bug 775368</a>."
                    },
                    {
                        "version_added": "14",
                        "version_removed": "18",
                        "notes": "Only parameter of type <code>ArrayBuffer</code> and <code>String</code> supported."
                    },
                    {
                        "version_added": "8",
                        "version_removed": "14",
                        "notes": "Only parameter of type <code>String</code> supported."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "8",
                        "notes": "Only parameter of type <code>String</code> supported. Returns <code>boolean</code>."
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebSocket.send()"
        }
    ],
    "dom-websocket-url": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "url",
            "slug": "API/WebSocket/url",
            "summary": "The WebSocket.url read-only property returns the absolute URL of the WebSocket as resolved by the constructor.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WebSocket.url"
        }
    ],
    "network": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WebSocket.json",
            "name": "WebSocket",
            "slug": "API/WebSocket",
            "summary": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "11"
                    },
                    {
                        "version_added": "7",
                        "version_removed": "11",
                        "prefix": "Moz",
                        "notes": "Message size limited to 16 MB (see <a href='https://bugzil.la/711205'>bug 711205</a>)."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "6",
                        "notes": "Message size limited to 16 MB (see <a href='https://bugzil.la/711205'>bug 711205</a>)."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "14",
                        "notes": "See <a href='https://bugzil.la/695635'>bug 695635</a>."
                    },
                    {
                        "version_added": "7",
                        "version_removed": "14",
                        "prefix": "Moz",
                        "notes": "Message size limited to 16 MB (see <a href='https://bugzil.la/711205'>bug 711205</a>)."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "6",
                        "notes": "Message size limited to 16 MB (see <a href='https://bugzil.la/711205'>bug 711205</a>)."
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "websockets",
                "title": "Web Sockets"
            },
            "title": "WebSocket"
        }
    ],
    "event-domcontentloaded": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "DOMContentLoaded_event",
            "slug": "API/Window/DOMContentLoaded_event",
            "summary": "The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: DOMContentLoaded event"
        }
    ],
    "event-afterprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "afterprint_event",
            "slug": "API/Window/afterprint_event",
            "summary": "The afterprint event is fired after the associated document has started printing or the print preview has been closed.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": {
                    "version_added": "63"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "50"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": {
                    "version_added": "13"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "63"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: afterprint event"
        }
    ],
    "dom-alert": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "alert",
            "slug": "API/Window/alert",
            "summary": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Starting with Samsung Internet 5.0, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Starting with WebView 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "title": "Window.alert()"
        }
    ],
    "event-beforeprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "beforeprint_event",
            "slug": "API/Window/beforeprint_event",
            "summary": "The beforeprint event is fired when the associated document is about to be printed or previewed for printing.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": {
                    "version_added": "63"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "50"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": {
                    "version_added": "13"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "63"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: beforeprint event"
        }
    ],
    "event-beforeunload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "beforeunload_event",
            "slug": "API/Window/beforeunload_event",
            "summary": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: beforeunload event"
        }
    ],
    "dom-window-blur": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "blur",
            "slug": "API/Window/blur",
            "summary": "Shifts focus away from the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.blur()"
        }
    ],
    "animationframeprovider-cancelanimationframe": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "cancelAnimationFrame",
            "slug": "API/Window/cancelAnimationFrame",
            "summary": "The window.cancelAnimationFrame() method cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "11",
                        "version_removed": "23",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "14",
                        "version_removed": "23",
                        "prefix": "moz"
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "6.1"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "6.1",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "window.cancelAnimationFrame()"
        }
    ],
    "dom-window-close": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "close",
            "slug": "API/Window/close",
            "summary": "The Window.close() method closes the current window, or the window on which it was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting in Firefox 46.0.1, <code>Window.close()</code> can no longer close windows that weren't opened by the same script. This is a security precaution."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Starting in Firefox 46.0.1, <code>Window.close()</code> can no longer close windows that weren't opened by the same script. This is a security precaution."
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.close()"
        }
    ],
    "dom-confirm": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "confirm",
            "slug": "API/Window/confirm",
            "summary": "The Window.confirm() method displays a modal dialog with an optional message and two buttons: OK and Cancel.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Starting with Samsung Internet 5.0, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "title": "Window.confirm()"
        }
    ],
    "dom-window-customelements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "customElements",
            "slug": "API/Window/customElements",
            "summary": "The customElements read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.customElements"
        }
    ],
    "dom-document-2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "document",
            "slug": "API/Window/document",
            "summary": "window.document returns a reference to the document contained in the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.document"
        }
    ],
    "dom-window-focus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "focus",
            "slug": "API/Window/focus",
            "summary": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting in Chrome 66, opening a popup in fullscreen mode and calling this function will end fullscreen mode."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting in Chrome 66, opening a popup in fullscreen mode and calling this function will end fullscreen mode."
                }
            },
            "title": "Window.focus()"
        }
    ],
    "dom-frameelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "frameElement",
            "slug": "API/Window/frameElement",
            "summary": "The Window.frameElement property returns the element (such as <iframe> or <object>) in which the window is embedded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.frameElement"
        }
    ],
    "dom-frames": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "frames",
            "slug": "API/Window/frames",
            "summary": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.frames"
        }
    ],
    "event-hashchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "hashchange_event",
            "slug": "API/Window/hashchange_event",
            "summary": "The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: hashchange event"
        }
    ],
    "event-languagechange": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Window.json",
            "name": "languagechange_event",
            "slug": "API/Window/languagechange_event",
            "summary": "The languagechange event is fired at the global scope object when the user's preferred language changes.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: languagechange event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "languagechange_event",
            "slug": "API/WorkerGlobalScope/languagechange_event",
            "summary": "The languagechange event is fired at the global scope object when the user's preferred language changes.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: languagechange event"
        }
    ],
    "dom-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "length",
            "slug": "API/Window/length",
            "summary": "Returns the number of frames (either <frame> or <iframe> elements) in the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.length"
        }
    ],
    "delay-the-load-event": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "load_event",
            "slug": "API/Window/load_event",
            "summary": "The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets and images. This is in contrast to DOMContentLoaded, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: load event"
        }
    ],
    "dom-localstorage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "localStorage",
            "slug": "API/Window/localStorage",
            "summary": "The read-only localStorage property allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.localStorage"
        }
    ],
    "dom-window-locationbar": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "locationbar",
            "slug": "API/Window/locationbar",
            "summary": "Returns the locationbar object, whose visibility can be checked.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.locationbar"
        }
    ],
    "dom-window-menubar": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "menubar",
            "slug": "API/Window/menubar",
            "summary": "The Window.menubar property returns the menubar object, whose visibility can be checked.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.menubar"
        }
    ],
    "dom-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "name",
            "slug": "API/Window/name",
            "summary": "The Window.name property gets/sets the name of the window's browsing context.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "From Firefox 82, if a new page from another domain is loaded into a tab, then <code>window.name</code> is set to the empty string (the original string is restored if the tab reverts back to the original page). This change prevents some cross-site attacks. See <a href='https://bugzil.la/444222'>bug 444222</a>."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "From Firefox 82, if a new page from another domain is loaded into a tab, then <code>window.name</code> is set to the empty string (the original string is restored if the tab reverts back to the original page). This change prevents some cross-site attacks. See <a href='https://bugzil.la/444222'>bug 444222</a>."
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.name"
        }
    ],
    "dom-navigator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "navigator",
            "slug": "API/Window/navigator",
            "summary": "The Window.navigator read-only property returns a reference to the Navigator object, which has methods and properties about the application running the script.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.navigator"
        }
    ],
    "event-offline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "offline_event",
            "slug": "API/Window/offline_event",
            "summary": "The offline event of the Window interface is fired when the browser has lost access to the network and the value of Navigator.onLine switches to false.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Window: offline event"
        }
    ],
    "event-online": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "online_event",
            "slug": "API/Window/online_event",
            "summary": "The online event of the Window interface is fired when the browser has gained access to the network and the value of Navigator.onLine switches to true.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Window: online event"
        }
    ],
    "dom-open": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "open",
            "slug": "API/Window/open",
            "summary": "The Window interface's open() method loads the specified resource into the new or existing browsing context (window, <iframe> or tab) with the specified name. If the name doesn't exist, then a new browsing context is opened in a new tab or a new window, and the specified resource is loaded into it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.open()"
        }
    ],
    "dom-opener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "opener",
            "slug": "API/Window/opener",
            "summary": "The Window interface's opener property returns a reference to the window that opened the window, either with open(), or by navigating a link with a target attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.opener"
        }
    ],
    "event-pagehide": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "pagehide_event",
            "slug": "API/Window/pagehide_event",
            "summary": "The pagehide event is sent to a Window when the browser hides the current page in the process of presenting a different page from the session's history.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: pagehide event"
        }
    ],
    "event-pageshow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "pageshow_event",
            "slug": "API/Window/pageshow_event",
            "summary": "The pageshow event is sent to a Window when the browser displays the window's document due to navigation.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "page-transition-events",
                "title": "PageTransitionEvent"
            },
            "title": "Window: pageshow event"
        }
    ],
    "dom-parent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "parent",
            "slug": "API/Window/parent",
            "summary": "The Window.parent property is a reference to the parent of the current window or subframe.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.parent"
        }
    ],
    "dom-window-personalbar": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "personalbar",
            "slug": "API/Window/personalbar",
            "summary": "Returns the personalbar object, whose visibility can be toggled in the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.personalbar"
        }
    ],
    "event-popstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "popstate_event",
            "slug": "API/Window/popstate_event",
            "summary": "The popstate event of the Window interface is fired when the active history entry changes while the user navigates the session history. It changes the current history entry to that of the last page the user visited or, if history.pushState() has been used to add a history entry to the history stack, that history entry is used instead.",
            "support": {
                "chrome": {
                    "version_added": "5",
                    "notes": "Before version 34, Chrome would fire a <code>popstate</code> event on page load."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Before version 34, Chrome would fire a <code>popstate</code> event on page load."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Firefox emits a <code>popstate</code> event on page load."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Firefox emits a <code>popstate</code> event on page load."
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "6",
                    "notes": "Before version 10, Safari would fire a <code>popstate</code> event on page load."
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "notes": "Before version 10, Safari would fire a <code>popstate</code> event on page load."
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before version 2.0, Samsung Internet would fire a <code>popstate</code> event on page load."
                },
                "webview_android": {
                    "version_added": "37",
                    "notes": "Before version 37, WebView would fire a <code>popstate</code> event on page load."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before version 34, Chrome would fire a <code>popstate</code> event on page load."
                }
            },
            "title": "Window: popstate event"
        }
    ],
    "dom-window-postmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "postMessage",
            "slug": "API/Window/postMessage",
            "summary": "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "8",
                        "notes": "Supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons."
                    },
                    {
                        "version_added": "6",
                        "notes": "The <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself."
                    },
                    {
                        "version_added": "3",
                        "version_removed": "6",
                        "notes": "The <code>message</code> parameter must be a string."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "8",
                        "notes": "Supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons."
                    },
                    {
                        "version_added": "6",
                        "notes": "The <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "6",
                        "notes": "The <code>message</code> parameter must be a string."
                    }
                ],
                "ie": [
                    {
                        "version_added": "10",
                        "notes": "IE10 had an important limitation: see this <a href='https://stackoverflow.com/questions/16226924/is-cross-origin-postmessage-broken-in-ie10'>article</a> for details."
                    },
                    {
                        "version_added": "8",
                        "version_removed": "10",
                        "notes": "Support only for <code>&lt;frame&gt;</code> and <code>&lt;iframe&gt;</code>."
                    }
                ],
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.postMessage()"
        }
    ],
    "printing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "print",
            "slug": "API/Window/print",
            "summary": "Opens the Print Dialog to print the current document.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/1247609'>bug 1247609</a>."
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "6",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Starting with Samsung Internet 5.0, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Starting with WebView 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "caniuse": {
                "feature": "beforeafterprint",
                "title": "Printing Events"
            },
            "title": "Window.print()"
        }
    ],
    "dom-prompt": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "prompt",
            "slug": "API/Window/prompt",
            "summary": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4",
                    "notes": "This function has no effect in the Modern UI/Metro version of Internet Explorer for Windows 8. It does not display a prompt to the user, and always returns <code>undefined</code>. It is not clear whether this is a bug or intended behavior. Desktop versions of IE do implement this function."
                },
                "opera": {
                    "version_added": "3",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Starting with Samsung Internet 5.0, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "webview_android": {
                    "version_added": "1",
                    "notes": "Starting with WebView 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "title": "Window.prompt()"
        }
    ],
    "unhandled-promise-rejections": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/Window.json",
            "name": "rejectionhandled_event",
            "slug": "API/Window/rejectionhandled_event",
            "summary": "The rejectionhandled event is sent to the script's global scope (usually window but also Worker) whenever a JavaScript Promise is rejected but after the promise rejection has been handled.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": {
                    "version_added": "68",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.promise_rejection_events.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "unhandledrejection",
                "title": "unhandledrejection/rejectionhandled events"
            },
            "title": "Window: rejectionhandled event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/Window.json",
            "name": "unhandledrejection_event",
            "slug": "API/Window/unhandledrejection_event",
            "summary": "The unhandledrejection event is sent to the global scope of a script when a JavaScript Promise that has no rejection handler is rejected; typically, this is the window, but may also be a Worker.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": {
                    "version_added": "68",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.promise_rejection_events.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "unhandledrejection",
                "title": "unhandledrejection/rejectionhandled events"
            },
            "title": "Window: unhandledrejection event"
        }
    ],
    "animation-frames": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "requestAnimationFrame",
            "slug": "API/Window/requestAnimationFrame",
            "summary": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation before the next repaint. The method takes a callback as an argument to be invoked before the repaint.",
            "support": {
                "chrome": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "10",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "25"
                    },
                    {
                        "version_added": "18",
                        "prefix": "webkit"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "23",
                        "notes": "Callback parameter is a <code>DOMHighResTimestamp</code>. This means ten microsecond precision and zero time as <code>performance.now()</code>."
                    },
                    {
                        "version_added": "11",
                        "version_removed": "42",
                        "prefix": "moz",
                        "notes": "Callback parameter is a <code>DOMTimestamp</code>. This means millisecond precision and zero time as <code>Date.now()</code>."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "11",
                        "prefix": "moz",
                        "notes": "Could be called with no input parameters."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "14",
                        "version_removed": "42",
                        "prefix": "moz"
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": [
                    {
                        "version_added": "15"
                    },
                    {
                        "version_added": "15",
                        "prefix": "webkit"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "14"
                    },
                    {
                        "version_added": "14",
                        "prefix": "webkit"
                    }
                ],
                "safari": [
                    {
                        "version_added": "6.1"
                    },
                    {
                        "version_added": "6",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6.1",
                        "prefix": "webkit"
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": "1.5"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "1.0"
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "37"
                    },
                    {
                        "version_added": "37",
                        "prefix": "webkit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "prefix": "webkit"
                    }
                ]
            },
            "caniuse": {
                "feature": "requestanimationframe",
                "title": "requestAnimationFrame"
            },
            "title": "Window.requestAnimationFrame()"
        }
    ],
    "dom-window-scrollbars": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "scrollbars",
            "slug": "API/Window/scrollbars",
            "summary": "The Window.scrollbars property returns the scrollbars object, whose visibility can be checked.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.scrollbars"
        }
    ],
    "dom-self": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "self",
            "slug": "API/Window/self",
            "summary": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.self"
        }
    ],
    "dom-sessionstorage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "sessionStorage",
            "slug": "API/Window/sessionStorage",
            "summary": "The read-only sessionStorage property accesses a session Storage object for the current origin. sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.sessionStorage"
        }
    ],
    "dom-window-status": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "status",
            "slug": "API/Window/status",
            "summary": "The status property of the Window interface was originally intended to set the text in the status bar at the bottom of the browser window. However, the HTML standard now requires setting window.status to have no effect on the text displayed in the status bar.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.status"
        }
    ],
    "dom-window-statusbar": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "statusbar",
            "slug": "API/Window/statusbar",
            "summary": "The Window.statusbar property returns the statusbar object, whose visibility can be toggled in the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.statusbar"
        }
    ],
    "dom-window-stop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "stop",
            "slug": "API/Window/stop",
            "summary": "The window.stop() stops further resource loading in the current browsing context, equivalent to the stop button in the browser.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.stop()"
        }
    ],
    "event-storage": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Window.json",
            "name": "storage_event",
            "slug": "API/Window/storage_event",
            "summary": "The storage event of the Window interface fires when a storage area (localStorage) has been modified in the context of another document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: storage event"
        }
    ],
    "dom-window-toolbar": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "toolbar",
            "slug": "API/Window/toolbar",
            "summary": "The Window.toolbar property returns the toolbar object, whose visibility can be toggled in the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.toolbar"
        }
    ],
    "dom-top": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "top",
            "slug": "API/Window/top",
            "summary": "Returns a reference to the topmost window in the window hierarchy.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting in Firefox 6, this property is read only, as defined by the standard."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.top"
        }
    ],
    "event-unload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "unload_event",
            "slug": "API/Window/unload_event",
            "summary": "The unload event is fired when the document or a child resource is being unloaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: unload event"
        }
    ],
    "dom-window": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "window",
            "slug": "API/Window/window",
            "summary": "The window property of a Window object points to the window object itself.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window.window"
        }
    ],
    "the-window-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "Window",
            "slug": "API/Window",
            "summary": "The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window"
        }
    ],
    "handler-window-onafterprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onafterprint",
            "slug": "API/WindowEventHandlers/onafterprint",
            "summary": "The onafterprint property of the WindowEventHandlers mixin is the EventHandler for processing afterprint events for the current window. These events are raised after the user prints, or if they abort the print dialog.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": {
                    "version_added": "63"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "50"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": {
                    "version_added": "13"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "63"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onafterprint"
        }
    ],
    "handler-window-onbeforeprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onbeforeprint",
            "slug": "API/WindowEventHandlers/onbeforeprint",
            "summary": "The onbeforeprint property of the WindowEventHandlers mixin is the EventHandler for processing beforeprint events for the current window. These events are raised before the print dialog window is opened.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": {
                    "version_added": "63"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "50"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": {
                    "version_added": "13"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "63"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onbeforeprint"
        }
    ],
    "handler-window-onbeforeunload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onbeforeunload",
            "slug": "API/WindowEventHandlers/onbeforeunload",
            "summary": "The onbeforeunload property of the WindowEventHandlers mixin is the EventHandler for processing beforeunload events. These events fire when a window is about to unload its resources. At this point, the document is still visible and the event is still cancelable.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onbeforeunload"
        }
    ],
    "handler-window-onhashchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onhashchange",
            "slug": "API/WindowEventHandlers/onhashchange",
            "summary": "The WindowEventHandlers.onhashchange property of the WindowEventHandlers mixin is the EventHandler for processing hashchange events.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onhashchange"
        }
    ],
    "handler-window-onlanguagechange": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onlanguagechange",
            "slug": "API/WindowEventHandlers/onlanguagechange",
            "summary": "The onlanguagechange property of the WindowEventHandlers mixin is the EventHandler for processing languagechange events.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onlanguagechange"
        }
    ],
    "handler-window-onmessage": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onmessage",
            "slug": "API/WindowEventHandlers/onmessage",
            "summary": "The onmessage property of the WindowEventHandlers mixin is the EventHandler called whenever an object receives a message event.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onmessage"
        }
    ],
    "handler-window-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onmessageerror",
            "slug": "API/WindowEventHandlers/onmessageerror",
            "summary": "The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window—that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onmessageerror"
        }
    ],
    "handler-window-onpopstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onpopstate",
            "slug": "API/WindowEventHandlers/onpopstate",
            "summary": "The onpopstate property of the WindowEventHandlers mixin is the EventHandler for processing popstate events on the window.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onpopstate"
        }
    ],
    "handler-window-onrejectionhandled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onrejectionhandled",
            "slug": "API/WindowEventHandlers/onrejectionhandled",
            "summary": "The onrejectionhandled property of the WindowEventHandlers mixin is the EventHandler for processing rejectionhandled events. These events are raised when Promises are rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": "55",
                        "partial_implementation": true,
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "This event handler was added in Firefox 55 but was disabled since it wasn't fully implemented. It was fully implemented in Firefox 68 and enabled by default in Firefox 69."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": "55",
                        "partial_implementation": true,
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "This event handler was added in Firefox 55 but was disabled since it wasn't fully implemented. It was fully implemented in Firefox 68 but not enabled by default."
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onrejectionhandled"
        }
    ],
    "handler-window-onstorage": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onstorage",
            "slug": "API/WindowEventHandlers/onstorage",
            "summary": "The onstorage property of the WindowEventHandlers mixin is an EventHandler for processing storage events.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onstorage"
        }
    ],
    "handler-window-onunhandledrejection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onunhandledrejection",
            "slug": "API/WindowEventHandlers/onunhandledrejection",
            "summary": "The onunhandledrejection property of the WindowEventHandlers mixin is the EventHandler for processing unhandledrejection events. These events are raised for unhandled Promise rejections.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "69"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": "55",
                        "partial_implementation": true,
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "This event handler was added in Firefox 55 but was disabled since it wasn't fully implemented. It was fully implemented in Firefox 68 and enabled by default in Firefox 69."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": "55",
                        "partial_implementation": true,
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.promise_rejection_events.enabled",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "This event handler was added in Firefox 55 but was disabled since it wasn't fully implemented. It was fully implemented in Firefox 68 but not enabled by default."
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowEventHandlers.onunhandledrejection"
        }
    ],
    "handler-window-onunload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "onunload",
            "slug": "API/WindowEventHandlers/onunload",
            "summary": "The onunload property of the WindowEventHandlers mixin is the EventHandler for processing unload events. These events fire when the window is unloading its content and resources. The resource removal is processed after the unload event occurs.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WindowEventHandlers.onunload"
        }
    ],
    "windoweventhandlers": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowEventHandlers.json",
            "name": "WindowEventHandlers",
            "slug": "API/WindowEventHandlers",
            "summary": "The WindowEventHandlers mixin describes the event handlers common to several interfaces like Window, or HTMLBodyElement and HTMLFrameSetElement. Each of these interfaces can implement additional specific event handlers.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "WindowEventHandlers"
        }
    ],
    "dom-atob": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "atob",
            "slug": "API/WindowOrWorkerGlobalScope/atob",
            "summary": "The WindowOrWorkerGlobalScope.atob() function decodes a string of data which has been encoded using Base64 encoding. You can use the btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "27",
                        "notes": "<code>atob()</code> ignores all space characters in the argument to comply with the latest HTML5 spec (see <a href='https://bugzil.la/711180'>bug 711180</a>)."
                    },
                    {
                        "version_added": "57",
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "27",
                        "notes": "<code>atob()</code> ignores all space characters in the argument to comply with the latest HTML5 spec (see <a href='https://bugzil.la/711180'>bug 711180</a>)."
                    },
                    {
                        "version_added": "57",
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.atob()"
        }
    ],
    "dom-btoa": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "btoa",
            "slug": "API/WindowOrWorkerGlobalScope/btoa",
            "summary": "The WindowOrWorkerGlobalScope.btoa() method creates a Base64-encoded ASCII string from a binary string (i.e., a String object in which each character in the string is treated as a byte of binary data).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>btoa()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.btoa()"
        }
    ],
    "dom-clearinterval": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "clearInterval",
            "slug": "API/WindowOrWorkerGlobalScope/clearInterval",
            "summary": "The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4",
                    "notes": "From Internet Explorer 4 through 8, <code>clearInterval</code> is an Object rather than a Function. This behavior was fixed in Internet Explorer 9."
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": "Takes a <code>Timeout</code> object instead of the <code>intervalID</code>."
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearInterval()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "clearInterval",
            "slug": "API/WindowOrWorkerGlobalScope/clearInterval",
            "summary": "The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4",
                    "notes": "From Internet Explorer 4 through 8, <code>clearInterval</code> is an Object rather than a Function. This behavior was fixed in Internet Explorer 9."
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": "Takes a <code>Timeout</code> object instead of the <code>intervalID</code>."
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearInterval()"
        }
    ],
    "dom-cleartimeout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "clearTimeout",
            "slug": "API/WindowOrWorkerGlobalScope/clearTimeout",
            "summary": "The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout().",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4",
                    "notes": "From Internet Explorer 4 through 8, <code>clearTimeout</code> is an Object rather than a Function. This behavior was fixed in Internet Explorer 9."
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": "Takes a <code>Timeout</code> object instead of the <code>timeoutID</code>."
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearTimeout()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "clearTimeout",
            "slug": "API/WindowOrWorkerGlobalScope/clearTimeout",
            "summary": "The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout().",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4",
                    "notes": "From Internet Explorer 4 through 8, <code>clearTimeout</code> is an Object rather than a Function. This behavior was fixed in Internet Explorer 9."
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": "Takes a <code>Timeout</code> object instead of the <code>timeoutID</code>."
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "45"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearTimeout()"
        }
    ],
    "dom-createimagebitmap": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "createImageBitmap",
            "slug": "API/WindowOrWorkerGlobalScope/createImageBitmap",
            "summary": "The createImageBitmap() method creates a bitmap from a given source, optionally cropped to contain only a portion of that source. The method exists on the global scope in both windows and workers. It accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "52",
                        "notes": "<code>createImageBitmap()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    },
                    {
                        "version_added": "42"
                    }
                ],
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "createimagebitmap",
                "title": "createImageBitmap"
            },
            "title": "self.createImageBitmap()"
        }
    ],
    "dom-crossoriginisolated": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "crossOriginIsolated",
            "slug": "API/WindowOrWorkerGlobalScope/crossOriginIsolated",
            "summary": "The crossOriginIsolated read-only property of the WindowOrWorkerGlobalScope interface returns a boolean value that indicates whether a SharedArrayBuffer can be sent via a Window.postMessage() call.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "WindowOrWorkerGlobalScope.crossOriginIsolated"
        }
    ],
    "dom-origin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "origin",
            "slug": "API/WindowOrWorkerGlobalScope/origin",
            "summary": "The origin read-only property of the WindowOrWorkerGlobalScope interface returns the origin of the global scope, serialized as a string.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": {
                    "version_added": "59"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "54"
                },
                "firefox_android": {
                    "version_added": "54"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11"
                },
                "samsunginternet_android": {
                    "version_added": "7.0"
                },
                "webview_android": {
                    "version_added": "59"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.origin"
        }
    ],
    "microtask-queuing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "queueMicrotask",
            "slug": "API/WindowOrWorkerGlobalScope/queueMicrotask",
            "summary": "The queueMicrotask() method, which is exposed on the Window or Worker interface, queues a microtask to be executed at a safe time prior to control returning to the browser's event loop.",
            "support": {
                "chrome": {
                    "version_added": "71"
                },
                "chrome_android": {
                    "version_added": "71"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "11.0.0"
                },
                "opera": {
                    "version_added": "58"
                },
                "opera_android": {
                    "version_added": "50"
                },
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": {
                    "version_added": "12.2"
                },
                "samsunginternet_android": {
                    "version_added": "10.0"
                },
                "webview_android": {
                    "version_added": "71"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.queueMicrotask()"
        }
    ],
    "dom-setinterval": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "setInterval",
            "slug": "API/WindowOrWorkerGlobalScope/setInterval",
            "summary": "The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": "30"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": [
                        "Returns a <code>Timeout</code> object instead of the <code>intervalID</code>.",
                        "Does not support passing a <code>code</code> string and throws when the first parameter is not a function."
                    ]
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setInterval()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "setInterval",
            "slug": "API/WindowOrWorkerGlobalScope/setInterval",
            "summary": "The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": "30"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": [
                        "Returns a <code>Timeout</code> object instead of the <code>intervalID</code>.",
                        "Does not support passing a <code>code</code> string and throws when the first parameter is not a function."
                    ]
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setInterval()"
        }
    ],
    "dom-settimeout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "setTimeout",
            "slug": "API/WindowOrWorkerGlobalScope/setTimeout",
            "summary": "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to Window.setTimeout()) sets a timer which executes a function or specified piece of code once the timer expires.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": "30"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": [
                        "Returns a <code>Timeout</code> object instead of the <code>timeoutID</code>.",
                        "Does not support passing a <code>code</code> string and throws when the first parameter is not a function."
                    ]
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setTimeout()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "setTimeout",
            "slug": "API/WindowOrWorkerGlobalScope/setTimeout",
            "summary": "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to Window.setTimeout()) sets a timer which executes a function or specified piece of code once the timer expires.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": "30"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "52",
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": [
                        "Returns a <code>Timeout</code> object instead of the <code>timeoutID</code>.",
                        "Does not support passing a <code>code</code> string and throws when the first parameter is not a function."
                    ]
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setTimeout()"
        }
    ],
    "windoworworkerglobalscope-mixin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WindowOrWorkerGlobalScope.json",
            "name": "WindowOrWorkerGlobalScope",
            "slug": "API/WindowOrWorkerGlobalScope",
            "summary": "The WindowOrWorkerGlobalScope mixin describes several features common to the Window and WorkerGlobalScope interfaces.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WindowOrWorkerGlobalScope"
        }
    ],
    "dom-worker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "Worker",
            "slug": "API/Worker/Worker",
            "summary": "The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "partial_implementation": true,
                    "notes": "Takes an entirely different options object."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker()"
        }
    ],
    "handler-worker-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "onmessage",
            "slug": "API/Worker/onmessage",
            "summary": "The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker.onmessage"
        }
    ],
    "handler-worker-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Worker.json",
            "name": "onmessageerror",
            "slug": "API/Worker/onmessageerror",
            "summary": "The onmessageerror event handler of the Worker interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the Worker instance — that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "60"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker.onmessageerror"
        }
    ],
    "dom-worker-postmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "postMessage",
            "slug": "API/Worker/postMessage",
            "summary": "The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10",
                    "notes": "Internet Explorer does not support <code>Transferable</code> objects."
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Worker.prototype.postMessage()"
        }
    ],
    "dom-worker-terminate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "terminate",
            "slug": "API/Worker/terminate",
            "summary": "The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "notes": "Also takes an optional callback to be executed when the worker has terminated."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker.terminate()"
        }
    ],
    "worker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "Worker",
            "slug": "API/Worker",
            "summary": "The Worker interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules or ECMAScript modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "11.7.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "10.5.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ],
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker"
        }
    ],
    "dom-workerglobalscope-importscripts": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "importScripts",
            "slug": "API/WorkerGlobalScope/importScripts",
            "summary": "The importScripts() method of the WorkerGlobalScope interface synchronously imports one or more scripts into the worker's scope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.importScripts()"
        }
    ],
    "dom-workerglobalscope-location": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "location",
            "slug": "API/WorkerGlobalScope/location",
            "summary": "The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.location"
        }
    ],
    "dom-worker-navigator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "navigator",
            "slug": "API/WorkerGlobalScope/navigator",
            "summary": "The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.navigator"
        }
    ],
    "handler-workerglobalscope-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "onerror",
            "slug": "API/WorkerGlobalScope/onerror",
            "summary": "The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.onerror"
        }
    ],
    "handler-workerglobalscope-onlanguagechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "onlanguagechange",
            "slug": "API/WorkerGlobalScope/onlanguagechange",
            "summary": "The onlanguagechange property of the WorkerGlobalScope interface represents an EventHandler to be called when the languagechange event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.onlanguagechange"
        }
    ],
    "handler-workerglobalscope-onoffline": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "onoffline",
            "slug": "API/WorkerGlobalScope/onoffline",
            "summary": "The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.onoffline"
        }
    ],
    "handler-workerglobalscope-ononline": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "ononline",
            "slug": "API/WorkerGlobalScope/ononline",
            "summary": "The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.ononline"
        }
    ],
    "dom-workerglobalscope-self": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "self",
            "slug": "API/WorkerGlobalScope/self",
            "summary": "The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope,  SharedWorkerGlobalScope, or ServiceWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "34"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope.self"
        }
    ],
    "workerglobalscope": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "WorkerGlobalScope",
            "slug": "API/WorkerGlobalScope",
            "summary": "The WorkerGlobalScope interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope"
        }
    ],
    "workerlocation": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "WorkerLocation",
            "slug": "API/WorkerLocation",
            "summary": "The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation"
        }
    ],
    "workernavigator": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WorkerNavigator.json",
            "name": "WorkerNavigator",
            "slug": "API/WorkerNavigator",
            "summary": "The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerNavigator"
        }
    ],
    "selector-active": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/active.json",
            "name": "active",
            "slug": "CSS/:active",
            "summary": "The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":active"
        }
    ],
    "selector-checked": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/checked.json",
            "name": "checked",
            "slug": "CSS/:checked",
            "summary": "The :checked CSS pseudo-class selector represents any radio (<input type=\"radio\">), checkbox (<input type=\"checkbox\">), or option (<option> in a <select>) element that is checked or toggled to an on state.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "On macOS, styling <code>&lt;option&rt;</code> elements has no effect."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": [
                        "From Firefox 56, <code>&lt;option&rt;</code> elements cannot be styled.",
                        "On macOS, styling <code>&lt;option&rt;</code> elements has no effect."
                    ]
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "From Firefox 56, <code>&lt;option&rt;</code> elements cannot be styled."
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9",
                    "notes": "On macOS, styling <code>&lt;option&rt;</code> elements has no effect."
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "Styling <code>&lt;option&rt;</code> elements has no effect."
                },
                "safari_ios": {
                    "version_added": "3.1",
                    "notes": "Styling <code>&lt;option&rt;</code> elements has no effect."
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "On macOS, styling <code>&lt;option&rt;</code> elements has no effect."
                }
            },
            "title": ":checked"
        }
    ],
    "selector-default": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/default.json",
            "name": "default",
            "slug": "CSS/:default",
            "summary": "The :default CSS pseudo-class selects form elements that are the default in a group of related elements.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":default"
        }
    ],
    "selector-defined": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/defined.json",
            "name": "defined",
            "slug": "CSS/:defined",
            "summary": "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method).",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":defined"
        }
    ],
    "selector-ltr": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "css/selectors/dir.json",
            "name": "dir",
            "slug": "CSS/:dir",
            "summary": "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "49"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "17",
                        "version_removed": "53"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "49"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "17",
                        "version_removed": "53"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": ":dir()"
        }
    ],
    "selector-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/disabled.json",
            "name": "disabled",
            "slug": "CSS/:disabled",
            "summary": "The :disabled CSS pseudo-class represents any disabled element. An element is disabled if it can't be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has an enabled state, in which it can be activated or accept focus.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9",
                    "notes": "Internet Explorer does not recognize <code>:disabled</code> on the <a href='https://developer.mozilla.org/docs/Web/HTML/Element/fieldset'><code>&lt;fieldset&gt;</code></a> element."
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":disabled"
        }
    ],
    "selector-enabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/enabled.json",
            "name": "enabled",
            "slug": "CSS/:enabled",
            "summary": "The :enabled CSS pseudo-class represents any enabled element. An element is enabled if it can be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has a disabled state, in which it can't be activated or accept focus.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":enabled"
        }
    ],
    "selector-focus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/focus.json",
            "name": "focus",
            "slug": "CSS/:focus",
            "summary": "The :focus CSS pseudo-class represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's Tab key.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":focus"
        }
    ],
    "selector-hover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/hover.json",
            "name": "hover",
            "slug": "CSS/:hover",
            "summary": "The :hover CSS pseudo-class matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1",
                    "notes": "As of Safari for iOS 7.1.2, tapping a <a href='https://developer.mozilla.org/docs/Web/Events/click#Safari_Mobile'>clickable element</a> causes the element to enter the <code>:hover</code> state. The element will remain in the <code>:hover</code> state until a different element has entered the <code>:hover</code> state."
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":hover"
        }
    ],
    "selector-in-range": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/in-range.json",
            "name": "in-range",
            "slug": "CSS/:in-range",
            "summary": "The :in-range CSS pseudo-class represents an <input> element whose current value is within the range limits specified by the min and max attributes.",
            "support": {
                "chrome": {
                    "version_added": "10",
                    "notes": "Before Chrome 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Chrome 52, it was changed to only match enabled read-write inputs."
                },
                "chrome_android": {
                    "version_added": "18",
                    "notes": "Before Chrome 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Chrome 52, it was changed to only match enabled read-write inputs."
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "29",
                    "notes": "Before Firefox 50, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://bugzil.la/1264157'>bug 1264157</a>). In Firefox 50, it was changed to only match enabled read-write inputs."
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11",
                    "notes": "Before Opera 39, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Opera 39, it was changed to only match enabled read-write inputs."
                },
                "opera_android": {
                    "version_added": "11",
                    "notes": "Before Opera 39, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Opera 39, it was changed to only match enabled read-write inputs."
                },
                "safari": {
                    "version_added": "5.1",
                    "notes": "In Safari, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://webkit.org/b/156530'>bug 156530</a>). It was later changed to only match enabled read-write inputs."
                },
                "safari_ios": {
                    "version_added": "5",
                    "notes": "In Safari, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://webkit.org/b/156530'>bug 156530</a>). It was later changed to only match enabled read-write inputs."
                },
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before version 6.0, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In version 6.0, it was changed to only match enabled read-write inputs."
                },
                "webview_android": {
                    "version_added": "2.3",
                    "notes": "Before version 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In version 52, it was changed to only match enabled read-write inputs."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Chrome 52, it was changed to only match enabled read-write inputs."
                }
            },
            "title": ":in-range"
        }
    ],
    "selector-indeterminate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/indeterminate.json",
            "name": "indeterminate",
            "slug": "CSS/:indeterminate",
            "summary": "The :indeterminate CSS pseudo-class represents any form element whose state is indeterminate, such as checkboxes which have their HTML indeterminate attribute set to true, radio buttons which are members of a group in which all radio buttons are unchecked, and indeterminate <progress> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":indeterminate"
        }
    ],
    "selector-invalid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/invalid.json",
            "name": "invalid",
            "slug": "CSS/:invalid",
            "summary": "The :invalid CSS pseudo-class represents any <input> or other <form> element whose contents fail to validate.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":invalid"
        }
    ],
    "selector-link": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/link.json",
            "name": "link",
            "slug": "CSS/:link",
            "summary": "The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited <a>, <area>, or <link> element that has an href attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "3"
                },
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1.5"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":link"
        }
    ],
    "selector-optional": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/optional.json",
            "name": "optional",
            "slug": "CSS/:optional",
            "summary": "The :optional CSS pseudo-class represents any <input>, <select>, or <textarea> element that does not have the required attribute set on it.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":optional"
        }
    ],
    "selector-out-of-range": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/out-of-range.json",
            "name": "out-of-range",
            "slug": "CSS/:out-of-range",
            "summary": "The :out-of-range CSS pseudo-class represents an <input> element whose current value is outside the range limits specified by the min and max attributes.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":out-of-range"
        }
    ],
    "selector-read-only": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "prefixed": [
                "gecko"
            ],
            "filename": "css/selectors/read-only.json",
            "name": "read-only",
            "slug": "CSS/:read-only",
            "summary": "The :read-only CSS pseudo-class represents an element (such as input or textarea) that is not editable by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "78"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "1.5"
                    }
                ],
                "firefox_android": {
                    "prefix": "-moz-",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "css-read-only-write",
                "title": "CSS :read-only and :read-write selectors"
            },
            "title": ":read-only"
        }
    ],
    "selector-read-write": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "prefixed": [
                "gecko"
            ],
            "filename": "css/selectors/read-write.json",
            "name": "read-write",
            "slug": "CSS/:read-write",
            "summary": "The :read-write CSS pseudo-class represents an element (such as input or textarea) that is editable by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "78"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "1.5"
                    }
                ],
                "firefox_android": {
                    "prefix": "-moz-",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":read-write"
        }
    ],
    "selector-required": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/required.json",
            "name": "required",
            "slug": "CSS/:required",
            "summary": "The :required CSS pseudo-class represents any <input>, <select>, or <textarea> element that has the required attribute set on it.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":required"
        }
    ],
    "selector-target": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/target.json",
            "name": "target",
            "slug": "CSS/:target",
            "summary": "The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":target"
        }
    ],
    "selector-valid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/valid.json",
            "name": "valid",
            "slug": "CSS/:valid",
            "summary": "The :valid CSS pseudo-class represents any <input> or other <form> element whose contents validate successfully. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":valid"
        }
    ],
    "selector-visited": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/visited.json",
            "name": "visited",
            "slug": "CSS/:visited",
            "summary": "The :visited CSS pseudo-class represents links that the user has already visited. For privacy reasons, the styles that can be modified using this selector are very limited.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":visited"
        }
    ],
    "link-type-noopener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/a.json",
            "name": "noopener",
            "slug": "HTML/Link_types/noopener",
            "summary": "The noopener keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it — by not setting the Window.opener property on the opened window (it returns null).",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "52",
                    "notes": "Prior to Firefox 63, <code>rel=\"noopener\"</code> created windows with all features disabled by default. Starting with Firefox 63, these windows have the same features enabled by default as any other window."
                },
                "firefox_android": {
                    "version_added": "52",
                    "notes": "Prior to Firefox 63, <code>rel=\"noopener\"</code> created windows with all features disabled by default. Starting with Firefox 63, these windows have the same features enabled by default as any other window."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rel-noopener",
                "title": "rel=noopener"
            },
            "title": "Link types: noopener"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/area.json",
            "name": "noopener",
            "slug": "HTML/Link_types/noopener",
            "summary": "The noopener keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it — by not setting the Window.opener property on the opened window (it returns null).",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "52",
                    "notes": "Prior to Firefox 63, <code>rel=\"noopener\"</code> created windows with all features disabled by default. Starting with Firefox 63, these windows have the same features enabled by default as any other window."
                },
                "firefox_android": {
                    "version_added": "52",
                    "notes": "Prior to Firefox 63, <code>rel=\"noopener\"</code> created windows with all features disabled by default. Starting with Firefox 63, these windows have the same features enabled by default as any other window."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rel-noopener",
                "title": "rel=noopener"
            },
            "title": "Link types: noopener"
        }
    ],
    "link-type-noreferrer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/a.json",
            "name": "noreferrer",
            "slug": "HTML/Link_types/noreferrer",
            "summary": "The noreferrer keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser, when navigating to the target resource, to omit the Referer header and otherwise leak no referrer information — and additionally to behave as if the noopener keyword were also specified.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "Only supported in IE11 in later versions of Windows 10 (creators update). (Per caniuse.com.)"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rel-noreferrer",
                "title": "Link type \"noreferrer\""
            },
            "title": "Link types: noreferrer"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/area.json",
            "name": "noreferrer",
            "slug": "HTML/Link_types/noreferrer",
            "summary": "The noreferrer keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser, when navigating to the target resource, to omit the Referer header and otherwise leak no referrer information — and additionally to behave as if the noopener keyword were also specified.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "Only supported in IE11 in later versions of Windows 10 (creators update). (Per caniuse.com.)"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rel-noreferrer",
                "title": "Link type \"noreferrer\""
            },
            "title": "Link types: noreferrer"
        }
    ],
    "the-a-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/a.json",
            "name": "a",
            "slug": "HTML/Element/a",
            "summary": "The HTML <a> element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true,
                    "notes": "Starting with Firefox 41, &lt;a&gt; without <code>href</code> attribute is no longer classified as interactive content: clicking it inside &lt;label&gt; will activate labelled content (<a href='https://bugzil.la/1167816'>bug 1167816</a>)."
                },
                "firefox_android": {
                    "version_added": true,
                    "notes": "Starting with Firefox 41, &lt;a&gt; without <code>href</code> attribute is no longer classified as interactive content: clicking it inside &lt;label&gt; will activate labelled content (<a href='https://bugzil.la/1167816'>bug 1167816</a>)."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<a>: The Anchor element"
        }
    ],
    "the-abbr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/abbr.json",
            "name": "abbr",
            "slug": "HTML/Element/abbr",
            "summary": "The HTML Abbreviation element (<abbr>) represents an abbreviation or acronym; the optional title attribute can provide an expansion or description for the abbreviation.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "7"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<abbr>: The Abbreviation element"
        }
    ],
    "the-address-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/address.json",
            "name": "address",
            "slug": "HTML/Element/address",
            "summary": "The HTML <address> element indicates that the enclosed HTML provides contact information for a person or people, or for an organization.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<address>: The Contact Address element"
        }
    ],
    "the-area-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/area.json",
            "name": "area",
            "slug": "HTML/Element/area",
            "summary": "The HTML <area> tag defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hypertext link.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<area>"
        }
    ],
    "the-article-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/article.json",
            "name": "article",
            "slug": "HTML/Element/article",
            "summary": "The HTML <article> element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication).",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<article>: The Article Contents element"
        }
    ],
    "the-aside-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/aside.json",
            "name": "aside",
            "slug": "HTML/Element/aside",
            "summary": "The HTML <aside> element represents a portion of a document whose content is only indirectly related to the document's main content.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<aside>: The Aside element"
        }
    ],
    "the-audio-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/audio.json",
            "name": "audio",
            "slug": "HTML/Element/audio",
            "summary": "The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "For Firefox to play audio, the server must serve the file using the correct MIME type."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "For Firefox to play audio, the server must serve the file using the correct MIME type."
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "audio",
                "title": "Audio element"
            },
            "title": "<audio>: The Embed Audio element"
        }
    ],
    "the-b-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/b.json",
            "name": "b",
            "slug": "HTML/Element/b",
            "summary": "The HTML Bring Attention To element (<b>) is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<b>: The Bring Attention To element"
        }
    ],
    "the-base-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/base.json",
            "name": "base",
            "slug": "HTML/Element/base",
            "summary": "The HTML <base> element specifies the base URL to use for all relative URLs in a document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true,
                    "notes": "Before Internet Explorer 7, <code>&lt;base&gt;</code> can be positioned anywhere in the document and the nearest value of <code>&lt;base&gt;</code> is used."
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<base>: The Document Base URL element"
        }
    ],
    "the-bdi-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/bdi.json",
            "name": "bdi",
            "slug": "HTML/Element/bdi",
            "summary": "The HTML Bidirectional Isolate element (<bdi>)  tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<bdi>: The Bidirectional Isolate element"
        }
    ],
    "the-bdo-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/bdo.json",
            "name": "bdo",
            "slug": "HTML/Element/bdo",
            "summary": "The HTML Bidirectional Text Override element (<bdo>) overrides the current directionality of text, so that the text within is rendered in a different direction.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<bdo>: The Bidirectional Text Override element"
        }
    ],
    "the-blockquote-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/blockquote.json",
            "name": "blockquote",
            "slug": "HTML/Element/blockquote",
            "summary": "The HTML <blockquote> Element (or HTML Block Quotation Element) indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the <cite> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<blockquote>: The Block Quotation element"
        }
    ],
    "the-body-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/body.json",
            "name": "body",
            "slug": "HTML/Element/body",
            "summary": "The HTML <body> Element represents the content of an HTML document. There can be only one <body> element in a document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<body>: The Document Body element"
        }
    ],
    "the-br-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/br.json",
            "name": "br",
            "slug": "HTML/Element/br",
            "summary": "The HTML <br> element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<br>: The Line Break element"
        }
    ],
    "the-button-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/button.json",
            "name": "button",
            "slug": "HTML/Element/button",
            "summary": "The HTML <button> element represents a clickable button, used to submit forms or anywhere in a document for accessible, standard button functionality.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<button>: The Button element"
        }
    ],
    "the-canvas-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/canvas.json",
            "name": "canvas",
            "slug": "HTML/Element/canvas",
            "summary": "Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5",
                    "notes": [
                        "Before Firefox 5, the canvas width and height were signed integers instead of unsigned integers.",
                        "Prior to Firefox 6, a &lt;canvas&gt; element with a zero width or height would be rendered as if it had default dimensions.",
                        "Before Firefox 12, if JavaScript is disabled, the &lt;canvas&gt; element was being rendered instead of showing the fallback content as per the specification. Since then, the fallback content is rendered instead."
                    ]
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": [
                        "Before Firefox 5, the canvas width and height were signed integers instead of unsigned integers.",
                        "Prior to Firefox 6, a &lt;canvas&gt; element with a zero width or height would be rendered as if it had default dimensions.",
                        "Before Firefox 12, if JavaScript is disabled, the &lt;canvas&gt; element was being rendered instead of showing the fallback content as per the specification. Since then, the fallback content is rendered instead."
                    ]
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2",
                    "notes": "Although early versions of Apple's Safari browser don't require the closing tag, the specification indicates that it is required, so you should be sure to include it for broadest compatibility. Versions of Safari prior to version 2 will render the content of the fallback in addition to the canvas itself unless you use CSS tricks to mask it."
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "canvas",
                "title": "Canvas (basic support)"
            },
            "title": "<canvas>: The Graphics Canvas element"
        }
    ],
    "the-caption-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/caption.json",
            "name": "caption",
            "slug": "HTML/Element/caption",
            "summary": "The HTML <caption> element specifies the caption (or title) of a table.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<caption>: The Table Caption element"
        }
    ],
    "the-cite-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/cite.json",
            "name": "cite",
            "slug": "HTML/Element/cite",
            "summary": "The HTML Citation element (<cite>) is used to describe a reference to a cited creative work, and must include the title of that work.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<cite>: The Citation element"
        }
    ],
    "the-code-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/code.json",
            "name": "code",
            "slug": "HTML/Element/code",
            "summary": "The HTML <code> element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<code>: The Inline Code element"
        }
    ],
    "the-col-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/col.json",
            "name": "col",
            "slug": "HTML/Element/col",
            "summary": "The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<col>"
        }
    ],
    "the-colgroup-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/colgroup.json",
            "name": "colgroup",
            "slug": "HTML/Element/colgroup",
            "summary": "The HTML <colgroup> element defines a group of columns within a table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<colgroup>"
        }
    ],
    "the-data-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/data.json",
            "name": "data",
            "slug": "HTML/Element/data",
            "summary": "The HTML <data> element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the <time> element must be used.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "49"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "62"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<data>"
        }
    ],
    "the-datalist-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/datalist.json",
            "name": "datalist",
            "slug": "HTML/Element/datalist",
            "summary": "The HTML <datalist> element contains a set of <option> elements that represent the permissible or recommended options available to choose from within other controls.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Since Firefox for Android 79, the dropdown menu containing available options does not appear. See <a href='https://bugzil.la/1535985'>bug 1535985</a>."
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": true,
                    "partial_implementation": true,
                    "notes": "The dropdown menu containing available options does not appear in Opera for Android."
                },
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": {
                    "version_added": "12.2"
                },
                "samsunginternet_android": {
                    "version_added": "2.0"
                },
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "datalist",
                "title": "Datalist element"
            },
            "title": "<datalist>: The HTML Data List element"
        }
    ],
    "the-dd-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dd.json",
            "name": "dd",
            "slug": "HTML/Element/dd",
            "summary": "The HTML <dd> element provides the description, definition, or value for the preceding term (<dt>) in a description list (<dl>).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element was implemented using the <code>HTMLSpanElement</code> interface instead of <code>HTMLElement</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<dd>: The Description Details element"
        }
    ],
    "the-del-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/del.json",
            "name": "del",
            "slug": "HTML/Element/del",
            "summary": "The HTML <del> element represents a range of text that has been deleted from a document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<del>: The Deleted Text element"
        }
    ],
    "the-details-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/details.json",
            "name": "details",
            "slug": "HTML/Element/details",
            "summary": "The HTML Details Element (<details>) creates a disclosure widget in which information is visible only when the widget is toggled into an \"open\" state.",
            "support": {
                "chrome": {
                    "version_added": "12"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "49",
                    "notes": "Before Firefox 57, there was a bug meaning that <code>&lt;details&gt;</code> elements can't be made open by default using the <code>open</code> attribute if they have a CSS <code>animation</code> active on them."
                },
                "firefox_android": {
                    "version_added": "49",
                    "notes": "There is a bug meaning that <code>&lt;details&gt;</code> elements can't be made open by default using the <code>open</code> attribute if they have a CSS <code>animation</code> active on them."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "details",
                "title": "Details & Summary elements"
            },
            "title": "<details>: The Details disclosure element"
        }
    ],
    "the-dfn-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dfn.json",
            "name": "dfn",
            "slug": "HTML/Element/dfn",
            "summary": "The HTML Definition element (<dfn>) is used to indicate the term being defined within the context of a definition phrase or sentence.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<dfn>: The Definition element"
        }
    ],
    "the-dialog-element": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "html/elements/dialog.json",
            "name": "dialog",
            "slug": "HTML/Element/dialog",
            "summary": "The HTML <dialog> element represents a dialog box or other interactive component, such as a dismissable alert, inspector, or subwindow.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "firefox_android": {
                    "version_added": "53",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.dialog_element.enabled",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "dialog",
                "title": "Dialog element"
            },
            "title": "<dialog>: The Dialog element"
        }
    ],
    "the-div-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/div.json",
            "name": "div",
            "slug": "HTML/Element/div",
            "summary": "The HTML Content Division element (<div>) is the generic container for flow content. It has no effect on the content or layout until styled using CSS.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<div>: The Content Division element"
        }
    ],
    "the-dl-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dl.json",
            "name": "dl",
            "slug": "HTML/Element/dl",
            "summary": "The HTML <dl> element represents a description list. The element encloses a list of groups of terms (specified using the <dt> element) and descriptions (provided by <dd> elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<dl>: The Description List element"
        }
    ],
    "the-dt-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dt.json",
            "name": "dt",
            "slug": "HTML/Element/dt",
            "summary": "The HTML <dt> element specifies a term in a description or definition list, and as such must be used inside a <dl> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<dt>: The Description Term element"
        }
    ],
    "the-em-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/em.json",
            "name": "em",
            "slug": "HTML/Element/em",
            "summary": "The HTML <em> element marks text that has stress emphasis. The <em> element can be nested, with each level of nesting indicating a greater degree of emphasis.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<em>: The Emphasis element"
        }
    ],
    "the-embed-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/embed.json",
            "name": "embed",
            "slug": "HTML/Element/embed",
            "summary": "The HTML <embed> element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<embed>: The Embed External Content element"
        }
    ],
    "the-fieldset-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/fieldset.json",
            "name": "fieldset",
            "slug": "HTML/Element/fieldset",
            "summary": "The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Does not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Does not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true,
                    "notes": "Does not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Does not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Does not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Does not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Does not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                }
            },
            "title": "<fieldset>: The Field Set element"
        }
    ],
    "the-figcaption-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/figcaption.json",
            "name": "figcaption",
            "slug": "HTML/Element/figcaption",
            "summary": "The HTML <figcaption> or Figure Caption element represents a caption or legend describing the rest of the contents of its parent <figure> element.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<figcaption>: The Figure Caption element"
        }
    ],
    "the-figure-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/figure.json",
            "name": "figure",
            "slug": "HTML/Element/figure",
            "summary": "The HTML <figure> (Figure With Optional Caption) element represents self-contained content, potentially with an optional caption, which is specified using the (<figcaption>) element.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<figure>: The Figure with Optional Caption element"
        }
    ],
    "the-footer-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/footer.json",
            "name": "footer",
            "slug": "HTML/Element/footer",
            "summary": "The HTML <footer> element represents a footer for its nearest sectioning content or sectioning root element. A footer typically contains information about the author of the section, copyright data or links to related documents.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<footer>"
        }
    ],
    "the-form-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/form.json",
            "name": "form",
            "slug": "HTML/Element/form",
            "summary": "The HTML <form> element represents a document section containing interactive controls for submitting information.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<form>"
        }
    ],
    "the-h1,-h2,-h3,-h4,-h5,-and-h6-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h1.json",
            "name": "h1",
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h2.json",
            "name": "h2",
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h3.json",
            "name": "h3",
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h4.json",
            "name": "h4",
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h5.json",
            "name": "h5",
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h6.json",
            "name": "h6",
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML <h1>–<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        }
    ],
    "the-head-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/head.json",
            "name": "head",
            "slug": "HTML/Element/head",
            "summary": "The HTML <head> element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<head>: The Document Metadata (Header) element"
        }
    ],
    "the-header-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/header.json",
            "name": "header",
            "slug": "HTML/Element/header",
            "summary": "The HTML <header> element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<header>"
        }
    ],
    "the-hgroup-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/hgroup.json",
            "name": "hgroup",
            "slug": "HTML/Element/hgroup",
            "summary": "The HTML <hgroup> element represents a multi-level heading for a section of a document. It groups a set of <h1>–<h6> elements.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "2.2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<hgroup>"
        }
    ],
    "the-hr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/hr.json",
            "name": "hr",
            "slug": "HTML/Element/hr",
            "summary": "The HTML <hr> element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<hr>: The Thematic Break (Horizontal Rule) element"
        }
    ],
    "the-html-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/html.json",
            "name": "html",
            "slug": "HTML/Element/html",
            "summary": "The HTML <html> element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<html>: The HTML Document / Root element"
        }
    ],
    "the-i-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/i.json",
            "name": "i",
            "slug": "HTML/Element/i",
            "summary": "The HTML Idiomatic Text element (<i>) represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<i>: The Idiomatic Text element"
        }
    ],
    "the-iframe-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/iframe.json",
            "name": "iframe",
            "slug": "HTML/Element/iframe",
            "summary": "The HTML Inline Frame element (<iframe>) represents a nested browsing context, embedding another HTML page into the current one.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true,
                    "notes": "The <code>resize</code> CSS property doesn't have any effect on this element due to <a href='https://bugzil.la/680823'>bug 680823</a>."
                },
                "firefox_android": {
                    "version_added": true,
                    "notes": "The <code>resize</code> CSS property doesn't have any effect on this element due to <a href='https://bugzil.la/680823'>bug 680823</a>."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true,
                    "notes": "Safari has a <a href='https://www.quirksmode.org/bugreports/archives/2005/02/hidden_iframes.html'>bug</a> that prevents iframes from loading if the <code>iframe</code> element was hidden when added to the page. <code>iframeElement.src = iframeElement.src</code> should cause it to load the iframe."
                },
                "safari_ios": {
                    "version_added": true,
                    "notes": "Safari has a <a href='https://www.quirksmode.org/bugreports/archives/2005/02/hidden_iframes.html'>bug</a> that prevents iframes from loading if the <code>iframe</code> element was hidden when added to the page. <code>iframeElement.src = iframeElement.src</code> should cause it to load the iframe."
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<iframe>: The Inline Frame element"
        }
    ],
    "lazy-loading-attributes": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/elements/img.json",
            "name": "loading",
            "slug": "Performance/Lazy_loading",
            "summary": "Lazy loading is a strategy to identify resources as non-blocking (non-critical) and load these only when needed. It's a way to shorten the length of the critical rendering path, which translates into reduced page load times.",
            "support": {
                "chrome": {
                    "version_added": "76"
                },
                "chrome_android": {
                    "version_added": "76"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/1542784'>bug 1542784</a>"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "63"
                },
                "opera_android": {
                    "version_added": "54"
                },
                "safari": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/196698'>bug 196698</a>"
                },
                "safari_ios": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/196698'>bug 196698</a>"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "loading-lazy-attr",
                "title": "Lazy loading via attribute for images & iframes"
            },
            "title": "Lazy loading"
        }
    ],
    "the-img-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/img.json",
            "name": "img",
            "slug": "HTML/Element/img",
            "summary": "The HTML <img> element embeds an image into the document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<img>: The Image Embed element"
        }
    ],
    "button-state-(type=button)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/button.json",
            "name": "input-button",
            "slug": "HTML/Element/input/button",
            "summary": "<input> elements of type button are rendered as simple push buttons, which can be programmed to control custom functionality anywhere on a webpage as required when assigned an event handler function (typically for the click event).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"button\">"
        }
    ],
    "checkbox-state-(type=checkbox)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/checkbox.json",
            "name": "input-checkbox",
            "slug": "HTML/Element/input/checkbox",
            "summary": "<input> elements of type checkbox are rendered by default as boxes that are checked (ticked) when activated, like you might see in an official government paper form. The exact appearance depends upon the operating system configuration under which the browser is running. Generally this is a square but it may have rounded corners. A checkbox allows you to select single values for submission in a form (or not).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<input type=\"checkbox\">"
        }
    ],
    "color-state-(type=color)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/color.json",
            "name": "input-color",
            "slug": "HTML/Element/input/color",
            "summary": "<input> elements of type color provide a user interface element that lets a user specify a color, either by using a visual color picker interface or by entering the color into a text field in #rrggbb hexadecimal format.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "29",
                    "notes": "Firefox doesn't yet support inputs of type <code>color</code> on Windows Touch."
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": {
                    "version_added": "12.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-color",
                "title": "Color input type"
            },
            "title": "<input type=\"color\">"
        }
    ],
    "date-state-(type=date)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/date.json",
            "name": "input-date",
            "slug": "HTML/Element/input/date",
            "summary": "<input> elements of type=\"date\" create input fields that let the user enter a date, either with a textbox that validates the input or a special date picker interface.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": false,
                    "notes": "The input type is recognized, but there is no date-specific control. See <a href='https://webkit.org/b/119175'>bug 119175</a>."
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-datetime",
                "title": "Date and time input types"
            },
            "title": "<input type=\"date\">"
        }
    ],
    "local-date-and-time-state-(type=datetime-local)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/datetime-local.json",
            "name": "input-datetime-local",
            "slug": "HTML/Element/input/datetime-local",
            "summary": "<input> elements of type datetime-local create input controls that let the user easily enter both a date and a time, including the year, month, and day as well as the time in hours and minutes.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a> and <a href='https://wiki.mozilla.org/TPE_DOM/Date_time_input_types'>TPE DOM/Date time input types</a>."
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": false,
                    "notes": "The input type is recognized, but there is no date-specific control. See <a href='https://webkit.org/b/200416'>bug 200416</a>."
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"datetime-local\">"
        }
    ],
    "email-state-(type=email)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/email.json",
            "name": "input-email",
            "slug": "HTML/Element/input/email",
            "summary": "<input> elements of type email are used to let the user enter and edit an e-mail address, or, if the multiple attribute is specified, a list of e-mail addresses.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": "3.1",
                    "notes": [
                        "Doesn't do validation, but instead offers a custom 'email' keyboard, which is designed to make entering email addresses easier.",
                        "The custom 'email' keyboard does not provide a comma key, so users cannot enter multiple email addresses.",
                        "Automatically applies a default style of <code>opacity: 0.4</code> to disable textual <code>&lt;input&gt;</code> elements, including those of type 'email'. Other major browsers don't currently share this particular default style."
                    ]
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"email\">"
        }
    ],
    "file-upload-state-(type=file)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/file.json",
            "name": "input-file",
            "slug": "HTML/Element/input/file",
            "summary": "<input> elements with type=\"file\" let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "You can set as well as get the value of <code>HTMLInputElement.files</code> in all modern browsers; this was most recently added to Firefox, in version 57 (see <a href='https://bugzil.la/1384030'>bug 1384030</a>)."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"file\">"
        }
    ],
    "hidden-state-(type=hidden)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/hidden.json",
            "name": "input-hidden",
            "slug": "HTML/Element/input/hidden",
            "summary": "<input> elements of type hidden let web developers include data that cannot be seen or modified by users when a form is submitted. For example, the ID of the content that is currently being ordered or edited, or a unique security token. Hidden inputs are completely invisible in the rendered page, and there is no way to make it visible in the page's content.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"hidden\">"
        }
    ],
    "image-button-state-(type=image)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/image.json",
            "name": "input-image",
            "slug": "HTML/Element/input/image",
            "summary": "<input> elements of type image are used to create graphical submit buttons, i.e. submit buttons that take the form of an image rather than text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<input type=\"image\">"
        }
    ],
    "the-input-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/input.json",
            "name": "input",
            "slug": "HTML/Element/input",
            "summary": "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<input>: The Input (Form Input) element"
        },
        {
            "engines": [],
            "filename": null,
            "name": "input",
            "slug": "HTML/Element/input",
            "summary": "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. ",
            "support": null,
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "month-state-(type=month)": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "html/elements/input/month.json",
            "name": "input-month",
            "slug": "HTML/Element/input/month",
            "summary": "<input> elements of type month create input fields that let the user enter a month and year allowing a month and year to be easily entered. The value is a string whose value is in the format \"YYYY-MM\", where YYYY is the four-digit year and MM is the month number.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a>."
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false,
                    "notes": "The input type is recognized, but there is no month-specific control. See <a href='https://webkit.org/b/200416'>bug 200416</a>."
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"month\">"
        }
    ],
    "number-state-(type=number)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/number.json",
            "name": "input-number",
            "slug": "HTML/Element/input/number",
            "summary": "<input> elements of type number are used to let the user enter a number. They include built-in validation to reject non-numerical entries.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "input-number",
                "title": "Number input type"
            },
            "title": "<input type=\"number\">"
        }
    ],
    "password-state-(type=password)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/password.json",
            "name": "input-password",
            "slug": "HTML/Element/input/password",
            "summary": "<input> elements of type password provide a way for the user to securely enter a password.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "2"
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"password\">"
        }
    ],
    "radio-button-state-(type=radio)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/radio.json",
            "name": "input-radio",
            "slug": "HTML/Element/input/radio",
            "summary": "<input> elements of type radio are generally used in radio groups—collections of radio buttons describing a set of related options.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<input type=\"radio\">"
        }
    ],
    "range-state-(type=range)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/range.json",
            "name": "input-range",
            "slug": "HTML/Element/input/range",
            "summary": "<input> elements of type range let the user specify a numeric value which must be no less than a given value, and no more than another given value. The precise value, however, is not considered important. This is typically represented using a slider or dial control rather than a text entry box like the number input type.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "57"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "7.0"
                },
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "2",
                        "version_removed": "4.4",
                        "partial_implementation": true,
                        "notes": "Pre-Chromium Android WebView recognizes the <code>range</code> type, but doesn't implement a range-specific control."
                    }
                ],
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-range",
                "title": "Range input type"
            },
            "title": "<input type=\"range\">"
        }
    ],
    "reset-button-state-(type=reset)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/reset.json",
            "name": "input-reset",
            "slug": "HTML/Element/input/reset",
            "summary": "<input> elements of type reset are rendered as buttons, with a default click event handler that resets all of the inputs in the form to their initial values.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code>&lt;button&gt;</code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code>&lt;button&gt;</code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"reset\">"
        }
    ],
    "text-(type=text)-state-and-search-state-(type=search)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/search.json",
            "name": "input-search",
            "slug": "HTML/Element/input/search",
            "summary": "<input> elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent. ",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-search",
                "title": "Search input type"
            },
            "title": "<input type=\"search\">"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/text.json",
            "name": "input-text",
            "slug": "HTML/Element/input/text",
            "summary": "<input> elements of type text create basic single-line text fields.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-search",
                "title": "Search input type"
            },
            "title": "<input type=\"text\">"
        }
    ],
    "submit-button-state-(type=submit)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/submit.json",
            "name": "input-submit",
            "slug": "HTML/Element/input/submit",
            "summary": "<input> elements of type submit are rendered as buttons. When the click event occurs (typically because the user clicked the button), the user agent attempts to submit the form to the server.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code><button></code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code><button></code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"submit\">"
        }
    ],
    "telephone-state-(type=tel)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/tel.json",
            "name": "input-tel",
            "slug": "HTML/Element/input/tel",
            "summary": "<input> elements of type tel are used to let the user enter and edit a telephone number. Unlike <input type=\"email\"> and <input type=\"url\"> , the input value is not automatically validated to a particular format before the form can be submitted, because formats for telephone numbers vary so much around the world.",
            "support": {
                "chrome": {
                    "version_added": "3",
                    "notes": "The field type doesn't demonstrate any special behavior."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4",
                    "notes": "The field type doesn't demonstrate any special behavior."
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "The field type doesn't demonstrate any special behavior."
                }
            },
            "caniuse": {
                "feature": "input-email-tel-url",
                "title": "Email, telephone & URL input types"
            },
            "title": "<input type=\"tel\">"
        }
    ],
    "time-state-(type=time)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/time.json",
            "name": "input-time",
            "slug": "HTML/Element/input/time",
            "summary": "<input> elements of type time create input fields designed to let the user easily enter a time (hours and minutes, and optionally seconds).",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/200416'>bug 200416</a>."
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"time\">"
        }
    ],
    "url-state-(type=url)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/url.json",
            "name": "input-url",
            "slug": "HTML/Element/input/url",
            "summary": "<input> elements of type url are used to let the user enter and edit a URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"url\">"
        }
    ],
    "week-state-(type=week)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/week.json",
            "name": "input-week",
            "slug": "HTML/Element/input/week",
            "summary": "<input> elements of type week create input fields allowing easy entry of a year plus the ISO 8601 week number during that year (i.e., week 1 to 52 or 53).",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a>."
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/200416'>bug 200416</a>."
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"week\">"
        }
    ],
    "the-ins-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ins.json",
            "name": "ins",
            "slug": "HTML/Element/ins",
            "summary": "The HTML <ins> element represents a range of text that has been added to a document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<ins>"
        }
    ],
    "the-kbd-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/kbd.json",
            "name": "kbd",
            "slug": "HTML/Element/kbd",
            "summary": "The HTML Keyboard Input element (<kbd>) represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, creating a &lt;kbd&gt; element incorrectly resulted in an <code>HTMLSpanElement</code> object, instead of the expected <code>HTMLElement</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<kbd>: The Keyboard Input element"
        }
    ],
    "the-label-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/label.json",
            "name": "label",
            "slug": "HTML/Element/label",
            "summary": "The HTML <label> element represents a caption for an item in a user interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<label>"
        }
    ],
    "the-legend-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/legend.json",
            "name": "legend",
            "slug": "HTML/Element/legend",
            "summary": "The HTML <legend> element represents a caption for the content of its parent <fieldset>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<legend>"
        }
    ],
    "the-li-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/li.json",
            "name": "li",
            "slug": "HTML/Element/li",
            "summary": "The HTML <li> element is used to represent an item in a list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<li>"
        }
    ],
    "rel-alternate": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "the-link-is-an-alternative-stylesheet": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "attr-style-title": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "attr-meta-http-equiv-default-style": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                },
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "link-type-dns-prefetch": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "dns-prefetch",
            "slug": "HTML/Link_types/dns-prefetch",
            "summary": "The dns-prefetch keyword for the rel attribute of the <link> element is a hint to browsers that the user is likely to need resources from the target resource's origin, and therefore the browser can likely improve the user experience by preemptively performing DNS resolution for that origin.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "33"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Link types: dns-prefetch"
        }
    ],
    "link-type-modulepreload": [
        {
            "engines": [
                "blink"
            ],
            "filename": "html/elements/link.json",
            "name": "modulepreload",
            "slug": "HTML/Link_types/modulepreload",
            "summary": "The modulepreload keyword for the rel attribute of the <link> element provides a declarative way to preemptively fetch a module script and its dependencies, and store them in the document's module map for later evaluation.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "link-rel-modulepreload",
                "title": "Resource Hints: modulepreload"
            },
            "title": "Link types: modulepreload"
        }
    ],
    "link-type-preconnect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/link.json",
            "name": "preconnect",
            "slug": "HTML/Link_types/preconnect",
            "summary": "The preconnect keyword for the rel attribute of the <link> element is a hint to browsers that the user is likely to need resources from the target resource's origin, and therefore the browser can likely improve the user experience by preemptively  initiating a connection to that origin.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": "46"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "39",
                    "notes": "Before Firefox 41, it doesn't obey the <code>crossorigin</code> attribute."
                },
                "firefox_android": {
                    "version_added": "39",
                    "notes": "Before Firefox 41, it doesn't obey the <code>crossorigin</code> attribute."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "33"
                },
                "opera_android": {
                    "version_added": "33"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Link types: preconnect"
        }
    ],
    "link-type-prefetch": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "prefetch",
            "slug": "HTML/Link_types/prefetch",
            "summary": "The prefetch keyword for the rel attribute of the <link> element is a hint to browsers that the user is likely to need the target resource for future navigations, and therefore the browser can likely improve the user experience by preemptively fetching and caching the resource.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Link types: prefetch"
        }
    ],
    "link-type-preload": [
        {
            "engines": [
                "blink"
            ],
            "filename": "html/elements/link.json",
            "name": "preload",
            "slug": "HTML/Link_types/preload",
            "summary": "The preload keyword for the rel attribute of the <link> element indicates the user is highly likely to require the target resource for the current navigation, and therefore the browser must preemptively fetch and cache the resource.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "56",
                    "version_removed": "57",
                    "notes": "Disabled due to various web compatibility issues (e.g. <a href='https://bugzil.la/1405761'>bug 1405761</a>)."
                },
                "firefox_android": {
                    "version_added": "56",
                    "version_removed": "57",
                    "notes": "Disabled due to various web compatibility issues (e.g. <a href='https://bugzil.la/1405761'>bug 1405761</a>)."
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Link types: preload"
        }
    ],
    "link-type-prerender": [
        {
            "engines": [
                "blink"
            ],
            "filename": "html/elements/link.json",
            "name": "prerender",
            "slug": "HTML/Link_types/prerender",
            "summary": "The prerender keyword for the rel attribute of the <link> element is a hint to browsers that the user might need the target resource for the next navigation, and therefore the browser can likely improve the user experience by preemptively fetching and processing the resource — for example, by fetching its subresources or performing some rendering in the background offscreen.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Link types: prerender"
        }
    ],
    "the-link-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/link.json",
            "name": "link",
            "slug": "HTML/Element/link",
            "summary": "The HTML External Resource Link element (<link>) specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both \"favicon\" style icons and icons for the home screen and apps on mobile devices) among other things.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<link>: The External Resource Link element"
        }
    ],
    "the-main-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/main.json",
            "name": "main",
            "slug": "HTML/Element/main",
            "summary": "The HTML <main> element represents the dominant content of the <body> of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "21"
                },
                "firefox_android": {
                    "version_added": "21"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "16"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<main>"
        }
    ],
    "the-map-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/map.json",
            "name": "map",
            "slug": "HTML/Element/map",
            "summary": "The HTML <map> element is used with <area> elements to define an image map (a clickable link area).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": [
                        "Before Firefox 5, in Quirks Mode, empty maps were no longer skipped over in favor of non-empty ones when matching.",
                        "Before Firefox 17, the default styling of the <code>&lt;map&gt;</code> HTML element was <code>display: block;</code>. This is now <code>display: inline;</code> and matches the behavior of the other browsers. It was already the case in Quirks Mode."
                    ]
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<map>"
        }
    ],
    "the-mark-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/mark.json",
            "name": "mark",
            "slug": "HTML/Element/mark",
            "summary": "The HTML Mark Text element (<mark>) represents text which is marked or highlighted for reference or notation purposes, due to the marked passage's relevance or importance in the enclosing context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<mark>: The Mark Text element"
        }
    ],
    "the-menu-element": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/menu.json",
            "name": "menu",
            "slug": "HTML/Element/menu",
            "summary": "The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8",
                    "notes": "Nested menus are not supported."
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "<menu>"
        }
    ],
    "meta-theme-color": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "blink"
            ],
            "filename": "html/elements/meta.json",
            "name": "theme-color",
            "slug": "HTML/Element/meta/name/theme-color",
            "summary": "The theme-color value for the name attribute of the <meta> element indicates a suggested color that user agents should use to customize the display of the page or of the surrounding user interface. If specified, the content attribute must contain a valid CSS <color>.",
            "support": {
                "chrome": [
                    {
                        "version_added": "73",
                        "partial_implementation": true,
                        "notes": "Desktop Chrome only uses the color on installed progressive web apps. (Per caniuse.com.)"
                    },
                    {
                        "version_added": "39",
                        "version_removed": "72",
                        "partial_implementation": true,
                        "notes": "Desktop Chrome 39-72 claimed to have support, but did not actually use the color anywhere. Chrome for Android did use the color in the toolbar. (Per caniuse.com.)"
                    }
                ],
                "chrome_android": {
                    "version_added": "80",
                    "notes": "Chrome for Android does not use the color on devices with native dark-mode enabled. (Per caniuse.com.)"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.2"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": [
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "Desktop Chrome only uses the color on installed progressive web apps. (Per caniuse.com.)"
                    },
                    {
                        "version_added": false,
                        "version_removed": "72",
                        "partial_implementation": true,
                        "notes": "Desktop Chrome 39-72 claimed to have support, but did not actually use the color anywhere. Chrome for Android did use the color in the toolbar. (Per caniuse.com.)"
                    }
                ]
            },
            "caniuse": {
                "feature": "meta-theme-color",
                "title": "theme-color Meta Tag"
            },
            "title": "theme-color"
        }
    ],
    "standard-metadata-names": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meta.json",
            "name": "name",
            "slug": "HTML/Element/meta/name",
            "summary": "The <meta> element can be used to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "Standard metadata names"
        }
    ],
    "the-meta-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meta.json",
            "name": "meta",
            "slug": "HTML/Element/meta",
            "summary": "The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<meta>: The Document-level Metadata element"
        }
    ],
    "the-meter-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meter.json",
            "name": "meter",
            "slug": "HTML/Element/meter",
            "summary": "The HTML <meter> element represents either a scalar value within a known range or a fractional value.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "meter",
                "title": "meter element"
            },
            "title": "<meter>: The HTML Meter element"
        }
    ],
    "the-nav-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/nav.json",
            "name": "nav",
            "slug": "HTML/Element/nav",
            "summary": "The HTML <nav> element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<nav>: The Navigation Section element"
        }
    ],
    "the-noscript-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/noscript.json",
            "name": "noscript",
            "slug": "HTML/Element/noscript",
            "summary": "The HTML <noscript> element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<noscript>"
        }
    ],
    "the-object-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/object.json",
            "name": "object",
            "slug": "HTML/Element/object",
            "summary": "The HTML <object> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<object>"
        }
    ],
    "the-ol-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ol.json",
            "name": "ol",
            "slug": "HTML/Element/ol",
            "summary": "The HTML <ol> element represents an ordered list of items — typically rendered as a numbered list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<ol>: The Ordered List element"
        }
    ],
    "the-optgroup-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/optgroup.json",
            "name": "optgroup",
            "slug": "HTML/Element/optgroup",
            "summary": "The HTML <optgroup> element creates a grouping of options within a <select> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<optgroup>"
        }
    ],
    "the-option-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/option.json",
            "name": "option",
            "slug": "HTML/Element/option",
            "summary": "The HTML <option> element is used to define an item contained in a <select>, an <optgroup>, or a <datalist> element. As such, <option> can represent menu items in popups and other lists of items in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<option>: The HTML Option element"
        }
    ],
    "the-output-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/output.json",
            "name": "output",
            "slug": "HTML/Element/output",
            "summary": "The HTML Output element (<output>) is a container element into which a site or app can inject the results of a calculation or the outcome of a user action.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<output>: The Output element"
        }
    ],
    "the-p-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/p.json",
            "name": "p",
            "slug": "HTML/Element/p",
            "summary": "The HTML <p> element represents a paragraph.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<p>: The Paragraph element"
        }
    ],
    "the-param-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/param.json",
            "name": "param",
            "slug": "HTML/Element/param",
            "summary": "The HTML <param> element defines parameters for an <object> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<param>: The Object Parameter element"
        }
    ],
    "the-picture-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/picture.json",
            "name": "picture",
            "slug": "HTML/Element/picture",
            "summary": "The HTML <picture> element contains zero or more <source> elements and one <img> element to offer alternative versions of an image for different display/device scenarios.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": {
                    "version_added": "38"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.image.picture.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.image.picture.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "25"
                },
                "opera_android": {
                    "version_added": "25"
                },
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "38"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "picture",
                "title": "Picture element"
            },
            "title": "<picture>: The Picture element"
        }
    ],
    "the-pre-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/pre.json",
            "name": "pre",
            "slug": "HTML/Element/pre",
            "summary": "The HTML <pre> element represents preformatted text which is to be presented exactly as written in the HTML file.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<pre>: The Preformatted Text element"
        }
    ],
    "the-progress-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/progress.json",
            "name": "progress",
            "slug": "HTML/Element/progress",
            "summary": "The HTML <progress> element displays an indicator showing the completion progress of a task, typically displayed as a progress bar.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": [
                        "Prior to Firefox 14, the <code>&lt;progress&gt;</code> element was incorrectly classified as a form element, and therefore had a <code>form</code> attribute. This has been fixed.",
                        "Firefox provides the <code>::-moz-progress-bar</code> pseudo-element, which lets you style the part of the interior of the progress bar representing the amount of work completed so far."
                    ]
                },
                "firefox_android": {
                    "version_added": "6",
                    "notes": [
                        "Prior to Firefox 14, the <code>&lt;progress&gt;</code> element was incorrectly classified as a form element, and therefore had a <code>form</code> attribute. This has been fixed.",
                        "Firefox provides the <code>::-moz-progress-bar</code> pseudo-element, which lets you style the part of the interior of the progress bar representing the amount of work completed so far."
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7",
                    "notes": "Safari on iOS does not support indeterminate progress bars (they are rendered like 0%-completed progress bars)."
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "progress",
                "title": "progress element"
            },
            "title": "<progress>: The Progress Indicator element"
        }
    ],
    "the-q-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/q.json",
            "name": "q",
            "slug": "HTML/Element/q",
            "summary": "The HTML <q> element  indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<q>: The Inline Quotation element"
        }
    ],
    "the-rp-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/rp.json",
            "name": "rp",
            "slug": "HTML/Element/rp",
            "summary": "The HTML Ruby Fallback Parenthesis (<rp>) element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the <ruby> element.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<rp>: The Ruby Fallback Parenthesis element"
        }
    ],
    "the-rt-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/rt.json",
            "name": "rt",
            "slug": "HTML/Element/rt",
            "summary": "The HTML Ruby Text (<rt>) element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The <rt> element must always be contained within a <ruby> element.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<rt>: The Ruby Text element"
        }
    ],
    "the-ruby-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ruby.json",
            "name": "ruby",
            "slug": "HTML/Element/ruby",
            "summary": "The HTML <ruby> element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "ruby",
                "title": "Ruby annotation"
            },
            "title": "<ruby>"
        }
    ],
    "the-s-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/s.json",
            "name": "s",
            "slug": "HTML/Element/s",
            "summary": "The HTML <s> element renders text with a strikethrough, or a line through it. Use the <s> element to represent things that are no longer relevant or no longer accurate. However, <s> is not appropriate when indicating document edits; for that, use the <del> and <ins> elements, as appropriate.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<s>"
        }
    ],
    "the-samp-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/samp.json",
            "name": "samp",
            "slug": "HTML/Element/samp",
            "summary": "The HTML Sample Element (<samp>) is used to enclose inline text which represents sample (or quoted) output from a computer program.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<samp>: The Sample Output element"
        }
    ],
    "the-script-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/script.json",
            "name": "script",
            "slug": "HTML/Element/script",
            "summary": "The HTML <script> element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting in Firefox 4, inserting &lt;script&gt; elements that have been created by calling <code>document.createElement(\"script\")</code> no longer enforces execution in insertion order. This change lets Firefox properly abide by the specification. To make script-inserted external scripts execute in their insertion order, set <code>.async=false</code> on them."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<script>: The Script element"
        }
    ],
    "the-section-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/section.json",
            "name": "section",
            "slug": "HTML/Element/section",
            "summary": "The HTML <section> element represents a standalone section — which doesn't have a more specific semantic element to represent it — contained within an HTML document.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<section>: The Generic Section element"
        }
    ],
    "the-select-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/select.json",
            "name": "select",
            "slug": "HTML/Element/select",
            "summary": "The HTML <select> element represents a control that provides a menu of options",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Historically, Firefox has allowed keyboard and mouse events to bubble up from the <code>&lt;option&gt;</code> element to the parent <code>&lt;select&gt;</code> element, although this behavior is inconsistent across many browsers. For better Web compatibility (and for technical reasons), when Firefox is in multi-process mode the <code>&lt;select&gt;</code> element is displayed as a drop-down list. The behavior is unchanged if the <code>&lt;select&gt;</code> is presented inline and it has either the multiple attribute defined or a size attribute set to more than 1. Rather than watching <code>&lt;option&gt;</code> elements for events, you should watch for change events on <code>&lt;select&gt;</code>. See <a href='https://bugzil.la/1090602'>bug 1090602</a> for details."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Firefox for Android, by default, sets a <code>background-image</code> gradient on all <code>&lt;select multiple&gt;</code> elements. This can be disabled using <code>background-image: none</code>."
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true,
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                },
                "safari_ios": {
                    "version_added": true,
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": [
                        "In the Browser app for Android 4.1 (and possibly later versions), there is a bug where the menu indicator triangle on the side of a <code>&lt;select&gt;</code> will not be displayed if a <code>background</code>, <code>border</code>, or <code>border-radius</code> style is applied to the <code>&lt;select&gt;</code>.",
                        "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                    ]
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                }
            },
            "title": "<select>: The HTML Select element"
        }
    ],
    "the-slot-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/slot.json",
            "name": "slot",
            "slug": "HTML/Element/slot",
            "summary": "The HTML <slot> element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<slot>"
        }
    ],
    "the-small-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/small.json",
            "name": "small",
            "slug": "HTML/Element/small",
            "summary": "The HTML <small> element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<small>: the side comment element"
        }
    ],
    "the-source-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/source.json",
            "name": "source",
            "slug": "HTML/Element/source",
            "summary": "The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Until Firefox 15, Firefox picked the first source element that has a type matching the MIME-type of a supported media format; see <a href='https://bugzil.la/449363'>bug 449363</a> for details."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Until Firefox 15, Firefox picked the first source element that has a type matching the MIME-type of a supported media format; see <a href='https://bugzil.la/449363'>bug 449363</a> for details."
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<source>: The Media or Image Source element"
        }
    ],
    "the-span-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/span.json",
            "name": "span",
            "slug": "HTML/Element/span",
            "summary": "The HTML <span> element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<span>"
        }
    ],
    "the-strong-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/strong.json",
            "name": "strong",
            "slug": "HTML/Element/strong",
            "summary": "The HTML Strong Importance Element (<strong>) indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, creating a <code>&lt;strong&gt;</code> element incorrectly resulted in an <code>HTMLSpanElement</code> object, instead of the expected <code>HTMLElement</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<strong>: The Strong Importance element"
        }
    ],
    "the-style-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/style.json",
            "name": "style",
            "slug": "HTML/Element/style",
            "summary": "The HTML <style> element contains style information for a document, or part of a document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "3"
                },
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<style>: The Style Information element"
        }
    ],
    "the-sub-and-sup-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/sub.json",
            "name": "sub",
            "slug": "HTML/Element/sub",
            "summary": "The HTML Subscript element (<sub>) specifies inline text which should be displayed as subscript for solely typographical reasons.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<sub>: The Subscript element"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/sup.json",
            "name": "sup",
            "slug": "HTML/Element/sup",
            "summary": "The HTML Superscript element (<sup>) specifies inline text which is to be displayed as superscript for solely typographical reasons.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<sup>: The Superscript element"
        }
    ],
    "the-summary-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/summary.json",
            "name": "summary",
            "slug": "HTML/Element/summary",
            "summary": "The HTML Disclosure Summary element (<summary>) element specifies a summary, caption, or legend for a <details> element's disclosure box.",
            "support": {
                "chrome": {
                    "version_added": "12"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<summary>: The Disclosure Summary element"
        }
    ],
    "the-table-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/table.json",
            "name": "table",
            "slug": "HTML/Element/table",
            "summary": "The HTML <table> element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<table>: The Table element"
        }
    ],
    "the-tbody-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/tbody.json",
            "name": "tbody",
            "slug": "HTML/Element/tbody",
            "summary": "The HTML Table Body element (<tbody>) encapsulates a set of table rows (<tr> elements), indicating that they comprise the body of the table (<table>).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<tbody>: The Table Body element"
        }
    ],
    "the-td-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/td.json",
            "name": "td",
            "slug": "HTML/Element/td",
            "summary": "The HTML <td> element defines a cell of a table that contains data. It participates in the table model.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<td>: The Table Data Cell element"
        }
    ],
    "the-template-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/template.json",
            "name": "template",
            "slug": "HTML/Element/template",
            "summary": "The HTML Content Template (<template>) element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "template",
                "title": "HTML templates"
            },
            "title": "<template>: The Content Template element"
        }
    ],
    "the-textarea-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/textarea.json",
            "name": "textarea",
            "slug": "HTML/Element/textarea",
            "summary": "The HTML <textarea> element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true,
                    "notes": [
                        "Before Firefox 6, when a <code>&lt;textarea&gt;</code> was focused, the insertion point was placed at the end of the text by default. Other major browsers place the insertion point at the beginning of the text.",
                        "A default background-image gradient is applied to all <code>&lt;textarea&gt;</code> elements, which can be disabled using <code>background-image: none</code>."
                    ]
                },
                "firefox_android": {
                    "version_added": true,
                    "notes": [
                        "Before Firefox 6, when a <code>&lt;textarea&gt;</code> was focused, the insertion point was placed at the end of the text by default. Other major browsers place the insertion point at the beginning of the text.",
                        "A default background-image gradient is applied to all <code>&lt;textarea&gt;</code> elements, which can be disabled using <code>background-image: none</code>."
                    ]
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true,
                    "notes": "Unlike other major browsers, a default style of <code>opacity: 0.4</code> is applied to disabled <code>&lt;textarea&gt;</code> elements."
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<textarea>"
        }
    ],
    "the-tfoot-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/tfoot.json",
            "name": "tfoot",
            "slug": "HTML/Element/tfoot",
            "summary": "The HTML <tfoot> element defines a set of rows summarizing the columns of the table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<tfoot>: The Table Foot element"
        }
    ],
    "the-th-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/th.json",
            "name": "th",
            "slug": "HTML/Element/th",
            "summary": "The HTML <th> element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<th>"
        }
    ],
    "the-thead-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/thead.json",
            "name": "thead",
            "slug": "HTML/Element/thead",
            "summary": "The HTML <thead> element defines a set of rows defining the head of the columns of the table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<thead>: The Table Head element"
        }
    ],
    "the-time-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/time.json",
            "name": "time",
            "slug": "HTML/Element/time",
            "summary": "The HTML <time> element represents a specific period in time.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "12"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "12"
                    }
                ],
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "62"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<time>"
        }
    ],
    "the-title-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/title.json",
            "name": "title",
            "slug": "HTML/Element/title",
            "summary": "The HTML Title element (<title>) defines the document's title that is shown in a browser's title bar or a page's tab.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "1"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<title>: The Document Title element"
        }
    ],
    "the-tr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/tr.json",
            "name": "tr",
            "slug": "HTML/Element/tr",
            "summary": "The HTML <tr> element defines a row of cells in a table. The row's cells can then be established using a mix of <td> (data cell) and <th> (header cell) elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<tr>: The Table Row element"
        }
    ],
    "the-track-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/track.json",
            "name": "track",
            "slug": "HTML/Element/track",
            "summary": "The HTML <track> element is used as a child of the media elements, <audio> and <video>. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25",
                    "notes": "Doesn't work for fullscreen video."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "31"
                    },
                    {
                        "version_added": "24",
                        "version_removed": "50",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "media.webvtt.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "31"
                    },
                    {
                        "version_added": "24",
                        "version_removed": "50",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "media.webvtt.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": "1.5",
                    "notes": "Doesn't work for fullscreen video."
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "Doesn't work for fullscreen video."
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<track>: The Embed Text Track element"
        }
    ],
    "the-u-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/u.json",
            "name": "u",
            "slug": "HTML/Element/u",
            "summary": "The HTML Unarticulated Annotation element (<u>) represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<u>: The Unarticulated Annotation (Underline) element"
        }
    ],
    "the-ul-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ul.json",
            "name": "ul",
            "slug": "HTML/Element/ul",
            "summary": "The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<ul>: The Unordered List element"
        }
    ],
    "the-var-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/var.json",
            "name": "var",
            "slug": "HTML/Element/var",
            "summary": "The HTML Variable element (<var>) represents the name of a variable in a mathematical expression or a programming context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "<var>: The Variable element"
        }
    ],
    "the-video-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/video.json",
            "name": "video",
            "slug": "HTML/Element/video",
            "summary": "The HTML Video element (<video>) embeds a media player which supports video playback into the document. You can use <video> for audio content as well, but the <audio> element may provide a more appropriate user experience.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "video",
                "title": "Video element"
            },
            "title": "<video>: The Video Embed element"
        }
    ],
    "the-wbr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/wbr.json",
            "name": "wbr",
            "slug": "HTML/Element/wbr",
            "summary": "The HTML <wbr> element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5",
                    "version_removed": "7"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "wbr-element",
                "title": "wbr (word break opportunity) element"
            },
            "title": "<wbr>"
        }
    ],
    "the-accesskey-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "accesskey",
            "slug": "HTML/Global_attributes/accesskey",
            "summary": "The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element. The attribute value must consist of a single printable character (which includes accented and other characters that can be generated by the keyboard).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "accesskey"
        }
    ],
    "autocapitalization": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "autocapitalize",
            "slug": "HTML/Global_attributes/autocapitalize",
            "summary": "The autocapitalize global attribute is an enumerated attribute that controls whether and how text input is automatically capitalized as it is entered/edited by the user.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "qq_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "uc_android": {
                    "version_added": null
                },
                "uc_chinese_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "autocapitalize"
        }
    ],
    "autofill": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/global_attributes.json",
            "name": "autocomplete",
            "slug": "HTML/Attributes/autocomplete",
            "summary": "autocomplete lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.",
            "support": {
                "chrome": [
                    {
                        "version_added": "66",
                        "notes": [
                            "Support added for <code>autocomplete</code> on the <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements.",
                            "Chrome does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    },
                    {
                        "version_added": true,
                        "notes": [
                            "Originally only supported on the <code>&lt;input&gt;</code> element.",
                            "Chrome does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "66",
                        "notes": [
                            "Support added for <code>autocomplete</code> on the <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements.",
                            "Chrome does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    },
                    {
                        "version_added": true,
                        "notes": [
                            "Originally only supported on the <code>&lt;input&gt;</code> element.",
                            "Chrome does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "qq_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": [
                    {
                        "notes": [
                            "Support added for <code>autocomplete</code> on the <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements.",
                            "Samsung Internet does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ],
                        "version_added": "9.0"
                    },
                    {
                        "notes": [
                            "Originally only supported on the <code>&lt;input&gt;</code> element.",
                            "Samsung Internet does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ],
                        "version_added": true
                    }
                ],
                "uc_android": {
                    "version_added": null
                },
                "uc_chinese_android": {
                    "version_added": null
                },
                "webview_android": [
                    {
                        "version_added": "66",
                        "notes": [
                            "Support added for <code>autocomplete</code> on the <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements.",
                            "WebView does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    },
                    {
                        "version_added": true,
                        "notes": [
                            "Originally only supported on the <code>&lt;input&gt;</code> element.",
                            "WebView does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79",
                        "notes": [
                            "Support added for <code>autocomplete</code> on the <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements.",
                            "Chrome does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    },
                    {
                        "version_added": true,
                        "notes": [
                            "Originally only supported on the <code>&lt;input&gt;</code> element.",
                            "Chrome does not accept <code>off</code> as a value.  See <a href='https://crbug.com/587466'>bug 587466</a>."
                        ]
                    }
                ]
            },
            "caniuse": {
                "feature": "input-autocomplete-onoff",
                "title": "autocomplete attribute: on & off values"
            },
            "title": "The HTML autocomplete attribute"
        }
    ],
    "classes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "class",
            "slug": "HTML/Global_attributes/class",
            "summary": "The class global attribute is a space-separated list of the case-sensitive classes of the element. Classes allow CSS and Javascript to select and access specific elements via the class selectors or functions like the DOM method document.getElementsByClassName.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": {
                    "version_added": "32"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "class"
        }
    ],
    "attr-contenteditable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "contenteditable",
            "slug": "HTML/Global_attributes/contenteditable",
            "summary": "The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "contenteditable"
        }
    ],
    "embedding-custom-non-visible-data-with-the-data-*-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "data_attributes",
            "slug": "HTML/Global_attributes/data-*",
            "summary": "The data-* global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "dataset",
                "title": "dataset & data-* attributes"
            },
            "title": "data-*"
        }
    ],
    "the-dir-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "dir",
            "slug": "HTML/Global_attributes/dir",
            "summary": "The dir global attribute is an enumerated attribute that indicates the directionality of the element's text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "dir"
        }
    ],
    "the-draggable-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "draggable",
            "slug": "HTML/Global_attributes/draggable",
            "summary": "The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, either with native browser behavior or the HTML Drag and Drop API.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "draggable"
        }
    ],
    "the-hidden-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "hidden",
            "slug": "HTML/Global_attributes/hidden",
            "summary": "The hidden global attribute is a Boolean attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "hidden",
                "title": "hidden attribute"
            },
            "title": "hidden"
        }
    ],
    "hiddenCSS": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "hidden",
            "slug": "HTML/Global_attributes/hidden",
            "summary": "The hidden global attribute is a Boolean attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "hidden"
        }
    ],
    "the-id-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "id",
            "slug": "HTML/Global_attributes/id",
            "summary": "The id global attribute defines an identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": true,
                        "version_removed": "32",
                        "partial_implementation": true,
                        "notes": "<code>id</code> is a true global attribute only since Firefox 32."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": true,
                        "version_removed": "32",
                        "partial_implementation": true,
                        "notes": "<code>id</code> is a true global attribute only since Firefox 32."
                    }
                ],
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "id"
        }
    ],
    "input-modalities:-the-inputmode-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "html/global_attributes.json",
            "name": "inputmode",
            "slug": "HTML/Global_attributes/inputmode",
            "summary": "The inputmode global attribute is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "23",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.forms.inputmode",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": [
                            "Before version 77, Firefox does not support <code>inputmode</code> when <code>contenteditable</code> is <code>true</code>.",
                            "Before version 75, Firefox accepts values from an earlier specification. From version 75, it accepts values from the WHATWG Living Standard. See <a href='https://bugzil.la/1509527'>bug 1509527</a>."
                        ]
                    },
                    {
                        "version_added": "17",
                        "version_removed": "23"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "68",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.forms.inputmode",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": "12.2"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "66"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-inputmode",
                "title": "inputmode attribute"
            },
            "title": "inputmode"
        }
    ],
    "attr-is": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/global_attributes.json",
            "name": "is",
            "slug": "HTML/Global_attributes/is",
            "summary": "The is global attribute allows you to specify that a standard HTML element should behave like a defined custom built-in element (see Using custom elements for more details).",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": {
                    "version_added": "67"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "55"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "67"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "is"
        }
    ],
    "attr-itemid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemid",
            "slug": "HTML/Global_attributes/itemid",
            "summary": "The itemid global attribute provides microdata in the form of a unique, global identifier of an item.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemid"
        }
    ],
    "names:-the-itemprop-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemprop",
            "slug": "HTML/Global_attributes/itemprop",
            "summary": "The itemprop global attribute is used to add properties to an item. Every HTML element can have an itemprop attribute specified, and an itemprop consists of a name-value pair. Each name-value pair is called a property, and a group of one or more properties forms an item. Property values are either a string or a URL and can be associated with a very wide range of elements including <audio>, <embed>, <iframe>, <img>, <link>, <object>, <source> , <track>, and <video>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemprop"
        }
    ],
    "attr-itemref": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemref",
            "slug": "HTML/Global_attributes/itemref",
            "summary": "Properties that are not descendants of an element with the itemscope attribute can be associated with an item using the global attribute itemref.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemref"
        }
    ],
    "attr-itemscope": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemscope",
            "slug": "HTML/Global_attributes/itemscope",
            "summary": "itemscope is a boolean global attribute that defines the scope of associated metadata. Specifying the itemscope attribute for an element creates a new item, which results in a number of name-value pairs that are associated with the element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemscope"
        }
    ],
    "attr-itemtype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemtype",
            "slug": "HTML/Global_attributes/itemtype",
            "summary": "The global attribute itemtype specifies the URL of the vocabulary that will be used to define itemprop's (item properties) in the data structure. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemtype"
        }
    ],
    "the-lang-and-xml:lang-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "lang",
            "slug": "HTML/Global_attributes/lang",
            "summary": "The lang global attribute helps define the language of an element: the language that non-editable elements are written in, or the language that the editable elements should be written in by the user. The attribute contains a single “language tag” in the format defined in Tags for Identifying Languages (BCP47).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "lang"
        }
    ],
    "attr-slot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "slot",
            "slug": "HTML/Global_attributes/slot",
            "summary": "The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <slot> element whose name attribute's value matches that slot attribute's value.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "slot"
        }
    ],
    "spelling-and-grammar-checking": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "spellcheck",
            "slug": "HTML/Global_attributes/spellcheck",
            "summary": "The spellcheck global attribute is an enumerated attribute defines whether the element may be checked for spelling errors.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": {
                    "version_added": "47"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "47"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "spellcheck-attribute",
                "title": "Spellcheck attribute"
            },
            "title": "spellcheck"
        }
    ],
    "the-style-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "style",
            "slug": "HTML/Global_attributes/style",
            "summary": "The style global attribute contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the <style> element have mainly the purpose of allowing for quick styling, for example for testing purposes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "style"
        }
    ],
    "attr-tabindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "tabindex",
            "slug": "HTML/Global_attributes/tabindex",
            "summary": "The tabindex global attribute indicates that its element can be focused, and where it participates in sequential keyboard navigation (usually with the Tab key, hence the name).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "tabindex-attr",
                "title": "tabindex global attribute"
            },
            "title": "tabindex"
        }
    ],
    "the-title-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "title",
            "slug": "HTML/Global_attributes/title",
            "summary": "The title global attribute contains text representing advisory information related to the element it belongs to.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "title"
        }
    ],
    "attr-translate": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "translate",
            "slug": "HTML/Global_attributes/translate",
            "summary": "The translate global attribute is an enumerated attribute that is used to specify whether an element's translateable attribute values and its Text node children should be translated when the page is localized, or whether to leave them unchanged.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "translate"
        }
    ],
    "document-domain-feature": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "http/headers/feature-policy.json",
            "name": "document-domain",
            "slug": "HTTP/Headers/Feature-Policy/document-domain",
            "summary": "The HTTP Feature-Policy header document-domain directive controls whether the current document is allowed to set document.domain. When this policy is enabled, attempting to set document.domain will fail and cause a SecurityError DOMException to be be thrown.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "74"
                    },
                    {
                        "version_added": "65",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.security.featurePolicy.header.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": {
                    "version_added": "65",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.security.featurePolicy.header.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "64"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Feature-Policy: document-domain"
        }
    ],
    "hostgetimportmetaproperties": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "import_meta",
            "slug": "JavaScript/Reference/Statements/import.meta",
            "summary": "The import.meta object exposes context-specific metadata to a JavaScript module. It contains information about the module, like the module's URL.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": {
                    "version_added": "64"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": {
                    "version_added": "62"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "opera": {
                    "version_added": "51"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "12"
                },
                "samsunginternet_android": {
                    "version_added": "9.0"
                },
                "webview_android": {
                    "version_added": "64"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "import.meta"
        }
    ],
    "atob": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "atob",
            "slug": "API/WindowOrWorkerGlobalScope/atob",
            "summary": "The WindowOrWorkerGlobalScope.atob() function decodes a string of data which has been encoded using Base64 encoding. You can use the btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "27",
                        "notes": "<code>atob()</code> ignores all space characters in the argument to comply with the latest HTML5 spec (see <a href='https://bugzil.la/711180'>bug 711180</a>)."
                    },
                    {
                        "version_added": "57",
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "27",
                        "notes": "<code>atob()</code> ignores all space characters in the argument to comply with the latest HTML5 spec (see <a href='https://bugzil.la/711180'>bug 711180</a>)."
                    },
                    {
                        "version_added": "57",
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin."
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "atob-btoa",
                "title": "Base64 encoding and decoding"
            },
            "title": "WindowOrWorkerGlobalScope.atob()"
        }
    ],
    "attr-fae-form": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Attributes#attr-form",
            "slug": "HTML/Attributes#attr-form",
            "summary": "Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "form-attribute",
                "title": "Form attribute"
            },
            "title": "HTML attribute reference"
        }
    ],
    "attr-fieldset-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "fieldset#attr-disabled",
            "slug": "HTML/Element/fieldset#attr-disabled",
            "summary": "The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true,
                    "notes": "Not all form control descendants of a disabled fieldset are properly disabled in IE11; see IE <a href='https://connect.microsoft.com/IE/feedbackdetail/view/817488'>bug 817488: input[type='file'] not disabled inside disabled fieldset</a> and IE <a href='https://connect.microsoft.com/IE/feedbackdetail/view/962368/can-still-edit-input-type-text-within-fieldset-disabled'>bug 962368: Can still edit input[type='text'] within fieldset[disabled]</a>."
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "fieldset-disabled",
                "title": "disabled attribute of the fieldset element"
            },
            "title": "<fieldset>: The Field Set element"
        }
    ],
    "attr-iframe-sandbox": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "iframe#attr-sandbox",
            "slug": "HTML/Element/iframe#attr-sandbox",
            "summary": "The HTML Inline Frame element (<iframe>) represents a nested browsing context, embedding another HTML page into the current one.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": {
                    "version_added": "17"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "iframe-sandbox",
                "title": "sandbox attribute for iframes"
            },
            "title": "<iframe>: The Inline Frame element"
        }
    ],
    "attr-iframe-srcdoc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "iframe#attr-srcdoc",
            "slug": "HTML/Element/iframe#attr-srcdoc",
            "summary": "The HTML Inline Frame element (<iframe>) represents a nested browsing context, embedding another HTML page into the current one.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "25"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "iframe-srcdoc",
                "title": "srcdoc attribute for iframes"
            },
            "title": "<iframe>: The Inline Frame element"
        }
    ],
    "attr-img-crossorigin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "crossorigin",
            "slug": "HTML/Attributes/crossorigin",
            "summary": "The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles crossorigin requests, thereby enabling the configuration of the CORS requests for the element's fetched data. Depending on the element, the attribute can be a CORS settings attribute.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTML attribute: crossorigin"
        }
    ],
    "attr-img-srcset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "img#attr-srcset",
            "slug": "HTML/Element/img#attr-srcset",
            "summary": "The HTML <img> element embeds an image into the document.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": {
                    "version_added": "34"
                },
                "edge": {
                    "version_added": "≤18"
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.image.srcset.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "52",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.image.srcset.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "21"
                },
                "opera_android": {
                    "version_added": "21"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": "2.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "srcset",
                "title": "Srcset and sizes attributes"
            },
            "title": "<img>: The Image Embed element"
        }
    ],
    "attr-input-accept": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "attr-input-accept#attr-accept",
            "slug": "HTML/Element/input#attr-accept",
            "summary": "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. ",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": {
                    "version_added": "37"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-file-accept",
                "title": "accept attribute for file input"
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-maxlength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "attr-input-maxlength#attr-maxlength",
            "slug": "HTML/Element/input#attr-maxlength",
            "summary": "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. ",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "maxlength",
                "title": "maxlength attribute for input and textarea elements"
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-minlength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "attr-input-minlength#attr-minlength",
            "slug": "HTML/Element/input#attr-minlength",
            "summary": "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. ",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": {
                    "version_added": "51"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "27"
                },
                "opera_android": {
                    "version_added": "27"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "40"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-minlength",
                "title": "Minimum length attribute for input fields"
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-placeholder": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "input#attr-placeholder",
            "slug": "HTML/Element/input#attr-placeholder",
            "summary": "The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "input-placeholder",
                "title": "input placeholder attribute"
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-ol-reversed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "ol#attr-reversed",
            "slug": "HTML/Element/ol#attr-reversed",
            "summary": "The HTML <ol> element represents an ordered list of items — typically rendered as a numbered list.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": {
                    "version_added": "18"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "ol-reversed",
                "title": "Reversed attribute of ordered lists"
            },
            "title": "<ol>: The Ordered List element"
        }
    ],
    "attr-script-async": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "script#attr-async",
            "slug": "HTML/Element/script#attr-async",
            "summary": "The HTML <script> element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "script-async",
                "title": "async attribute for external scripts"
            },
            "title": "<script>: The Script element"
        }
    ],
    "attr-script-defer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "script#attr-defer",
            "slug": "HTML/Element/script#attr-defer",
            "summary": "The HTML <script> element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code.",
            "support": {
                "chrome": {
                    "version_added": true,
                    "notes": "Chrome does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                },
                "chrome_android": {
                    "version_added": true,
                    "notes": "Chrome does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Since Firefox 3.6, the <code>defer</code> attribute is ignored on scripts that don't have the <code>src</code> attribute. However, in Firefox 3.5 even inline scripts are deferred if the <code>defer</code> attribute is set."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10",
                    "notes": "In versions prior to Internet Explorer 10, it implemented <code>defer</code> by a proprietary specification. Since version 10 it conforms to the W3C specification."
                },
                "opera": {
                    "version_added": true,
                    "notes": "Opera does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                },
                "opera_android": {
                    "version_added": true,
                    "notes": "Opera does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true,
                    "notes": "Samsung Internet does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                },
                "webview_android": {
                    "version_added": true,
                    "notes": "WebView does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                },
                "edge_blink": {
                    "version_added": true,
                    "notes": "Chrome does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                }
            },
            "caniuse": {
                "feature": "script-defer",
                "title": "defer attribute for external scripts"
            },
            "title": "<script>: The Script element"
        }
    ],
    "attr-script-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "script#attr-type",
            "slug": "HTML/Element/script#attr-type",
            "summary": "The HTML <script> element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "es6-module",
                "title": "JavaScript modules via script tag"
            },
            "title": "<script>: The Script element"
        }
    ],
    "attributes-for-form-submission": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "form#Attributes_for_form_submission",
            "slug": "HTML/Element/form#Attributes_for_form_submission",
            "summary": "The HTML <form> element represents a document section containing interactive controls for submitting information.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "form-submit-attributes",
                "title": "Attributes for form submission"
            },
            "title": "<form>"
        }
    ],
    "audiotracklist-and-videotracklist-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": null,
            "name": "AudioTrackList",
            "slug": "API/AudioTrackList",
            "summary": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "opera_android": {
                    "version_added": "24",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "caniuse": {
                "feature": "audiotracks",
                "title": "Audio Tracks"
            },
            "title": "AudioTrackList"
        }
    ],
    "autofocusing-a-form-control:-the-autofocus-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Attributes#attr-autofocus",
            "slug": "HTML/Attributes#attr-autofocus",
            "summary": "Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "9.6"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "autofocus",
                "title": "Autofocus attribute"
            },
            "title": "HTML attribute reference"
        }
    ],
    "broadcasting-to-other-browsing-contexts": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": null,
            "name": "Broadcast_Channel_API",
            "slug": "API/Broadcast_Channel_API",
            "summary": "The Broadcast Channel API allows basic communication between browsing contexts (that is, windows, tabs, frames, or iframes) and workers on the same origin.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "broadcastchannel",
                "title": "BroadcastChannel"
            },
            "title": "Broadcast Channel API"
        }
    ],
    "canvasimagesource": [
        {
            "engines": [],
            "filename": null,
            "name": "CanvasImageSource",
            "slug": "API/CanvasImageSource",
            "summary": "CanvasImageSource provides a mechanism for other interfaces to be used as image sources for some methods of the CanvasDrawImage and CanvasFillStrokeStyles interfaces. It’s just an internal helper type to simplify the specification. It’s not an interface and there are no objects implementing it.",
            "support": null,
            "title": "CanvasImageSource"
        }
    ],
    "channel-messaging": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Channel_Messaging_API",
            "slug": "API/Channel_Messaging_API",
            "summary": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "notes": "Must be imported from the <code>worker_threads</code> module."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "channel-messaging",
                "title": "Channel messaging"
            },
            "title": "Channel Messaging API"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Using_channel_messaging",
            "slug": "API/Channel_Messaging_API/Using_channel_messaging",
            "summary": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, or two documents via a SharedWorker) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0",
                    "notes": "Must be imported from the <code>worker_threads</code> module."
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "channel-messaging",
                "title": "Channel messaging"
            },
            "title": "Using channel messaging"
        }
    ],
    "client-side-form-validation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Form_validation",
            "slug": "Forms/Form_validation",
            "summary": "Client-side form validation sometimes requires JavaScript if you want to customize styling and error messages, but it always requires you to think carefully about the user. Always remember to help your users correct the data they provide. To that end, be sure to:",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "form-validation",
                "title": "Form validation"
            },
            "title": "Client-side form validation"
        }
    ],
    "cors-settings-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "crossorigin",
            "slug": "HTML/Attributes/crossorigin",
            "summary": "The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles crossorigin requests, thereby enabling the configuration of the CORS requests for the element's fetched data. Depending on the element, the attribute can be a CORS settings attribute.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "HTML attribute: crossorigin"
        }
    ],
    "crossDocumentMessages": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "postMessage",
            "slug": "API/Window/postMessage",
            "summary": "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "8",
                        "notes": "Supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons."
                    },
                    {
                        "version_added": "6",
                        "notes": "The <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself."
                    },
                    {
                        "version_added": "3",
                        "version_removed": "6",
                        "notes": "The <code>message</code> parameter must be a string."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "8",
                        "notes": "Supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons."
                    },
                    {
                        "version_added": "6",
                        "notes": "The <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "6",
                        "notes": "The <code>message</code> parameter must be a string."
                    }
                ],
                "ie": [
                    {
                        "version_added": "10",
                        "notes": "IE10 had an important limitation: see this <a href='https://stackoverflow.com/questions/16226924/is-cross-origin-postmessage-broken-in-ie10'>article</a> for details."
                    },
                    {
                        "version_added": "8",
                        "version_removed": "10",
                        "notes": "Support only for <code>&lt;frame&gt;</code> and <code>&lt;iframe&gt;</code>."
                    }
                ],
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "x-doc-messaging",
                "title": "Cross-document messaging"
            },
            "title": "Window.postMessage()"
        }
    ],
    "custom-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Using_custom_elements",
            "slug": "Web_Components/Using_custom_elements",
            "summary": "One of the key features of the Web Components standard is the ability to create custom elements that encapsulate your functionality on an HTML page, rather than having to make do with a long, nested batch of elements that together provide a custom page feature. This article introduces the use of the Custom Elements API.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "version_added": "59",
                        "version_removed": "63",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    },
                    {
                        "version_added": true,
                        "version_removed": "59",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "dom.webcomponents.customelements.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "custom-elementsv1",
                "title": "Custom Elements (V1)"
            },
            "title": "Using custom elements"
        }
    ],
    "dnd": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "dnd#HTML_Drag_and_Drop_API",
            "slug": "API/HTML_Drag_and_Drop_API",
            "summary": "HTML Drag and Drop interfaces enable applications to use drag-and-drop features in browsers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "dragndrop",
                "title": "Drag and Drop"
            },
            "title": "HTML Drag and Drop API"
        }
    ],
    "dom-input-indeterminate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "HTMLInputElement#indeterminate",
            "slug": "API/HTMLInputElement#indeterminate",
            "summary": "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "indeterminate-checkbox",
                "title": "indeterminate checkbox"
            },
            "title": "HTMLInputElement"
        }
    ],
    "dom-textarea/input-select": [
        {
            "engines": [],
            "filename": null,
            "name": "select",
            "slug": "API/HTMLInputElement/select",
            "summary": "The HTMLInputElement.select() method selects all the text in a <textarea> element or in an <input> element that includes a text field.",
            "support": null,
            "title": "HTMLInputElement.select()"
        }
    ],
    "downloading-resources": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "download",
            "slug": "API/HTMLAnchorElement/download",
            "summary": "The HTMLAnchorElement.download property is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value, if any, specifies the default file name for use in labeling the resource in a local file system. If the name is not a valid file name in the underlying OS, the browser will adjust it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "download",
                "title": "Download attribute"
            },
            "title": "HTMLAnchorElement.download"
        }
    ],
    "drawing-text-to-the-bitmap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "CanvasRenderingContext2D",
            "slug": "API/CanvasRenderingContext2D",
            "summary": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "canvas-text",
                "title": "Text API for Canvas"
            },
            "title": "CanvasRenderingContext2D"
        }
    ],
    "event-handler-attributes": [
        {
            "engines": [],
            "filename": null,
            "name": "Event_handlers",
            "slug": "Guide/Events/Event_handlers",
            "summary": "The Web platform provides several ways to be notified of DOM events. Two common approaches are addEventListener() and the specific onevent handlers.",
            "support": null,
            "title": "DOM onevent handlers"
        }
    ],
    "fakepath-srsly": [
        {
            "engines": [],
            "filename": null,
            "name": "file",
            "slug": "HTML/Element/input/file",
            "summary": "<input> elements with type=\"file\" let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API.",
            "support": null,
            "title": "<input type=\"file\">"
        }
    ],
    "forms": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "forms#Forms",
            "slug": "HTML/Element#Forms",
            "summary": "This page lists all the HTML elements, which are created using tags.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "52"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "61"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "forms",
                "title": "HTML5 form features"
            },
            "title": "HTML elements reference"
        }
    ],
    "global-attributes": [
        {
            "engines": [],
            "filename": null,
            "name": "Global_attributes",
            "slug": "HTML/Global_attributes",
            "summary": "Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.",
            "support": null,
            "title": "Global attributes"
        }
    ],
    "linkTypes": [
        {
            "engines": [],
            "filename": null,
            "name": "Link_types",
            "slug": "HTML/Link_types",
            "summary": "In HTML, link types indicate the relationship between two documents, in which one links to the other using an <a>, <area>, <form>, or <link> element.",
            "support": null,
            "title": "Link types"
        }
    ],
    "mathml": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "mathml#Inline_SVG_and_MathML_support",
            "slug": "Guide/HTML/HTML5/HTML5_Parser#Inline_SVG_and_MathML_support",
            "summary": "Gecko 2 introduces a new parser, based on HTML5. The HTML parser is one of the most complicated and sensitive pieces of a browser. It controls how your HTML source code is turned into web pages and, as such, changes to it are rare. The new parser is faster, complies with the HTML5 standard, and enables a lot of new functionality as well.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML5 Parser"
        }
    ],
    "offline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Using_the_application_cache",
            "slug": "HTML/Using_the_application_cache",
            "summary": "HTML5 provides an application caching mechanism that lets web applications run offline. This Application Cache (AppCache) interface lists resources that browsers should cache to be available offline. Applications that are cached load and work correctly offline, even if users press the Refresh button.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "3.5"
                    },
                    {
                        "version_added": "3",
                        "partial_implementation": true,
                        "notes": "Versions of Firefox prior to 3.5 ignore the <code>NETWORK</code> and <code>FALLBACK</code> sections of the cache manifest file."
                    }
                ],
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "offline-apps",
                "title": "Offline web applications"
            },
            "title": "Using the application cache"
        }
    ],
    "ping": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": null,
            "name": "a#attr-ping",
            "slug": "HTML/Element/a#attr-ping",
            "summary": "The HTML <a> element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "browser.send_pings",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": {
                    "version_added": true,
                    "flags": [
                        {
                            "type": "preference",
                            "name": "browser.send_pings",
                            "value_to_set": "true"
                        }
                    ]
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "ping",
                "title": "Ping attribute"
            },
            "title": "<a>: The Anchor element"
        }
    ],
    "rel-icon": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Link_types#icon",
            "slug": "HTML/Link_types#icon",
            "summary": "In HTML, link types indicate the relationship between two documents, in which one links to the other using an <a>, <area>, <form>, or <link> element.",
            "support": {
                "chrome": {
                    "version_added": "4",
                    "notes": "If both ICO and PNG are available, will use ICO over PNG if ICO has better matching sizes set. (Per caniuse.com.)"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "9",
                    "notes": "In version 15 and later (Blink-based Opera), if both ICO and PNG are available, will use ICO over PNG if ICO has better matching sizes set. (Per caniuse.com.)"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "If both ICO and PNG are available, will ALWAYS use ICO file, regardless of sizes set. (Per caniuse.com.)"
                },
                "safari_ios": {
                    "version_added": false,
                    "notes": "Does not use favicons at all (but may have alternative for bookmarks, etc.). (Per caniuse.com.)"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "38"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "If both ICO and PNG are available, will use ICO over PNG if ICO has better matching sizes set. (Per caniuse.com.)"
                }
            },
            "caniuse": {
                "feature": "link-icon-png",
                "title": "Favicons"
            },
            "title": "Link types"
        }
    ],
    "pseudo-classes": [
        {
            "engines": [],
            "filename": null,
            "name": "Pseudo-classes",
            "slug": "CSS/Pseudo-classes",
            "summary": "A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s).",
            "support": null,
            "title": "Pseudo-classes"
        }
    ],
    "sections": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Document_and_website_structure#HTML_for_structuring_content",
            "slug": "HTML/Introduction_to_HTML/Document_and_website_structure#HTML_for_structuring_content",
            "summary": "At this point you should have a better idea about how to structure a web page/site. In the last article of this module, we'll study how to debug HTML.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "html5semantic",
                "title": "HTML5 semantic elements"
            },
            "title": "Document and website structure"
        }
    ],
    "server-sent-events": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Server-sent_events",
            "slug": "API/Server-sent_events",
            "summary": "Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as Events + data inside the web page.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "eventsource",
                "title": "Server-sent events"
            },
            "title": "Server-sent events"
        }
    ],
    "shared-workers-introduction": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": null,
            "name": "SharedWorker",
            "slug": "API/SharedWorker",
            "summary": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7"
                },
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "sharedworkers",
                "title": "Shared Web Workers"
            },
            "title": "SharedWorker"
        }
    ],
    "shared-workers": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": null,
            "name": "SharedWorker",
            "slug": "API/SharedWorker",
            "summary": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7"
                },
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker"
        }
    ],
    "svg-0": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "svg-0#Inline_SVG_and_MathML_support",
            "slug": "Guide/HTML/HTML5/HTML5_Parser#Inline_SVG_and_MathML_support",
            "summary": "Gecko 2 introduces a new parser, based on HTML5. The HTML parser is one of the most complicated and sensitive pieces of a browser. It controls how your HTML source code is turned into web pages and, as such, changes to it are rare. The new parser is faster, complies with the HTML5 standard, and enables a lot of new functionality as well.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": {
                    "version_added": "37"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "4"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "svg-html5",
                "title": "Inline SVG in HTML5"
            },
            "title": "HTML5 Parser"
        }
    ],
    "the-pattern-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "pattern",
            "slug": "HTML/Attributes/pattern",
            "summary": "The pattern attribute specifies a regular expression the form control's value should match. If a non-null value doesn't conform to the constraints set by the pattern value, the  ValidityState object's read-only patternMismatch property will be true.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "input-pattern",
                "title": "Pattern attribute for input fields"
            },
            "title": "HTML attribute: pattern"
        }
    ],
    "the-readonly-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "readonly",
            "slug": "HTML/Attributes/readonly",
            "summary": "The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": true
                }
            },
            "caniuse": {
                "feature": "readonly-attr",
                "title": "readonly attribute of input and textarea elements"
            },
            "title": "HTML attribute: readonly"
        }
    ],
    "the-xhtml-syntax": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "the-xhtml-syntax#XHTML",
            "slug": "Guide/HTML/XHTML",
            "summary": "XHTML is a term that was historically used to describe HTML documents written to conform with XML syntax rules.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "xhtml",
                "title": "XHTML served as application/xhtml+xml"
            },
            "title": "XHTML"
        }
    ],
    "webstorage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Web_Storage_API",
            "slug": "API/Web_Storage_API",
            "summary": "The Web Storage API provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using cookies.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Web Storage API"
        },
        {
            "engines": [],
            "filename": null,
            "name": "Using_the_Web_Storage_API",
            "slug": "API/Web_Storage_API/Using_the_Web_Storage_API",
            "summary": "The Web Storage API provides mechanisms by which browsers can securely store key/value pairs.",
            "support": null,
            "title": "Using the Web Storage API"
        }
    ],
    "workers": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Web_Workers_API",
            "slug": "API/Web_Workers_API",
            "summary": "Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules or ECMAScript modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "11.7.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "10.5.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ],
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Web Workers API"
        },
        {
            "engines": [],
            "filename": null,
            "name": "Using_web_workers",
            "slug": "API/Web_Workers_API/Using_web_workers",
            "summary": "Web Workers are a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa).",
            "support": null,
            "title": "Using Web Workers"
        }
    ]
}
