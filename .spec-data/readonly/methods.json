{
  "AbortController()": {
    "AbortController()": {
      "args": [],
      "for": [
        "AbortController"
      ],
      "shortname": "dom"
    }
  },
  "AddSearchProvider()": {
    "AddSearchProvider()": {
      "args": [],
      "for": [
        "External"
      ],
      "shortname": "html"
    }
  },
  "AnalyserNode()": {
    "AnalyserNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    },
    "AnalyserNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "Animation ()": {
    "Animation (effect, timeline)": {
      "args": [
        "effect",
        "timeline"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "Animation()": {
    "Animation()": {
      "args": [],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "Animation(effect)": {
      "args": [
        "effect"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "Animation(effect, timeline)": {
      "args": [
        "effect",
        "timeline"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "AnimationEvent()": {
    "AnimationEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "AnimationEvent"
      ],
      "shortname": "css-animations"
    },
    "AnimationEvent(type, animationEventInitDict)": {
      "args": [
        "type",
        "animationEventInitDict"
      ],
      "for": [
        "AnimationEvent"
      ],
      "shortname": "css-animations"
    }
  },
  "AnimationPlaybackEvent()": {
    "AnimationPlaybackEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "AnimationPlaybackEvent"
      ],
      "shortname": "web-animations"
    },
    "AnimationPlaybackEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "AnimationPlaybackEvent"
      ],
      "shortname": "web-animations"
    }
  },
  "Audio()": {
    "Audio(src)": {
      "args": [
        "src"
      ],
      "for": [
        "HTMLAudioElement"
      ],
      "shortname": "html"
    }
  },
  "AudioBuffer()": {
    "AudioBuffer(options)": {
      "args": [
        "options"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioBufferSourceNode()": {
    "AudioBufferSourceNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "AudioBufferSourceNode"
      ],
      "shortname": "webaudio"
    },
    "AudioBufferSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "AudioBufferSourceNode",
        "AudioBufferSourceNode/constructor"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioContext()": {
    "AudioContext()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    },
    "AudioContext(contextOptions)": {
      "args": [
        "contextOptions"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioProcessingEvent()": {
    "AudioProcessingEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "AudioProcessingEvent"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioWorkletNode()": {
    "AudioWorkletNode(context, name)": {
      "args": [
        "context",
        "name"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    },
    "AudioWorkletNode(context, name, options)": {
      "args": [
        "context",
        "name",
        "options"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioWorkletProcessor()": {
    "AudioWorkletProcessor()": {
      "args": [],
      "for": [
        "AudioWorkletProcessor"
      ],
      "shortname": "webaudio"
    }
  },
  "BiquadFilterNode()": {
    "BiquadFilterNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "BiquadFilterNode"
      ],
      "shortname": "webaudio"
    },
    "BiquadFilterNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "BiquadFilterNode"
      ],
      "shortname": "webaudio"
    }
  },
  "Blob()": {
    "Blob()": {
      "args": [],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "Blob(blobParts)": {
      "args": [
        "blobParts"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "Blob(blobParts, options)": {
      "args": [
        "blobParts",
        "options"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    }
  },
  "BluetoothAdvertisingEvent()": {
    "BluetoothAdvertisingEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "BluetoothAdvertisingEvent"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "ByteLengthQueuingStrategy()": {
    "ByteLengthQueuingStrategy(init)": {
      "args": [
        "init"
      ],
      "for": [
        "ByteLengthQueuingStrategy"
      ],
      "shortname": "streams"
    }
  },
  "CSSKeywordValue()": {
    "CSSKeywordValue(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSSKeywordValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathClamp()": {
    "CSSMathClamp(min, val, max)": {
      "args": [
        "min",
        "val",
        "max"
      ],
      "for": [
        "CSSMathClamp"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathInvert()": {
    "CSSMathInvert(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "CSSMathInvert"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathMax()": {
    "CSSMathMax()": {
      "args": [],
      "for": [
        "CSSMathMax"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathMax(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathMax"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathMin()": {
    "CSSMathMin()": {
      "args": [],
      "for": [
        "CSSMathMin"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathMin(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathMin"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathNegate()": {
    "CSSMathNegate(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "CSSMathNegate"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathProduct()": {
    "CSSMathProduct()": {
      "args": [],
      "for": [
        "CSSMathProduct"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathProduct(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathProduct"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathSum()": {
    "CSSMathSum()": {
      "args": [],
      "for": [
        "CSSMathSum"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathSum(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathSum"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMatrixComponent()": {
    "CSSMatrixComponent(matrix)": {
      "args": [
        "matrix"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMatrixComponent(matrix, options)": {
      "args": [
        "matrix",
        "options"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSPerspective()": {
    "CSSPerspective(length)": {
      "args": [
        "length"
      ],
      "for": [
        "CSSPerspective"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSPositionValue()": {
    "CSSPositionValue(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CSSPositionValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSRotate()": {
    "CSSRotate(angle)": {
      "args": [
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    },
    "CSSRotate(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSScale()": {
    "CSSScale(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CSSScale"
      ],
      "shortname": "css-typed-om"
    },
    "CSSScale(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "CSSScale"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSSkew()": {
    "CSSSkew(ax, ay)": {
      "args": [
        "ax",
        "ay"
      ],
      "for": [
        "CSSSkew"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSSkewX()": {
    "CSSSkewX(ax)": {
      "args": [
        "ax"
      ],
      "for": [
        "CSSSkewX"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSSkewY()": {
    "CSSSkewY(ay)": {
      "args": [
        "ay"
      ],
      "for": [
        "CSSSkewY"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSTransformValue()": {
    "CSSTransformValue(transforms)": {
      "args": [
        "transforms"
      ],
      "for": [
        "CSSTransformValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSTranslate()": {
    "CSSTranslate(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CSSTranslate"
      ],
      "shortname": "css-typed-om"
    },
    "CSSTranslate(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "CSSTranslate"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSUnitValue()": {
    "CSSUnitValue(value, unit)": {
      "args": [
        "value",
        "unit"
      ],
      "for": [
        "CSSUnitValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSUnparsedValue()": {
    "CSSUnparsedValue(members)": {
      "args": [
        "members"
      ],
      "for": [
        "CSSUnparsedValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSVariableReferenceValue()": {
    "CSSVariableReferenceValue(variable)": {
      "args": [
        "variable"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    },
    "CSSVariableReferenceValue(variable, fallback)": {
      "args": [
        "variable",
        "fallback"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "ChannelMergerNode()": {
    "ChannelMergerNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ChannelMergerNode"
      ],
      "shortname": "webaudio"
    },
    "ChannelMergerNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ChannelMergerNode",
        "ChannelMergerNode/constructor"
      ],
      "shortname": "webaudio"
    }
  },
  "ChannelSplitterNode()": {
    "ChannelSplitterNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ChannelSplitterNode"
      ],
      "shortname": "webaudio"
    },
    "ChannelSplitterNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ChannelSplitterNode",
        "ChannelSplitterNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "Comment()": {
    "Comment()": {
      "args": [],
      "for": [
        "Comment"
      ],
      "shortname": "dom"
    },
    "Comment(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Comment"
      ],
      "shortname": "dom"
    }
  },
  "CompositionEvent()": {
    "CompositionEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "ui-events"
    },
    "CompositionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "ConstantSourceNode()": {
    "ConstantSourceNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ConstantSourceNode"
      ],
      "shortname": "webaudio"
    },
    "ConstantSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ConstantSourceNode",
        "ConstantSourceNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "ConvolverNode()": {
    "ConvolverNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ConvolverNode"
      ],
      "shortname": "webaudio"
    },
    "ConvolverNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ConvolverNode",
        "ConvolverNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "CountQueuingStrategy()": {
    "CountQueuingStrategy(init)": {
      "args": [
        "init"
      ],
      "for": [
        "CountQueuingStrategy"
      ],
      "shortname": "streams"
    }
  },
  "CustomEvent()": {
    "CustomEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "CustomEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    }
  },
  "DOMException()": {
    "DOMException()": {
      "args": [],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    },
    "DOMException(message)": {
      "args": [
        "message"
      ],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    },
    "DOMException(message, name)": {
      "args": [
        "message",
        "name"
      ],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    }
  },
  "DOMMatrix()": {
    "DOMMatrix()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "DOMMatrix(init)": {
      "args": [
        "init"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "DOMMatrixReadOnly()": {
    "DOMMatrixReadOnly()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMMatrixReadOnly(init)": {
      "args": [
        "init"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "DOMPoint()": {
    "DOMPoint()": {
      "args": [],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x, y, z, w)": {
      "args": [
        "x",
        "y",
        "z",
        "w"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    }
  },
  "DOMPointReadOnly()": {
    "DOMPointReadOnly()": {
      "args": [],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x, y, z, w)": {
      "args": [
        "x",
        "y",
        "z",
        "w"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "DOMQuad()": {
    "DOMQuad()": {
      "args": [],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1)": {
      "args": [
        "p1"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1, p2)": {
      "args": [
        "p1",
        "p2"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1, p2, p3)": {
      "args": [
        "p1",
        "p2",
        "p3"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1, p2, p3, p4)": {
      "args": [
        "p1",
        "p2",
        "p3",
        "p4"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    }
  },
  "DOMRect()": {
    "DOMRect()": {
      "args": [],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x, y, width)": {
      "args": [
        "x",
        "y",
        "width"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x, y, width, height)": {
      "args": [
        "x",
        "y",
        "width",
        "height"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    }
  },
  "DOMRectReadOnly()": {
    "DOMRectReadOnly()": {
      "args": [],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x, y, width)": {
      "args": [
        "x",
        "y",
        "width"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x, y, width, height)": {
      "args": [
        "x",
        "y",
        "width",
        "height"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "DelayNode()": {
    "DelayNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "DelayNode"
      ],
      "shortname": "webaudio"
    },
    "DelayNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "DelayNode",
        "DelayNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "Document()": {
    "Document()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "DocumentFragment()": {
    "DocumentFragment()": {
      "args": [],
      "for": [
        "DocumentFragment"
      ],
      "shortname": "dom"
    }
  },
  "DocumentTimeline ()": {
    "DocumentTimeline (options)": {
      "args": [
        "options"
      ],
      "for": [
        "DocumentTimeline"
      ],
      "shortname": "web-animations"
    }
  },
  "DocumentTimeline()": {
    "DocumentTimeline()": {
      "args": [],
      "for": [
        "DocumentTimeline"
      ],
      "shortname": "web-animations"
    },
    "DocumentTimeline(options)": {
      "args": [
        "options"
      ],
      "for": [
        "DocumentTimeline"
      ],
      "shortname": "web-animations"
    }
  },
  "DynamicsCompressorNode()": {
    "DynamicsCompressorNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "DynamicsCompressorNode"
      ],
      "shortname": "webaudio"
    },
    "DynamicsCompressorNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "DynamicsCompressorNode",
        "DynamicsCompressorNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "Event()": {
    "Event(type)": {
      "args": [
        "type"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    },
    "Event(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "EventTarget()": {
    "EventTarget()": {
      "args": [],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "ExtendableEvent()": {
    "ExtendableEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ExtendableEvent"
      ],
      "shortname": "service-workers"
    },
    "ExtendableEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ExtendableEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "ExtendableMessageEvent()": {
    "ExtendableMessageEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ExtendableMessageEvent"
      ],
      "shortname": "service-workers"
    },
    "ExtendableMessageEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ExtendableMessageEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "FederatedCredential()": {
    "FederatedCredential(data)": {
      "args": [
        "data"
      ],
      "for": [
        "FederatedCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "FetchEvent()": {
    "FetchEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "FetchEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "File()": {
    "File(fileBits, fileName)": {
      "args": [
        "fileBits",
        "fileName"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    },
    "File(fileBits, fileName, options)": {
      "args": [
        "fileBits",
        "fileName",
        "options"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    }
  },
  "FileReader()": {
    "FileReader()": {
      "args": [],
      "for": [
        "FileReader"
      ],
      "shortname": "fileapi"
    }
  },
  "FileReaderSync()": {
    "FileReaderSync()": {
      "args": [],
      "for": [
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "FocusEvent()": {
    "FocusEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "FocusEvent"
      ],
      "shortname": "ui-events"
    },
    "FocusEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "FocusEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "FontFace()": {
    "FontFace()": {
      "args": [],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    },
    "FontFace(family, source)": {
      "args": [
        "family",
        "source"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    },
    "FontFace(family, source, descriptors)": {
      "args": [
        "family",
        "source",
        "descriptors"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    }
  },
  "FontFaceSet()": {
    "FontFaceSet(initialFaces)": {
      "args": [
        "initialFaces"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    }
  },
  "FontFaceSetLoadEvent()": {
    "FontFaceSetLoadEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "FontFaceSetLoadEvent"
      ],
      "shortname": "css-font-loading"
    },
    "FontFaceSetLoadEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "FontFaceSetLoadEvent"
      ],
      "shortname": "css-font-loading"
    }
  },
  "FormData()": {
    "FormData()": {
      "args": [],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "FormData(form)": {
      "args": [
        "form"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    }
  },
  "FragmentResult()": {
    "FragmentResult()": {
      "args": [],
      "for": [
        "FragmentResult"
      ],
      "shortname": "css-layout-api"
    },
    "FragmentResult(options)": {
      "args": [
        "options"
      ],
      "for": [
        "FragmentResult"
      ],
      "shortname": "css-layout-api"
    }
  },
  "GainNode()": {
    "GainNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "GainNode"
      ],
      "shortname": "webaudio"
    },
    "GainNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "GainNode",
        "GainNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "Headers()": {
    "Headers()": {
      "args": [],
      "for": [
        "Headers"
      ],
      "shortname": "fetch"
    },
    "Headers(init)": {
      "args": [
        "init"
      ],
      "for": [
        "Headers"
      ],
      "shortname": "fetch"
    }
  },
  "Highlight()": {
    "Highlight(CSSOMString name, AbstractRange... initialRanges)": {
      "args": [
        "CSSOMString name",
        "AbstractRange... initialRanges"
      ],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    },
    "Highlight(name)": {
      "args": [
        "name"
      ],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    },
    "Highlight(name, ...initialRanges)": {
      "args": [
        "name",
        "...initialRanges"
      ],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    }
  },
  "Hz()": {
    "Hz(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "IDBVersionChangeEvent()": {
    "IDBVersionChangeEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "IDBVersionChangeEvent"
      ],
      "shortname": "indexeddb"
    },
    "IDBVersionChangeEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "IDBVersionChangeEvent"
      ],
      "shortname": "indexeddb"
    }
  },
  "IIRFilterNode()": {
    "IIRFilterNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "IIRFilterNode",
        "IIRFilterNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "Image()": {
    "Image(width, height)": {
      "args": [
        "width",
        "height"
      ],
      "for": [
        "HTMLImageElement"
      ],
      "shortname": "html"
    }
  },
  "ImageData()": {
    "ImageData()": {
      "args": [],
      "for": [
        "ImageData"
      ],
      "shortname": "html"
    }
  },
  "InputEvent()": {
    "InputEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "InputEvent"
      ],
      "shortname": "ui-events"
    },
    "InputEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "InputEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "IntersectionObserver()": {
    "IntersectionObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "IntersectionObserver"
      ],
      "shortname": "intersection-observer"
    },
    "IntersectionObserver(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "IntersectionObserver"
      ],
      "shortname": "intersection-observer"
    }
  },
  "IntersectionObserverEntry()": {
    "IntersectionObserverEntry(intersectionObserverEntryInit)": {
      "args": [
        "intersectionObserverEntryInit"
      ],
      "for": [
        "IntersectionObserverEntry"
      ],
      "shortname": "intersection-observer"
    }
  },
  "IsSearchProviderInstalled()": {
    "IsSearchProviderInstalled()": {
      "args": [],
      "for": [
        "External"
      ],
      "shortname": "html"
    }
  },
  "KeyboardEvent()": {
    "KeyboardEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "ui-events"
    },
    "KeyboardEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "KeyframeEffect ()": {
    "KeyframeEffect (source)": {
      "args": [
        "source"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "KeyframeEffect (target, keyframes, options)": {
      "args": [
        "target",
        "keyframes",
        "options"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "KeyframeEffect()": {
    "KeyframeEffect(source)": {
      "args": [
        "source"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "KeyframeEffect(target, keyframes)": {
      "args": [
        "target",
        "keyframes"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "KeyframeEffect(target, keyframes, options)": {
      "args": [
        "target",
        "keyframes",
        "options"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "LayoutConstraints()": {
    "LayoutConstraints()": {
      "args": [],
      "for": [
        "LayoutConstraints"
      ],
      "shortname": "css-layout-api"
    },
    "LayoutConstraints(options)": {
      "args": [
        "options"
      ],
      "for": [
        "LayoutConstraints"
      ],
      "shortname": "css-layout-api"
    }
  },
  "MediaElementAudioSourceNode()": {
    "MediaElementAudioSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaElementAudioSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MediaQueryListEvent()": {
    "MediaQueryListEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "MediaQueryListEvent"
      ],
      "shortname": "cssom-view"
    },
    "MediaQueryListEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "MediaQueryListEvent"
      ],
      "shortname": "cssom-view"
    }
  },
  "MediaStreamAudioDestinationNode()": {
    "MediaStreamAudioDestinationNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "MediaStreamAudioDestinationNode"
      ],
      "shortname": "webaudio"
    },
    "MediaStreamAudioDestinationNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaStreamAudioDestinationNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MediaStreamAudioSourceNode()": {
    "MediaStreamAudioSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaStreamAudioSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MediaStreamTrackAudioSourceNode()": {
    "MediaStreamTrackAudioSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaStreamTrackAudioSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MerchantValidationEvent.complete()": {
    "MerchantValidationEvent.complete()": {
      "args": [],
      "for": [
        "MerchantValidationEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "MerchantValidationEvent.constructor()": {
    "MerchantValidationEvent.constructor()": {
      "args": [],
      "for": [
        "MerchantValidationEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "MouseEvent()": {
    "MouseEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "ui-events"
    },
    "MouseEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "MutationObserver()": {
    "MutationObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "MutationObserver"
      ],
      "shortname": "dom"
    }
  },
  "NavigationEvent()": {
    "NavigationEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "NavigationEvent"
      ],
      "shortname": "css-nav"
    },
    "NavigationEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "NavigationEvent"
      ],
      "shortname": "css-nav"
    }
  },
  "OfflineAudioCompletionEvent()": {
    "OfflineAudioCompletionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "OfflineAudioCompletionEvent"
      ],
      "shortname": "webaudio"
    }
  },
  "OfflineAudioContext()": {
    "OfflineAudioContext(contextOptions)": {
      "args": [
        "contextOptions"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    },
    "OfflineAudioContext(numberOfChannels, length, sampleRate)": {
      "args": [
        "numberOfChannels",
        "length",
        "sampleRate"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "Option()": {
    "Option(text, value, defaultSelected, selected)": {
      "args": [
        "text",
        "value",
        "defaultSelected",
        "selected"
      ],
      "for": [
        "HTMLOptionElement"
      ],
      "shortname": "html"
    }
  },
  "OscillatorNode()": {
    "OscillatorNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "OscillatorNode"
      ],
      "shortname": "webaudio"
    },
    "OscillatorNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "OscillatorNode"
      ],
      "shortname": "webaudio"
    }
  },
  "PannerNode()": {
    "PannerNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "PannerNode"
      ],
      "shortname": "webaudio"
    },
    "PannerNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "PannerNode"
      ],
      "shortname": "webaudio"
    }
  },
  "PasswordCredential()": {
    "PasswordCredential(data)": {
      "args": [
        "data"
      ],
      "for": [
        "PasswordCredential"
      ],
      "shortname": "credential-management"
    },
    "PasswordCredential(form)": {
      "args": [
        "form"
      ],
      "for": [
        "PasswordCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "PaymentAddress.toJSON()": {
    "PaymentAddress.toJSON()": {
      "args": [],
      "for": [
        "PaymentAddress"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentMethodChangeEvent.constructor()": {
    "PaymentMethodChangeEvent.constructor()": {
      "args": [],
      "for": [
        "PaymentMethodChangeEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentRequest.abort()": {
    "PaymentRequest.abort()": {
      "args": [],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentRequest.canMakePayment()": {
    "PaymentRequest.canMakePayment()": {
      "args": [],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentRequest.constructor()": {
    "PaymentRequest.constructor()": {
      "args": [],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentRequest.show()": {
    "PaymentRequest.show()": {
      "args": [],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentRequestUpdateEvent.PaymentRequestUpdateEvent()": {
    "PaymentRequestUpdateEvent.PaymentRequestUpdateEvent()": {
      "args": [],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentRequestUpdateEvent.constructor()": {
    "PaymentRequestUpdateEvent.constructor()": {
      "args": [],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentRequestUpdateEvent.updateWith()": {
    "PaymentRequestUpdateEvent.updateWith()": {
      "args": [],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentResponse.complete()": {
    "PaymentResponse.complete()": {
      "args": [],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentResponse.retry()": {
    "PaymentResponse.retry()": {
      "args": [],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    }
  },
  "PaymentResponse.toJSON()": {
    "PaymentResponse.toJSON()": {
      "args": [],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    }
  },
  "Performance.now()": {
    "Performance.now()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "hr-time"
    }
  },
  "Performance.toJSON()": {
    "Performance.toJSON()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "hr-time"
    }
  },
  "PeriodicWave()": {
    "PeriodicWave(context)": {
      "args": [
        "context"
      ],
      "for": [
        "PeriodicWave"
      ],
      "shortname": "webaudio"
    },
    "PeriodicWave(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "PeriodicWave"
      ],
      "shortname": "webaudio"
    }
  },
  "ProgressEvent()": {
    "ProgressEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ProgressEvent"
      ],
      "shortname": "xhr"
    },
    "ProgressEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ProgressEvent"
      ],
      "shortname": "xhr"
    }
  },
  "Q()": {
    "Q(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "Range()": {
    "Range()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "ReadableStream()": {
    "ReadableStream()": {
      "args": [],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "ReadableStream(underlyingSource)": {
      "args": [
        "underlyingSource"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "ReadableStream(underlyingSource, strategy)": {
      "args": [
        "underlyingSource",
        "strategy"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "ReadableStreamBYOBReader()": {
    "ReadableStreamBYOBReader(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "ReadableStreamBYOBReader"
      ],
      "shortname": "streams"
    }
  },
  "ReadableStreamDefaultReader()": {
    "ReadableStreamDefaultReader(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "ReadableStreamDefaultReader"
      ],
      "shortname": "streams"
    }
  },
  "ReportingObserver()": {
    "ReportingObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "ReportingObserver"
      ],
      "shortname": "reporting"
    },
    "ReportingObserver(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "ReportingObserver"
      ],
      "shortname": "reporting"
    }
  },
  "Request()": {
    "Request(input)": {
      "args": [
        "input"
      ],
      "for": [
        "Request"
      ],
      "shortname": "fetch"
    },
    "Request(input, init)": {
      "args": [
        "input",
        "init"
      ],
      "for": [
        "Request"
      ],
      "shortname": "fetch"
    }
  },
  "ResizeObservation()": {
    "ResizeObservation(target)": {
      "args": [
        "target"
      ],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    },
    "ResizeObservation(target, options)": {
      "args": [
        "target",
        "options"
      ],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    }
  },
  "ResizeObserver()": {
    "ResizeObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "ResizeObserver"
      ],
      "shortname": "resize-observer"
    }
  },
  "Response()": {
    "Response()": {
      "args": [],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "Response(body)": {
      "args": [
        "body"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "Response(body, init)": {
      "args": [
        "body",
        "init"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    }
  },
  "ScrollTimeline()": {
    "ScrollTimeline()": {
      "args": [],
      "for": [
        "ScrollTimeline"
      ],
      "shortname": "scroll-animations"
    },
    "ScrollTimeline(options)": {
      "args": [
        "options"
      ],
      "for": [
        "ScrollTimeline"
      ],
      "shortname": "scroll-animations"
    }
  },
  "SecurityPolicyViolationEvent()": {
    "SecurityPolicyViolationEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "SecurityPolicyViolationEvent"
      ],
      "shortname": "csp"
    },
    "SecurityPolicyViolationEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SecurityPolicyViolationEvent"
      ],
      "shortname": "csp"
    }
  },
  "SensorErrorEvent()": {
    "SensorErrorEvent(type, errorEventInitDict)": {
      "args": [
        "type",
        "errorEventInitDict"
      ],
      "for": [
        "SensorErrorEvent"
      ],
      "shortname": "generic-sensor"
    }
  },
  "StatefulAnimator()": {
    "StatefulAnimator()": {
      "args": [],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    },
    "StatefulAnimator(options)": {
      "args": [
        "options"
      ],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    },
    "StatefulAnimator(options, state)": {
      "args": [
        "options",
        "state"
      ],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "StatelessAnimator()": {
    "StatelessAnimator()": {
      "args": [],
      "for": [
        "StatelessAnimator"
      ],
      "shortname": "css-animation-worklet"
    },
    "StatelessAnimator(options)": {
      "args": [
        "options"
      ],
      "for": [
        "StatelessAnimator"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "StaticRange()": {
    "StaticRange(init)": {
      "args": [
        "init"
      ],
      "for": [
        "StaticRange"
      ],
      "shortname": "dom"
    }
  },
  "StereoPannerNode()": {
    "StereoPannerNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "StereoPannerNode"
      ],
      "shortname": "webaudio"
    },
    "StereoPannerNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "StereoPannerNode"
      ],
      "shortname": "webaudio"
    }
  },
  "SyncEvent()": {
    "SyncEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "SyncEvent"
      ],
      "shortname": "web-background-sync"
    }
  },
  "Text()": {
    "Text()": {
      "args": [],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    },
    "Text(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    }
  },
  "TextDecoder()": {
    "TextDecoder()": {
      "args": [],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "TextDecoder(label)": {
      "args": [
        "label"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "TextDecoder(label, options)": {
      "args": [
        "label",
        "options"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    }
  },
  "TextDecoderStream()": {
    "TextDecoderStream()": {
      "args": [],
      "for": [
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "TextDecoderStream(label)": {
      "args": [
        "label"
      ],
      "for": [
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "TextDecoderStream(label, options)": {
      "args": [
        "label",
        "options"
      ],
      "for": [
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    }
  },
  "TextEncoder()": {
    "TextEncoder()": {
      "args": [],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    }
  },
  "TextEncoderStream()": {
    "TextEncoderStream()": {
      "args": [],
      "for": [
        "TextEncoderStream"
      ],
      "shortname": "encoding"
    }
  },
  "TransformStream()": {
    "TransformStream()": {
      "args": [],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "TransformStream(transformer)": {
      "args": [
        "transformer"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "TransformStream(transformer, writableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "TransformStream(transformer, writableStrategy, readableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy",
        "readableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    }
  },
  "TransitionEvent()": {
    "TransitionEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "TransitionEvent"
      ],
      "shortname": "css-transitions"
    },
    "TransitionEvent(type, transitionEventInitDict)": {
      "args": [
        "type",
        "transitionEventInitDict"
      ],
      "for": [
        "TransitionEvent"
      ],
      "shortname": "css-transitions"
    }
  },
  "UIEvent()": {
    "UIEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "ui-events"
    },
    "UIEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "URL()": {
    "URL(url)": {
      "args": [
        "url"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    },
    "URL(url, base)": {
      "args": [
        "url",
        "base"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    }
  },
  "URLSearchParams()": {
    "URLSearchParams()": {
      "args": [],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    },
    "URLSearchParams(init)": {
      "args": [
        "init"
      ],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    }
  },
  "USBAlternateInterface()": {
    "USBAlternateInterface(deviceInterface, alternateSetting)": {
      "args": [
        "deviceInterface",
        "alternateSetting"
      ],
      "for": [
        "USBAlternateInterface"
      ],
      "shortname": "webusb"
    }
  },
  "USBConfiguration()": {
    "USBConfiguration(device, configurationValue)": {
      "args": [
        "device",
        "configurationValue"
      ],
      "for": [
        "USBConfiguration"
      ],
      "shortname": "webusb"
    }
  },
  "USBConnectionEvent()": {
    "USBConnectionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "USBConnectionEvent"
      ],
      "shortname": "webusb"
    }
  },
  "USBEndpoint()": {
    "USBEndpoint(alternate, endpointNumber, direction)": {
      "args": [
        "alternate",
        "endpointNumber",
        "direction"
      ],
      "for": [
        "USBEndpoint"
      ],
      "shortname": "webusb"
    }
  },
  "USBInTransferResult()": {
    "USBInTransferResult(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBInTransferResult"
      ],
      "shortname": "webusb"
    },
    "USBInTransferResult(status, data)": {
      "args": [
        "status",
        "data"
      ],
      "for": [
        "USBInTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "USBInterface()": {
    "USBInterface(configuration, interfaceNumber)": {
      "args": [
        "configuration",
        "interfaceNumber"
      ],
      "for": [
        "USBInterface"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousInTransferPacket()": {
    "USBIsochronousInTransferPacket(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBIsochronousInTransferPacket"
      ],
      "shortname": "webusb"
    },
    "USBIsochronousInTransferPacket(status, data)": {
      "args": [
        "status",
        "data"
      ],
      "for": [
        "USBIsochronousInTransferPacket"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousInTransferResult()": {
    "USBIsochronousInTransferResult(packets)": {
      "args": [
        "packets"
      ],
      "for": [
        "USBIsochronousInTransferResult"
      ],
      "shortname": "webusb"
    },
    "USBIsochronousInTransferResult(packets, data)": {
      "args": [
        "packets",
        "data"
      ],
      "for": [
        "USBIsochronousInTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousOutTransferPacket()": {
    "USBIsochronousOutTransferPacket(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBIsochronousOutTransferPacket"
      ],
      "shortname": "webusb"
    },
    "USBIsochronousOutTransferPacket(status, bytesWritten)": {
      "args": [
        "status",
        "bytesWritten"
      ],
      "for": [
        "USBIsochronousOutTransferPacket"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousOutTransferResult()": {
    "USBIsochronousOutTransferResult(packets)": {
      "args": [
        "packets"
      ],
      "for": [
        "USBIsochronousOutTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "USBOutTransferResult()": {
    "USBOutTransferResult(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "USBOutTransferResult(status, bytesWritten)": {
      "args": [
        "status",
        "bytesWritten"
      ],
      "for": [
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "ValueEvent()": {
    "ValueEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ValueEvent"
      ],
      "shortname": "web-bluetooth"
    },
    "ValueEvent(type, initDict)": {
      "args": [
        "type",
        "initDict"
      ],
      "for": [
        "ValueEvent"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "WaveShaperNode()": {
    "WaveShaperNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    },
    "WaveShaperNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    }
  },
  "WheelEvent()": {
    "WheelEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "WheelEvent"
      ],
      "shortname": "ui-events"
    },
    "WheelEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "WheelEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "WorkletAnimation()": {
    "WorkletAnimation(animatorName)": {
      "args": [
        "animatorName"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "WorkletAnimation(animatorName, effects)": {
      "args": [
        "animatorName",
        "effects"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "WorkletAnimation(animatorName, effects, timeline)": {
      "args": [
        "animatorName",
        "effects",
        "timeline"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "WorkletAnimation(animatorName, effects, timeline, options)": {
      "args": [
        "animatorName",
        "effects",
        "timeline",
        "options"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "WritableStream()": {
    "WritableStream()": {
      "args": [],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "WritableStream(underlyingSink)": {
      "args": [
        "underlyingSink"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "WritableStream(underlyingSink, strategy)": {
      "args": [
        "underlyingSink",
        "strategy"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    }
  },
  "WritableStreamDefaultWriter()": {
    "WritableStreamDefaultWriter(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    }
  },
  "XMLHttpRequest()": {
    "XMLHttpRequest()": {
      "args": [],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "XPathEvaluator()": {
    "XPathEvaluator()": {
      "args": [],
      "for": [
        "XPathEvaluator"
      ],
      "shortname": "dom"
    }
  },
  "XRInputSourceEvent()": {
    "XRInputSourceEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRInputSourceEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRInputSourcesChangeEvent()": {
    "XRInputSourcesChangeEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRInputSourcesChangeEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRLayerEvent()": {
    "XRLayerEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRLayerEvent"
      ],
      "shortname": "webxr-layers"
    }
  },
  "XRMediaBinding()": {
    "XRMediaBinding(XRSession session)": {
      "args": [
        "XRSession session"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "XRMediaBinding(session)": {
      "args": [
        "session"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "XRRay()": {
    "XRRay()": {
      "args": [],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "XRRay(origin)": {
      "args": [
        "origin"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "XRRay(origin, direction)": {
      "args": [
        "origin",
        "direction"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "XRRay(transform)": {
      "args": [
        "transform"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "XRReferenceSpaceEvent()": {
    "XRReferenceSpaceEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRReferenceSpaceEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRRigidTransform()": {
    "XRRigidTransform()": {
      "args": [],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "XRRigidTransform(position)": {
      "args": [
        "position"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "XRRigidTransform(position, orientation)": {
      "args": [
        "position",
        "orientation"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    }
  },
  "XRSessionEvent()": {
    "XRSessionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRSessionEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRWebGLBinding()": {
    "XRWebGLBinding(session, context)": {
      "args": [
        "session",
        "context"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "XRWebGLLayer()": {
    "XRWebGLLayer(session, context)": {
      "args": [
        "session",
        "context"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    },
    "XRWebGLLayer(session, context, layerInit)": {
      "args": [
        "session",
        "context",
        "layerInit"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    }
  },
  "[[CollectFromCredentialStore]]()": {
    "[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin",
        "options",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "FederatedCredential",
        "PasswordCredential",
        "PublicKeyCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "[[Create]]()": {
    "[[Create]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin",
        "options",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "FederatedCredential",
        "PasswordCredential",
        "PublicKeyCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "[[DiscoverFromExternalSource]]()": {
    "[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin",
        "options",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "PublicKeyCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "[[Store]]()": {
    "[[Store]](credential, sameOriginWithAncestors)": {
      "args": [
        "credential",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "FederatedCredential",
        "PasswordCredential",
        "PublicKeyCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "[[preventSilentAccess]]()": {
    "[[preventSilentAccess]](credential, sameOriginWithAncestors)": {
      "args": [
        "credential",
        "sameOriginWithAncestors"
      ],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "abort()": {
    "abort()": {
      "args": [],
      "for": [
        "AbortController",
        "ApplicationCache",
        "FileReader",
        "IDBTransaction",
        "PaymentRequest",
        "WritableStream",
        "WritableStreamDefaultWriter",
        "XMLHttpRequest"
      ],
      "shortname": "dom"
    },
    "abort(reason)": {
      "args": [
        "reason"
      ],
      "for": [
        "WritableStream",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    }
  },
  "acceptNode()": {
    "acceptNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "NodeFilter"
      ],
      "shortname": "dom"
    }
  },
  "add()": {
    "add()": {
      "args": [],
      "for": [
        "CSSNumericValue",
        "DOMTokenList",
        "DataTransferItemList",
        "HTMLSelectElement",
        "RdfDataset",
        "RdfGraph"
      ],
      "shortname": "css-typed-om"
    },
    "add(...tokens)": {
      "args": [
        "...tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "add(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "add(Highlight value)": {
      "args": [
        "Highlight value"
      ],
      "for": [
        "HighlightsRegister"
      ],
      "shortname": "css-highlight-api"
    },
    "add(element)": {
      "args": [
        "element"
      ],
      "for": [
        "HTMLOptionsCollection"
      ],
      "shortname": "html"
    },
    "add(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "add(graphName, graph)": {
      "args": [
        "graphName",
        "graph"
      ],
      "for": [
        "RdfDataset"
      ],
      "shortname": "json-ld11-api"
    },
    "add(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "add(tokens)": {
      "args": [
        "tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "add(triple)": {
      "args": [
        "triple"
      ],
      "for": [
        "RdfGraph"
      ],
      "shortname": "json-ld11-api"
    },
    "add(value)": {
      "args": [
        "value"
      ],
      "for": [
        "HighlightsRegister",
        "IDBObjectStore"
      ],
      "shortname": "css-highlight-api"
    },
    "add(value, key)": {
      "args": [
        "value",
        "key"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "addAll()": {
    "addAll(requests)": {
      "args": [
        "requests"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    }
  },
  "addColorStop()": {
    "addColorStop(offset, color)": {
      "args": [
        "offset",
        "color"
      ],
      "for": [
        "CanvasGradient"
      ],
      "shortname": "html"
    }
  },
  "addCue()": {
    "addCue(cue)": {
      "args": [
        "cue"
      ],
      "for": [
        "TextTrack"
      ],
      "shortname": "html"
    }
  },
  "addEventListener()": {
    "addEventListener()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "addEventListener(type, callback)": {
      "args": [
        "type",
        "callback"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    },
    "addEventListener(type, callback, options)": {
      "args": [
        "type",
        "callback",
        "options"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "addIceCandidate!overload-1()": {
    "addIceCandidate!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addIceCandidate!overload-1(candidate, successCallback, failureCallback)": {
      "args": [
        "candidate",
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "addIceCandidate()": {
    "addIceCandidate()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addIceCandidate(, candidate)": {
      "args": [
        "",
        "candidate"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "addListener()": {
    "addListener(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    },
    "addListener(listener)": {
      "args": [
        "listener"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    }
  },
  "addModule()": {
    "addModule(moduleURL)": {
      "args": [
        "moduleURL"
      ],
      "for": [
        "Worklet"
      ],
      "shortname": "html"
    },
    "addModule(moduleURL, options)": {
      "args": [
        "moduleURL",
        "options"
      ],
      "for": [
        "Worklet"
      ],
      "shortname": "worklets"
    }
  },
  "addPath()": {
    "addPath(b, transform)": {
      "args": [
        "b",
        "transform"
      ],
      "for": [
        "Path2D"
      ],
      "shortname": "html"
    }
  },
  "addRule()": {
    "addRule()": {
      "args": [],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector)": {
      "args": [
        "selector"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector, block, optionalIndex)": {
      "args": [
        "selector",
        "block",
        "optionalIndex"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector, style)": {
      "args": [
        "selector",
        "style"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector, style, index)": {
      "args": [
        "selector",
        "style",
        "index"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    }
  },
  "addTextTrack()": {
    "addTextTrack(kind)": {
      "args": [
        "kind"
      ],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    },
    "addTextTrack(kind, label)": {
      "args": [
        "kind",
        "label"
      ],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "addTrack()": {
    "addTrack()": {
      "args": [],
      "for": [
        "MediaStream",
        "RTCPeerConnection"
      ],
      "shortname": "mediacapture-streams"
    },
    "addTrack(track)": {
      "args": [
        "track"
      ],
      "for": [
        "MediaStream",
        "RTCPeerConnection"
      ],
      "shortname": "mediacapture-streams"
    },
    "addTrack(track, streams)": {
      "args": [
        "track",
        "streams"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "addTransceiver()": {
    "addTransceiver()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addTransceiver(trackOrKind)": {
      "args": [
        "trackOrKind"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addTransceiver(trackOrKind, init)": {
      "args": [
        "trackOrKind",
        "init"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "adoptNode()": {
    "adoptNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "advance()": {
    "advance(count)": {
      "args": [
        "count"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "after()": {
    "after()": {
      "args": [],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "after(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "after(nodes)": {
      "args": [
        "nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    }
  },
  "alert()": {
    "alert(message)": {
      "args": [
        "message"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "allowedFeatures()": {
    "allowedFeatures()": {
      "args": [],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "allowsFeature()": {
    "allowsFeature(feature)": {
      "args": [
        "feature"
      ],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    },
    "allowsFeature(feature, origin)": {
      "args": [
        "feature",
        "origin"
      ],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "animate()": {
    "animate(keyframes)": {
      "args": [
        "keyframes"
      ],
      "for": [
        "Animatable"
      ],
      "shortname": "web-animations"
    },
    "animate(keyframes, options)": {
      "args": [
        "keyframes",
        "options"
      ],
      "for": [
        "Animatable"
      ],
      "shortname": "web-animations"
    }
  },
  "append()": {
    "append()": {
      "args": [],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "append(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "append(name, blobValue)": {
      "args": [
        "name",
        "blobValue"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "append(name, blobValue, filename)": {
      "args": [
        "name",
        "blobValue",
        "filename"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "append(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "append(nodes)": {
      "args": [
        "nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "append(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    },
    "append(property, ...values)": {
      "args": [
        "property",
        "...values"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    }
  },
  "appendChild()": {
    "appendChild()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "appendChild(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "appendData()": {
    "appendData(data)": {
      "args": [
        "data"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "appendMedium()": {
    "appendMedium(medium)": {
      "args": [
        "medium"
      ],
      "for": [
        "MediaList"
      ],
      "shortname": "cssom"
    }
  },
  "appendRule()": {
    "appendRule(rule)": {
      "args": [
        "rule"
      ],
      "for": [
        "CSSKeyframesRule"
      ],
      "shortname": "css-animations"
    }
  },
  "applyConstraints()": {
    "applyConstraints()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    },
    "applyConstraints(, constraints)": {
      "args": [
        "",
        "constraints"
      ],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "arc()": {
    "arc(x, y, radius, startAngle, endAngle)": {
      "args": [
        "x",
        "y",
        "radius",
        "startAngle",
        "endAngle"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "arcTo()": {
    "arcTo(x1, y1, x2, y2, radius)": {
      "args": [
        "x1",
        "y1",
        "x2",
        "y2",
        "radius"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "arrayBuffer()": {
    "arrayBuffer()": {
      "args": [],
      "for": [
        "Blob",
        "Body"
      ],
      "shortname": "fetch"
    }
  },
  "assert()": {
    "assert()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "assert(condition)": {
      "args": [
        "condition"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "assert(condition, ...data)": {
      "args": [
        "condition",
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "assign()": {
    "assign(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Location"
      ],
      "shortname": "html"
    }
  },
  "assignedElements()": {
    "assignedElements()": {
      "args": [],
      "for": [
        "HTMLSlotElement"
      ],
      "shortname": "html"
    }
  },
  "assignedNodes()": {
    "assignedNodes()": {
      "args": [],
      "for": [
        "HTMLSlotElement"
      ],
      "shortname": "html"
    }
  },
  "atob()": {
    "atob(data)": {
      "args": [
        "data"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "attachInternals()": {
    "attachInternals()": {
      "args": [],
      "for": [
        "HTMLElement"
      ],
      "shortname": "html"
    }
  },
  "attachShadow()": {
    "attachShadow()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "attachShadow(init)": {
      "args": [
        "init"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "back()": {
    "back()": {
      "args": [],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "before()": {
    "before()": {
      "args": [],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "before(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "before(nodes)": {
      "args": [
        "nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    }
  },
  "beginPath()": {
    "beginPath()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "bezierCurveTo()": {
    "bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)": {
      "args": [
        "cp1x",
        "cp1y",
        "cp2x",
        "cp2y",
        "x",
        "y"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "blob()": {
    "blob()": {
      "args": [],
      "for": [
        "Body"
      ],
      "shortname": "fetch"
    }
  },
  "blur()": {
    "blur()": {
      "args": [],
      "for": [
        "HTMLElement",
        "Window"
      ],
      "shortname": "html"
    }
  },
  "bound()": {
    "bound(lower, upper)": {
      "args": [
        "lower",
        "upper"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "bound(lower, upper, lowerOpen)": {
      "args": [
        "lower",
        "upper",
        "lowerOpen"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "bound(lower, upper, lowerOpen, upperOpen)": {
      "args": [
        "lower",
        "upper",
        "lowerOpen",
        "upperOpen"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "btoa()": {
    "btoa(data)": {
      "args": [
        "data"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "canMakePayment()": {
    "canMakePayment()": {
      "args": [],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    }
  },
  "canPlayType()": {
    "canPlayType(type)": {
      "args": [
        "type"
      ],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "cancel()": {
    "cancel()": {
      "args": [],
      "for": [
        "Animation",
        "ReadableStream",
        "ReadableStreamGenericReader",
        "XRHitTestSource",
        "XRTransientInputHitTestSource"
      ],
      "shortname": "streams"
    },
    "cancel(reason)": {
      "args": [
        "reason"
      ],
      "for": [
        "ReadableStream",
        "ReadableStreamGenericReader"
      ],
      "shortname": "streams"
    }
  },
  "cancelAndHoldAtTime()": {
    "cancelAndHoldAtTime(cancelTime)": {
      "args": [
        "cancelTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "cancelAnimationFrame()": {
    "cancelAnimationFrame(handle)": {
      "args": [
        "handle"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    }
  },
  "cancelScheduledValues()": {
    "cancelScheduledValues(cancelTime)": {
      "args": [
        "cancelTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "canonicalUUID()": {
    "canonicalUUID(alias)": {
      "args": [
        "alias"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "captureEvents()": {
    "captureEvents()": {
      "args": [],
      "for": [
        "Document",
        "Window"
      ],
      "shortname": "html"
    }
  },
  "caretPositionFromPoint()": {
    "caretPositionFromPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Document"
      ],
      "shortname": "cssom-view"
    }
  },
  "ch()": {
    "ch(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "check()": {
    "check()": {
      "args": [],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "check(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "check(font, text)": {
      "args": [
        "font",
        "text"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    }
  },
  "checkValidity()": {
    "checkValidity()": {
      "args": [],
      "for": [
        "HTMLFieldSetElement",
        "HTMLFormElement"
      ],
      "shortname": "html"
    }
  },
  "claim()": {
    "claim()": {
      "args": [],
      "for": [
        "Clients"
      ],
      "shortname": "service-workers"
    }
  },
  "claimInterface()": {
    "claimInterface(interfaceNumber)": {
      "args": [
        "interfaceNumber"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "clear()": {
    "clear()": {
      "args": [],
      "for": [
        "DataTransferItemList",
        "Document",
        "FontFaceSet",
        "IDBObjectStore",
        "Storage",
        "StylePropertyMap",
        "console"
      ],
      "shortname": "console"
    }
  },
  "clearData()": {
    "clearData()": {
      "args": [],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "clearHalt()": {
    "clearHalt(direction, endpointNumber)": {
      "args": [
        "direction",
        "endpointNumber"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "clearInterval()": {
    "clearInterval()": {
      "args": [],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "clearRect()": {
    "clearRect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasRect"
      ],
      "shortname": "html"
    }
  },
  "clearTimeout()": {
    "clearTimeout()": {
      "args": [],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "click()": {
    "click()": {
      "args": [],
      "for": [
        "HTMLElement"
      ],
      "shortname": "html"
    }
  },
  "clip()": {
    "clip()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "clone()": {
    "clone()": {
      "args": [],
      "for": [
        "MediaStream",
        "MediaStreamTrack",
        "Request",
        "Response"
      ],
      "shortname": "fetch"
    }
  },
  "cloneContents()": {
    "cloneContents()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "cloneNode()": {
    "cloneNode()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    },
    "cloneNode(deep)": {
      "args": [
        "deep"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "cloneRange()": {
    "cloneRange()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "close()": {
    "close()": {
      "args": [],
      "for": [
        "AudioContext",
        "BroadcastChannel",
        "DedicatedWorkerGlobalScope",
        "Document",
        "EventSource",
        "HTMLDialogElement",
        "IDBDatabase",
        "ImageBitmap",
        "MessagePort",
        "RTCDataChannel",
        "RTCPeerConnection",
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "SharedWorkerGlobalScope",
        "USBDevice",
        "WebSocket",
        "Window",
        "WritableStream",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "html"
    },
    "close(code)": {
      "args": [
        "code"
      ],
      "for": [
        "WebSocket"
      ],
      "shortname": "html"
    }
  },
  "closePath()": {
    "closePath()": {
      "args": [],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "closest()": {
    "closest(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "cm()": {
    "cm(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "cmp()": {
    "cmp(first, second)": {
      "args": [
        "first",
        "second"
      ],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    }
  },
  "collapse()": {
    "collapse()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    },
    "collapse(toStart)": {
      "args": [
        "toStart"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "commit()": {
    "commit()": {
      "args": [],
      "for": [
        "IDBTransaction"
      ],
      "shortname": "indexeddb"
    }
  },
  "commitStyles()": {
    "commitStyles()": {
      "args": [],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "compact()": {
    "compact()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "compact(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "compact(input, context)": {
      "args": [
        "input",
        "context"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "compact(input, context, options)": {
      "args": [
        "input",
        "context",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    }
  },
  "compareBoundaryPoints()": {
    "compareBoundaryPoints(how, sourceRange)": {
      "args": [
        "how",
        "sourceRange"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "compareDocumentPosition()": {
    "compareDocumentPosition(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "comparePoint()": {
    "comparePoint(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "complete()": {
    "complete()": {
      "args": [],
      "for": [
        "MerchantValidationEvent",
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    },
    "complete(result)": {
      "args": [
        "result"
      ],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    }
  },
  "composedPath()": {
    "composedPath()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "computedStyleMap()": {
    "computedStyleMap()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "css-typed-om"
    }
  },
  "confirm()": {
    "confirm(message)": {
      "args": [
        "message"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "connect()": {
    "connect()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTServer"
      ],
      "shortname": "web-bluetooth"
    },
    "connect(destinationNode)": {
      "args": [
        "destinationNode"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationNode, output)": {
      "args": [
        "destinationNode",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationNode, output, input)": {
      "args": [
        "destinationNode",
        "output",
        "input"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationParam)": {
      "args": [
        "destinationParam"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationParam, output)": {
      "args": [
        "destinationParam",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    }
  },
  "constructor!overload-1()": {
    "constructor!overload-1()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor!overload-1(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "constructor!overload-2()": {
    "constructor!overload-2()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor!overload-2(tracks)": {
      "args": [
        "tracks"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "constructor()": {
    "constructor()": {
      "args": [],
      "for": [
        "AbortController",
        "Animation",
        "AudioContext",
        "AudioWorkletProcessor",
        "Blob",
        "CSSMathMax",
        "CSSMathMin",
        "CSSMathProduct",
        "CSSMathSum",
        "Comment",
        "DOMException",
        "DOMMatrix",
        "DOMMatrixReadOnly",
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMQuad",
        "DOMRect",
        "DOMRectReadOnly",
        "Document",
        "DocumentFragment",
        "DocumentTimeline",
        "EventTarget",
        "FileReader",
        "FileReaderSync",
        "FormData",
        "FragmentResult",
        "Headers",
        "JsonLdProcessor",
        "MediaStream",
        "MediaStreamTrackEvent",
        "MerchantValidationEvent",
        "OverconstrainedError",
        "PaymentMethodChangeEvent",
        "PaymentRequest",
        "PaymentRequestUpdateEvent",
        "PointerEvent",
        "RTCDTMFToneChangeEvent",
        "RTCDataChannelEvent",
        "RTCError",
        "RTCErrorEvent",
        "RTCIceCandidate",
        "RTCPeerConnection",
        "RTCPeerConnectionIceErrorEvent",
        "RTCPeerConnectionIceEvent",
        "RTCSessionDescription",
        "RTCTrackEvent",
        "Range",
        "RdfDataset",
        "RdfGraph",
        "RdfLiteral",
        "RdfTriple",
        "ReadableStream",
        "RemoteDocument",
        "Response",
        "ScrollTimeline",
        "Text",
        "TextDecoder",
        "TextDecoderStream",
        "TextEncoder",
        "TextEncoderStream",
        "TransformStream",
        "URLSearchParams",
        "WritableStream",
        "XMLHttpRequest",
        "XPathEvaluator",
        "XRRay",
        "XRRigidTransform"
      ],
      "shortname": "css-layout-api"
    },
    "constructor(, candidateInitDict)": {
      "args": [
        "",
        "candidateInitDict"
      ],
      "for": [
        "RTCIceCandidate"
      ],
      "shortname": "webrtc"
    },
    "constructor(, configuration)": {
      "args": [
        "",
        "configuration"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "constructor(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathMax",
        "CSSMathMin",
        "CSSMathProduct",
        "CSSMathSum"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(alternate, endpointNumber, direction)": {
      "args": [
        "alternate",
        "endpointNumber",
        "direction"
      ],
      "for": [
        "USBEndpoint"
      ],
      "shortname": "webusb"
    },
    "constructor(angle)": {
      "args": [
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(animatorName)": {
      "args": [
        "animatorName"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(animatorName, effects)": {
      "args": [
        "animatorName",
        "effects"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(animatorName, effects, timeline)": {
      "args": [
        "animatorName",
        "effects",
        "timeline"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(animatorName, effects, timeline, options)": {
      "args": [
        "animatorName",
        "effects",
        "timeline",
        "options"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "CSSMathInvert",
        "CSSMathNegate"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(ax)": {
      "args": [
        "ax"
      ],
      "for": [
        "CSSSkewX"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(ax, ay)": {
      "args": [
        "ax",
        "ay"
      ],
      "for": [
        "CSSSkew"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(ay)": {
      "args": [
        "ay"
      ],
      "for": [
        "CSSSkewY"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(blobParts)": {
      "args": [
        "blobParts"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "constructor(blobParts, options)": {
      "args": [
        "blobParts",
        "options"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "constructor(body)": {
      "args": [
        "body"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "constructor(body, init)": {
      "args": [
        "body",
        "init"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "constructor(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "IntersectionObserver",
        "MutationObserver",
        "ReportingObserver",
        "ResizeObserver"
      ],
      "shortname": "dom"
    },
    "constructor(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "IntersectionObserver",
        "ReportingObserver"
      ],
      "shortname": "intersection-observer"
    },
    "constructor(configuration, interfaceNumber)": {
      "args": [
        "configuration",
        "interfaceNumber"
      ],
      "for": [
        "USBInterface"
      ],
      "shortname": "webusb"
    },
    "constructor(constraint)": {
      "args": [
        "constraint"
      ],
      "for": [
        "OverconstrainedError"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor(constraint, message)": {
      "args": [
        "constraint",
        "message"
      ],
      "for": [
        "OverconstrainedError"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor(context)": {
      "args": [
        "context"
      ],
      "for": [
        "AnalyserNode",
        "AudioBufferSourceNode",
        "BiquadFilterNode",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "ConstantSourceNode",
        "ConvolverNode",
        "DelayNode",
        "DynamicsCompressorNode",
        "GainNode",
        "MediaStreamAudioDestinationNode",
        "OscillatorNode",
        "PannerNode",
        "PeriodicWave",
        "StereoPannerNode",
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(context, name)": {
      "args": [
        "context",
        "name"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(context, name, options)": {
      "args": [
        "context",
        "name",
        "options"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "AnalyserNode",
        "AudioBufferSourceNode",
        "BiquadFilterNode",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "ConstantSourceNode",
        "ConvolverNode",
        "DelayNode",
        "DynamicsCompressorNode",
        "GainNode",
        "IIRFilterNode",
        "MediaElementAudioSourceNode",
        "MediaStreamAudioDestinationNode",
        "MediaStreamAudioSourceNode",
        "MediaStreamTrackAudioSourceNode",
        "OscillatorNode",
        "PannerNode",
        "PeriodicWave",
        "StereoPannerNode",
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(contextOptions)": {
      "args": [
        "contextOptions"
      ],
      "for": [
        "AudioContext",
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    },
    "constructor(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Comment",
        "FederatedCredential",
        "PasswordCredential",
        "Text"
      ],
      "shortname": "credential-management"
    },
    "constructor(descriptionInitDict)": {
      "args": [
        "descriptionInitDict"
      ],
      "for": [
        "RTCSessionDescription"
      ],
      "shortname": "webrtc"
    },
    "constructor(device, configurationValue)": {
      "args": [
        "device",
        "configurationValue"
      ],
      "for": [
        "USBConfiguration"
      ],
      "shortname": "webusb"
    },
    "constructor(deviceInterface, alternateSetting)": {
      "args": [
        "deviceInterface",
        "alternateSetting"
      ],
      "for": [
        "USBAlternateInterface"
      ],
      "shortname": "webusb"
    },
    "constructor(effect)": {
      "args": [
        "effect"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "constructor(effect, timeline)": {
      "args": [
        "effect",
        "timeline"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "constructor(family, source)": {
      "args": [
        "family",
        "source"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    },
    "constructor(family, source, descriptors)": {
      "args": [
        "family",
        "source",
        "descriptors"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    },
    "constructor(fileBits, fileName)": {
      "args": [
        "fileBits",
        "fileName"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    },
    "constructor(fileBits, fileName, options)": {
      "args": [
        "fileBits",
        "fileName",
        "options"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    },
    "constructor(form)": {
      "args": [
        "form"
      ],
      "for": [
        "FormData",
        "PasswordCredential"
      ],
      "shortname": "credential-management"
    },
    "constructor(init)": {
      "args": [
        "init"
      ],
      "for": [
        "ByteLengthQueuingStrategy",
        "CountQueuingStrategy",
        "DOMMatrix",
        "DOMMatrixReadOnly",
        "Headers",
        "RTCError",
        "StaticRange",
        "URLSearchParams"
      ],
      "shortname": "dom"
    },
    "constructor(init, message)": {
      "args": [
        "init",
        "message"
      ],
      "for": [
        "RTCError"
      ],
      "shortname": "webrtc"
    },
    "constructor(initialFaces)": {
      "args": [
        "initialFaces"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "constructor(input)": {
      "args": [
        "input"
      ],
      "for": [
        "Request"
      ],
      "shortname": "fetch"
    },
    "constructor(input, init)": {
      "args": [
        "input",
        "init"
      ],
      "for": [
        "Request"
      ],
      "shortname": "fetch"
    },
    "constructor(intersectionObserverEntryInit)": {
      "args": [
        "intersectionObserverEntryInit"
      ],
      "for": [
        "IntersectionObserverEntry"
      ],
      "shortname": "intersection-observer"
    },
    "constructor(label)": {
      "args": [
        "label"
      ],
      "for": [
        "TextDecoder",
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "constructor(label, options)": {
      "args": [
        "label",
        "options"
      ],
      "for": [
        "TextDecoder",
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "constructor(length)": {
      "args": [
        "length"
      ],
      "for": [
        "CSSPerspective"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(matrix)": {
      "args": [
        "matrix"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(matrix, options)": {
      "args": [
        "matrix",
        "options"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(members)": {
      "args": [
        "members"
      ],
      "for": [
        "CSSUnparsedValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(message)": {
      "args": [
        "message"
      ],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    },
    "constructor(message, name)": {
      "args": [
        "message",
        "name"
      ],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    },
    "constructor(min, val, max)": {
      "args": [
        "min",
        "val",
        "max"
      ],
      "for": [
        "CSSMathClamp"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(name)": {
      "args": [
        "name"
      ],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    },
    "constructor(name, ...initialRanges)": {
      "args": [
        "name",
        "...initialRanges"
      ],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    },
    "constructor(numberOfChannels, length, sampleRate)": {
      "args": [
        "numberOfChannels",
        "length",
        "sampleRate"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    },
    "constructor(options)": {
      "args": [
        "options"
      ],
      "for": [
        "AudioBuffer",
        "DocumentTimeline",
        "FragmentResult",
        "ScrollTimeline"
      ],
      "shortname": "css-layout-api"
    },
    "constructor(origin)": {
      "args": [
        "origin"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "constructor(origin, direction)": {
      "args": [
        "origin",
        "direction"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "constructor(p1)": {
      "args": [
        "p1"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(p1, p2)": {
      "args": [
        "p1",
        "p2"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(p1, p2, p3)": {
      "args": [
        "p1",
        "p2",
        "p3"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(p1, p2, p3, p4)": {
      "args": [
        "p1",
        "p2",
        "p3",
        "p4"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(packets)": {
      "args": [
        "packets"
      ],
      "for": [
        "USBIsochronousInTransferResult",
        "USBIsochronousOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(packets, data)": {
      "args": [
        "packets",
        "data"
      ],
      "for": [
        "USBIsochronousInTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(position)": {
      "args": [
        "position"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "constructor(position, orientation)": {
      "args": [
        "position",
        "orientation"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "constructor(session)": {
      "args": [
        "session"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "constructor(session, context)": {
      "args": [
        "session",
        "context"
      ],
      "for": [
        "XRWebGLBinding",
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    },
    "constructor(session, context, layerInit)": {
      "args": [
        "session",
        "context",
        "layerInit"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    },
    "constructor(source)": {
      "args": [
        "source"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBInTransferResult",
        "USBIsochronousInTransferPacket",
        "USBIsochronousOutTransferPacket",
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(status, bytesWritten)": {
      "args": [
        "status",
        "bytesWritten"
      ],
      "for": [
        "USBIsochronousOutTransferPacket",
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(status, data)": {
      "args": [
        "status",
        "data"
      ],
      "for": [
        "USBInTransferResult",
        "USBIsochronousInTransferPacket"
      ],
      "shortname": "webusb"
    },
    "constructor(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "ReadableStreamBYOBReader",
        "ReadableStreamDefaultReader",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    },
    "constructor(target)": {
      "args": [
        "target"
      ],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    },
    "constructor(target, keyframes)": {
      "args": [
        "target",
        "keyframes"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(target, keyframes, options)": {
      "args": [
        "target",
        "keyframes",
        "options"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(transform)": {
      "args": [
        "transform"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "constructor(transformer)": {
      "args": [
        "transformer"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "constructor(transformer, writableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "constructor(transformer, writableStrategy, readableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy",
        "readableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "constructor(transforms)": {
      "args": [
        "transforms"
      ],
      "for": [
        "CSSTransformValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(type)": {
      "args": [
        "type"
      ],
      "for": [
        "AnimationEvent",
        "AnimationPlaybackEvent",
        "CustomEvent",
        "Event",
        "ExtendableEvent",
        "ExtendableMessageEvent",
        "FontFaceSetLoadEvent",
        "IDBVersionChangeEvent",
        "MediaQueryListEvent",
        "NavigationEvent",
        "PointerEvent",
        "ProgressEvent",
        "RTCDTMFToneChangeEvent",
        "RTCPeerConnectionIceEvent",
        "SecurityPolicyViolationEvent",
        "TransitionEvent",
        "ValueEvent"
      ],
      "shortname": "csp"
    },
    "constructor(type, animationEventInitDict)": {
      "args": [
        "type",
        "animationEventInitDict"
      ],
      "for": [
        "AnimationEvent"
      ],
      "shortname": "css-animations"
    },
    "constructor(type, errorEventInitDict)": {
      "args": [
        "type",
        "errorEventInitDict"
      ],
      "for": [
        "SensorErrorEvent"
      ],
      "shortname": "generic-sensor"
    },
    "constructor(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "AnimationPlaybackEvent",
        "AudioProcessingEvent",
        "CustomEvent",
        "Event",
        "ExtendableEvent",
        "ExtendableMessageEvent",
        "FetchEvent",
        "FontFaceSetLoadEvent",
        "IDBVersionChangeEvent",
        "MediaQueryListEvent",
        "MediaStreamTrackEvent",
        "NavigationEvent",
        "OfflineAudioCompletionEvent",
        "PointerEvent",
        "ProgressEvent",
        "RTCDTMFToneChangeEvent",
        "RTCDataChannelEvent",
        "RTCErrorEvent",
        "RTCPeerConnectionIceErrorEvent",
        "RTCPeerConnectionIceEvent",
        "RTCTrackEvent",
        "SecurityPolicyViolationEvent",
        "USBConnectionEvent",
        "XRInputSourceEvent",
        "XRInputSourcesChangeEvent",
        "XRLayerEvent",
        "XRReferenceSpaceEvent",
        "XRSessionEvent"
      ],
      "shortname": "csp"
    },
    "constructor(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "BluetoothAdvertisingEvent",
        "SyncEvent"
      ],
      "shortname": "web-background-sync"
    },
    "constructor(type, initDict)": {
      "args": [
        "type",
        "initDict"
      ],
      "for": [
        "ValueEvent"
      ],
      "shortname": "web-bluetooth"
    },
    "constructor(type, transitionEventInitDict)": {
      "args": [
        "type",
        "transitionEventInitDict"
      ],
      "for": [
        "TransitionEvent"
      ],
      "shortname": "css-transitions"
    },
    "constructor(underlyingSink)": {
      "args": [
        "underlyingSink"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "constructor(underlyingSink, strategy)": {
      "args": [
        "underlyingSink",
        "strategy"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "constructor(underlyingSource)": {
      "args": [
        "underlyingSource"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "constructor(underlyingSource, strategy)": {
      "args": [
        "underlyingSource",
        "strategy"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "constructor(url)": {
      "args": [
        "url"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    },
    "constructor(url, base)": {
      "args": [
        "url",
        "base"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    },
    "constructor(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSSKeywordValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(value, unit)": {
      "args": [
        "value",
        "unit"
      ],
      "for": [
        "CSSUnitValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(variable)": {
      "args": [
        "variable"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(variable, fallback)": {
      "args": [
        "variable",
        "fallback"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "constructor(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CSSScale",
        "CSSTranslate",
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(x, y, width)": {
      "args": [
        "x",
        "y",
        "width"
      ],
      "for": [
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "constructor(x, y, width, height)": {
      "args": [
        "x",
        "y",
        "width",
        "height"
      ],
      "for": [
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "constructor(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "CSSScale",
        "CSSTranslate",
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(x, y, z, w)": {
      "args": [
        "x",
        "y",
        "z",
        "w"
      ],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "contains()": {
    "contains(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    },
    "contains(string)": {
      "args": [
        "string"
      ],
      "for": [
        "DOMStringList"
      ],
      "shortname": "html"
    },
    "contains(token)": {
      "args": [
        "token"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    }
  },
  "continue()": {
    "continue()": {
      "args": [],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    },
    "continue(key)": {
      "args": [
        "key"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "continuePrimaryKey()": {
    "continuePrimaryKey(key, primaryKey)": {
      "args": [
        "key",
        "primaryKey"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "controlTransferIn()": {
    "controlTransferIn(setup, length)": {
      "args": [
        "setup",
        "length"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "controlTransferOut()": {
    "controlTransferOut(setup)": {
      "args": [
        "setup"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    },
    "controlTransferOut(setup, data)": {
      "args": [
        "setup",
        "data"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "convertPointFromNode()": {
    "convertPointFromNode(point, from)": {
      "args": [
        "point",
        "from"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "convertPointFromNode(point, from, options)": {
      "args": [
        "point",
        "from",
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "convertQuadFromNode()": {
    "convertQuadFromNode(quad, from)": {
      "args": [
        "quad",
        "from"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "convertQuadFromNode(quad, from, options)": {
      "args": [
        "quad",
        "from",
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "convertRectFromNode()": {
    "convertRectFromNode(rect, from)": {
      "args": [
        "rect",
        "from"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "convertRectFromNode(rect, from, options)": {
      "args": [
        "rect",
        "from",
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "convertToBlob()": {
    "convertToBlob()": {
      "args": [],
      "for": [
        "OffscreenCanvas"
      ],
      "shortname": "html"
    }
  },
  "copyFromChannel()": {
    "copyFromChannel(destination, channelNumber)": {
      "args": [
        "destination",
        "channelNumber"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    },
    "copyFromChannel(destination, channelNumber, bufferOffset)": {
      "args": [
        "destination",
        "channelNumber",
        "bufferOffset"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "copyToChannel()": {
    "copyToChannel(source, channelNumber)": {
      "args": [
        "source",
        "channelNumber"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    },
    "copyToChannel(source, channelNumber, bufferOffset)": {
      "args": [
        "source",
        "channelNumber",
        "bufferOffset"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "count()": {
    "count()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore",
        "console"
      ],
      "shortname": "console"
    },
    "count(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "count(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "countReset()": {
    "countReset()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "countReset(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "create()": {
    "create()": {
      "args": [],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    },
    "create(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    }
  },
  "createAnalyser()": {
    "createAnalyser()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createAnswer!overload-1()": {
    "createAnswer!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createAnswer!overload-1(successCallback, failureCallback)": {
      "args": [
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createAnswer()": {
    "createAnswer()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createAnswer(, options)": {
      "args": [
        "",
        "options"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createAttribute()": {
    "createAttribute(localName)": {
      "args": [
        "localName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createAttributeNS()": {
    "createAttributeNS(namespace, qualifiedName)": {
      "args": [
        "namespace",
        "qualifiedName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createBiquadFilter()": {
    "createBiquadFilter()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createBuffer()": {
    "createBuffer(numberOfChannels, length, sampleRate)": {
      "args": [
        "numberOfChannels",
        "length",
        "sampleRate"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createBufferSource()": {
    "createBufferSource()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createCDATASection()": {
    "createCDATASection(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createCaption()": {
    "createCaption()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createChannelMerger()": {
    "createChannelMerger()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createChannelMerger(numberOfInputs)": {
      "args": [
        "numberOfInputs"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createChannelSplitter()": {
    "createChannelSplitter()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createChannelSplitter(numberOfOutputs)": {
      "args": [
        "numberOfOutputs"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createComment()": {
    "createComment(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createConstantSource()": {
    "createConstantSource()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createConvolver()": {
    "createConvolver()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createCubeLayer()": {
    "createCubeLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createCubeLayer(XRCubeLayerInit init)": {
      "args": [
        "XRCubeLayerInit init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createCubeLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "createCylinderLayer()": {
    "createCylinderLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createCylinderLayer(HTMLVideoElement video, XRMediaCylinderLayerInit init)": {
      "args": [
        "HTMLVideoElement video",
        "XRMediaCylinderLayerInit init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createCylinderLayer(XRCylinderLayerInit init)": {
      "args": [
        "XRCylinderLayerInit init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createCylinderLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createCylinderLayer(video)": {
      "args": [
        "video"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createCylinderLayer(video, init)": {
      "args": [
        "video",
        "init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "createDataChannel()": {
    "createDataChannel()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createDataChannel(label)": {
      "args": [
        "label"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createDataChannel(label, dataChannelDict)": {
      "args": [
        "label",
        "dataChannelDict"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createDelay()": {
    "createDelay()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createDelay(maxDelayTime)": {
      "args": [
        "maxDelayTime"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createDocument()": {
    "createDocument()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "createDocument(namespace, qualifiedName)": {
      "args": [
        "namespace",
        "qualifiedName"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    },
    "createDocument(namespace, qualifiedName, doctype)": {
      "args": [
        "namespace",
        "qualifiedName",
        "doctype"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    }
  },
  "createDocumentFragment()": {
    "createDocumentFragment()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createDocumentType()": {
    "createDocumentType(qualifiedName, publicId, systemId)": {
      "args": [
        "qualifiedName",
        "publicId",
        "systemId"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    }
  },
  "createDynamicsCompressor()": {
    "createDynamicsCompressor()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createElement()": {
    "createElement()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "createElement(localName)": {
      "args": [
        "localName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createElement(localName, options)": {
      "args": [
        "localName",
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createElementNS()": {
    "createElementNS()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "createElementNS(namespace, qualifiedName)": {
      "args": [
        "namespace",
        "qualifiedName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createElementNS(namespace, qualifiedName, options)": {
      "args": [
        "namespace",
        "qualifiedName",
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createEntityReference()": {
    "createEntityReference()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createEquirectLayer()": {
    "createEquirectLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createEquirectLayer(HTMLVideoElement video, XRMediaEquirectLayerInit init)": {
      "args": [
        "HTMLVideoElement video",
        "XRMediaEquirectLayerInit init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createEquirectLayer(XREquirectLayerLayerInit init)": {
      "args": [
        "XREquirectLayerLayerInit init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createEquirectLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createEquirectLayer(video)": {
      "args": [
        "video"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createEquirectLayer(video, init)": {
      "args": [
        "video",
        "init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "createEvent()": {
    "createEvent(interface)": {
      "args": [
        "interface"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createExpression()": {
    "createExpression(expression)": {
      "args": [
        "expression"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "createExpression(expression, resolver)": {
      "args": [
        "expression",
        "resolver"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    }
  },
  "createGain()": {
    "createGain()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createHTMLDocument()": {
    "createHTMLDocument()": {
      "args": [],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    },
    "createHTMLDocument(title)": {
      "args": [
        "title"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    }
  },
  "createIIRFilter()": {
    "createIIRFilter(feedforward, feedback)": {
      "args": [
        "feedforward",
        "feedback"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createImageBitmap()": {
    "createImageBitmap(image)": {
      "args": [
        "image"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "createImageData()": {
    "createImageData()": {
      "args": [],
      "for": [
        "CanvasImageData"
      ],
      "shortname": "html"
    }
  },
  "createIndex()": {
    "createIndex(name, keyPath)": {
      "args": [
        "name",
        "keyPath"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "createIndex(name, keyPath, options)": {
      "args": [
        "name",
        "keyPath",
        "options"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "createLinearGradient()": {
    "createLinearGradient(x0, y0, x1, y1)": {
      "args": [
        "x0",
        "y0",
        "x1",
        "y1"
      ],
      "for": [
        "CanvasFillStrokeStyles"
      ],
      "shortname": "html"
    }
  },
  "createMediaElementSource()": {
    "createMediaElementSource(mediaElement)": {
      "args": [
        "mediaElement"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createMediaStreamDestination()": {
    "createMediaStreamDestination()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createMediaStreamSource()": {
    "createMediaStreamSource(mediaStream)": {
      "args": [
        "mediaStream"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createMediaStreamTrackSource()": {
    "createMediaStreamTrackSource(mediaStreamTrack)": {
      "args": [
        "mediaStreamTrack"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createNSResolver()": {
    "createNSResolver(nodeResolver)": {
      "args": [
        "nodeResolver"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    }
  },
  "createNodeIterator()": {
    "createNodeIterator(root)": {
      "args": [
        "root"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createNodeIterator(root, whatToShow)": {
      "args": [
        "root",
        "whatToShow"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createNodeIterator(root, whatToShow, filter)": {
      "args": [
        "root",
        "whatToShow",
        "filter"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createObjectStore()": {
    "createObjectStore(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    },
    "createObjectStore(name, options)": {
      "args": [
        "name",
        "options"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    }
  },
  "createObjectURL()": {
    "createObjectURL(obj)": {
      "args": [
        "obj"
      ],
      "for": [
        "URL"
      ],
      "shortname": "fileapi"
    }
  },
  "createOffer!overload-1()": {
    "createOffer!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createOffer!overload-1(successCallback, failureCallback)": {
      "args": [
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createOffer!overload-1(successCallback, failureCallback, options)": {
      "args": [
        "successCallback",
        "failureCallback",
        "options"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createOffer()": {
    "createOffer()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createOffer(, options)": {
      "args": [
        "",
        "options"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createOscillator()": {
    "createOscillator()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createPanner()": {
    "createPanner()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createPattern()": {
    "createPattern(image, repetition)": {
      "args": [
        "image",
        "repetition"
      ],
      "for": [
        "CanvasFillStrokeStyles"
      ],
      "shortname": "html"
    }
  },
  "createPeriodicWave()": {
    "createPeriodicWave(real, imag)": {
      "args": [
        "real",
        "imag"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createPeriodicWave(real, imag, constraints)": {
      "args": [
        "real",
        "imag",
        "constraints"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createProcessingInstruction()": {
    "createProcessingInstruction(target, data)": {
      "args": [
        "target",
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createProjectionLayer()": {
    "createProjectionLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createProjectionLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createProjectionLayer(optional XRProjectionLayerInit init)": {
      "args": [
        "optional XRProjectionLayerInit init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "createQuadLayer()": {
    "createQuadLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createQuadLayer(HTMLVideoElement video, XRMediaQuadLayerInit init)": {
      "args": [
        "HTMLVideoElement video",
        "XRMediaQuadLayerInit init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createQuadLayer(XRQuadLayerInit init)": {
      "args": [
        "XRQuadLayerInit init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createQuadLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createQuadLayer(video)": {
      "args": [
        "video"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    },
    "createQuadLayer(video, init)": {
      "args": [
        "video",
        "init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "createRadialGradient()": {
    "createRadialGradient(x0, y0, r0, x1, y1, r1)": {
      "args": [
        "x0",
        "y0",
        "r0",
        "x1",
        "y1",
        "r1"
      ],
      "for": [
        "CanvasFillStrokeStyles"
      ],
      "shortname": "html"
    }
  },
  "createRange()": {
    "createRange()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createScriptProcessor()": {
    "createScriptProcessor()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createScriptProcessor(bufferSize)": {
      "args": [
        "bufferSize"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createScriptProcessor(bufferSize, numberOfInputChannels)": {
      "args": [
        "bufferSize",
        "numberOfInputChannels"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels)": {
      "args": [
        "bufferSize",
        "numberOfInputChannels",
        "numberOfOutputChannels"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createStereoPanner()": {
    "createStereoPanner()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createTBody()": {
    "createTBody()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createTFoot()": {
    "createTFoot()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createTHead()": {
    "createTHead()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createTextNode()": {
    "createTextNode(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createTreeWalker()": {
    "createTreeWalker(root)": {
      "args": [
        "root"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createTreeWalker(root, whatToShow)": {
      "args": [
        "root",
        "whatToShow"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createTreeWalker(root, whatToShow, filter)": {
      "args": [
        "root",
        "whatToShow",
        "filter"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createWaveShaper()": {
    "createWaveShaper()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "databases()": {
    "databases()": {
      "args": [],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    }
  },
  "debug()": {
    "debug()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "debug(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "decode()": {
    "decode()": {
      "args": [],
      "for": [
        "HTMLImageElement",
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "decode(input)": {
      "args": [
        "input"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "decode(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    }
  },
  "decodeAudioData()": {
    "decodeAudioData(audioData)": {
      "args": [
        "audioData"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "decodeAudioData(audioData, successCallback)": {
      "args": [
        "audioData",
        "successCallback"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "decodeAudioData(audioData, successCallback, errorCallback)": {
      "args": [
        "audioData",
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "decrypt()": {
    "decrypt()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "decrypt(algorithm, key, data)": {
      "args": [
        "algorithm",
        "key",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "define()": {
    "define(name, constructor)": {
      "args": [
        "name",
        "constructor"
      ],
      "for": [
        "CustomElementRegistry"
      ],
      "shortname": "html"
    }
  },
  "deg()": {
    "deg(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "delete()": {
    "delete()": {
      "args": [],
      "for": [
        "IDBCursor",
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "delete(cacheName)": {
      "args": [
        "cacheName"
      ],
      "for": [
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "delete(flowName)": {
      "args": [
        "flowName"
      ],
      "for": [
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "delete(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "delete(name)": {
      "args": [
        "name"
      ],
      "for": [
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "delete(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    },
    "delete(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "delete(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "delete(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    }
  },
  "deleteCaption()": {
    "deleteCaption()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "deleteCell()": {
    "deleteCell(index)": {
      "args": [
        "index"
      ],
      "for": [
        "HTMLTableRowElement"
      ],
      "shortname": "html"
    }
  },
  "deleteContents()": {
    "deleteContents()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "deleteData()": {
    "deleteData(offset, count)": {
      "args": [
        "offset",
        "count"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "deleteDatabase()": {
    "deleteDatabase(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    }
  },
  "deleteIndex()": {
    "deleteIndex(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "deleteMedium()": {
    "deleteMedium(medium)": {
      "args": [
        "medium"
      ],
      "for": [
        "MediaList"
      ],
      "shortname": "cssom"
    }
  },
  "deleteObjectStore()": {
    "deleteObjectStore(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    }
  },
  "deleteRow()": {
    "deleteRow(index)": {
      "args": [
        "index"
      ],
      "for": [
        "HTMLTableElement",
        "HTMLTableSectionElement"
      ],
      "shortname": "html"
    }
  },
  "deleteRule()": {
    "deleteRule(index)": {
      "args": [
        "index"
      ],
      "for": [
        "CSSGroupingRule",
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "deleteRule(select)": {
      "args": [
        "select"
      ],
      "for": [
        "CSSKeyframesRule"
      ],
      "shortname": "css-animations"
    }
  },
  "deleteTFoot()": {
    "deleteTFoot()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "deleteTHead()": {
    "deleteTHead()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "deriveBits()": {
    "deriveBits()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "deriveBits(algorithm, baseKey, length)": {
      "args": [
        "algorithm",
        "baseKey",
        "length"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "deriveKey()": {
    "deriveKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages)": {
      "args": [
        "algorithm",
        "baseKey",
        "derivedKeyType",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "destroy()": {
    "destroy()": {
      "args": [],
      "for": [
        "XRCompositionLayer"
      ],
      "shortname": "webxr-layers"
    }
  },
  "detach()": {
    "detach()": {
      "args": [],
      "for": [
        "NodeIterator",
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "digest()": {
    "digest()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "digest(algorithm, data)": {
      "args": [
        "algorithm",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "dir()": {
    "dir()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "dir(item)": {
      "args": [
        "item"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "dir(item, options)": {
      "args": [
        "item",
        "options"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "dirxml()": {
    "dirxml()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "dirxml(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "disable()": {
    "disable()": {
      "args": [],
      "for": [
        "NavigationPreloadManager"
      ],
      "shortname": "service-workers"
    }
  },
  "disconnect()": {
    "disconnect()": {
      "args": [],
      "for": [
        "AudioNode",
        "BluetoothRemoteGATTServer",
        "IntersectionObserver",
        "MutationObserver",
        "ReportingObserver",
        "ResizeObserver"
      ],
      "shortname": "dom"
    },
    "disconnect(destinationNode)": {
      "args": [
        "destinationNode"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationNode, output)": {
      "args": [
        "destinationNode",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationNode, output, input)": {
      "args": [
        "destinationNode",
        "output",
        "input"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationParam)": {
      "args": [
        "destinationParam"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationParam, output)": {
      "args": [
        "destinationParam",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(output)": {
      "args": [
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    }
  },
  "dispatchEvent()": {
    "dispatchEvent(event)": {
      "args": [
        "event"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "div()": {
    "div()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "div(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "document.write()": {
    "document.write(...)": {
      "args": [
        "..."
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "document.writeln()": {
    "document.writeln(...)": {
      "args": [
        "..."
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "dpcm()": {
    "dpcm(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dpi()": {
    "dpi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dppx()": {
    "dppx(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "drawFocusIfNeeded()": {
    "drawFocusIfNeeded(element)": {
      "args": [
        "element"
      ],
      "for": [
        "CanvasUserInterface"
      ],
      "shortname": "html"
    }
  },
  "drawImage()": {
    "drawImage(image, dx, dy, dw, dh)": {
      "args": [
        "image",
        "dx",
        "dy",
        "dw",
        "dh"
      ],
      "for": [
        "CanvasDrawImage"
      ],
      "shortname": "html"
    },
    "drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)": {
      "args": [
        "image",
        "sx",
        "sy",
        "sw",
        "sh",
        "dx",
        "dy",
        "dw",
        "dh"
      ],
      "for": [
        "CanvasDrawImage"
      ],
      "shortname": "html"
    }
  },
  "elementFromPoint()": {
    "elementFromPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Document"
      ],
      "shortname": "cssom-view"
    }
  },
  "elementsFromPoint()": {
    "elementsFromPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Document"
      ],
      "shortname": "cssom-view"
    }
  },
  "ellipse()": {
    "ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle)": {
      "args": [
        "x",
        "y",
        "radiusX",
        "radiusY",
        "rotation",
        "startAngle",
        "endAngle"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "em()": {
    "em(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "enable()": {
    "enable()": {
      "args": [],
      "for": [
        "NavigationPreloadManager"
      ],
      "shortname": "service-workers"
    }
  },
  "encode()": {
    "encode()": {
      "args": [],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    },
    "encode(input)": {
      "args": [
        "input"
      ],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    }
  },
  "encodeInto()": {
    "encodeInto(source, destination)": {
      "args": [
        "source",
        "destination"
      ],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    }
  },
  "encrypt()": {
    "encrypt()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "encrypt(algorithm, key, data)": {
      "args": [
        "algorithm",
        "key",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "end()": {
    "end()": {
      "args": [],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    },
    "end(index)": {
      "args": [
        "index"
      ],
      "for": [
        "TimeRanges"
      ],
      "shortname": "html"
    }
  },
  "enqueue()": {
    "enqueue()": {
      "args": [],
      "for": [
        "ReadableStreamDefaultController",
        "TransformStreamDefaultController"
      ],
      "shortname": "streams"
    },
    "enqueue(chunk)": {
      "args": [
        "chunk"
      ],
      "for": [
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "TransformStreamDefaultController"
      ],
      "shortname": "streams"
    }
  },
  "enumerateDevices()": {
    "enumerateDevices()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "equals()": {
    "equals()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "equals(...value)": {
      "args": [
        "...value"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "equals(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "error()": {
    "error()": {
      "args": [],
      "for": [
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "Response",
        "TransformStreamDefaultController",
        "WritableStreamDefaultController",
        "console"
      ],
      "shortname": "console"
    },
    "error(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "error(e)": {
      "args": [
        "e"
      ],
      "for": [
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "TransformStreamDefaultController",
        "WritableStreamDefaultController"
      ],
      "shortname": "streams"
    },
    "error(reason)": {
      "args": [
        "reason"
      ],
      "for": [
        "TransformStreamDefaultController"
      ],
      "shortname": "streams"
    }
  },
  "escape()": {
    "escape(ident)": {
      "args": [
        "ident"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "cssom"
    }
  },
  "estimate()": {
    "estimate()": {
      "args": [],
      "for": [
        "StorageManager"
      ],
      "shortname": "storage"
    }
  },
  "evaluate()": {
    "evaluate(contextNode)": {
      "args": [
        "contextNode"
      ],
      "for": [
        "XPathExpression"
      ],
      "shortname": "dom"
    },
    "evaluate(contextNode, type)": {
      "args": [
        "contextNode",
        "type"
      ],
      "for": [
        "XPathExpression"
      ],
      "shortname": "dom"
    },
    "evaluate(contextNode, type, result)": {
      "args": [
        "contextNode",
        "type",
        "result"
      ],
      "for": [
        "XPathExpression"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode)": {
      "args": [
        "expression",
        "contextNode"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode, resolver)": {
      "args": [
        "expression",
        "contextNode",
        "resolver"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode, resolver, type)": {
      "args": [
        "expression",
        "contextNode",
        "resolver",
        "type"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode, resolver, type, result)": {
      "args": [
        "expression",
        "contextNode",
        "resolver",
        "type",
        "result"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    }
  },
  "ex()": {
    "ex(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "exitFullscreen()": {
    "exitFullscreen()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "fullscreen"
    }
  },
  "expand()": {
    "expand()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "expand(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "expand(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    }
  },
  "exponentialRampToValueAtTime()": {
    "exponentialRampToValueAtTime(value, endTime)": {
      "args": [
        "value",
        "endTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "exportKey()": {
    "exportKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "exportKey(format, key)": {
      "args": [
        "format",
        "key"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "extractContents()": {
    "extractContents()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "fastSeek()": {
    "fastSeek()": {
      "args": [],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "features()": {
    "features()": {
      "args": [],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "fetch()": {
    "fetch(input)": {
      "args": [
        "input"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "fetch"
    },
    "fetch(input, init)": {
      "args": [
        "input",
        "init"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "fetch"
    }
  },
  "fill()": {
    "fill()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "fillJointRadii()": {
    "fillJointRadii(jointSpaces, radii)": {
      "args": [
        "jointSpaces",
        "radii"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    },
    "fillJointRadii(sequence<XRJointSpace> jointSpaces, Float32Array radii)": {
      "args": [
        "sequence<XRJointSpace> jointSpaces",
        "Float32Array radii"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    }
  },
  "fillPoses()": {
    "fillPoses(sequence<XRSpace> spaces, XRSpace baseSpace, Float32Array transforms)": {
      "args": [
        "sequence<XRSpace> spaces",
        "XRSpace baseSpace",
        "Float32Array transforms"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    },
    "fillPoses(spaces, baseSpace, transforms)": {
      "args": [
        "spaces",
        "baseSpace",
        "transforms"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    }
  },
  "fillRect()": {
    "fillRect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasRect"
      ],
      "shortname": "html"
    }
  },
  "fillText()": {
    "fillText()": {
      "args": [],
      "for": [
        "CanvasText"
      ],
      "shortname": "html"
    }
  },
  "findRule()": {
    "findRule(select)": {
      "args": [
        "select"
      ],
      "for": [
        "CSSKeyframesRule"
      ],
      "shortname": "css-animations"
    }
  },
  "finish()": {
    "finish()": {
      "args": [],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "firstChild()": {
    "firstChild()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "flatten()": {
    "flatten()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "flatten(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "flatten(input, context)": {
      "args": [
        "input",
        "context"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "flatten(input, context, options)": {
      "args": [
        "input",
        "context",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    }
  },
  "flipX()": {
    "flipX()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "flipY()": {
    "flipY()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "focus()": {
    "focus()": {
      "args": [],
      "for": [
        "Window",
        "WindowClient"
      ],
      "shortname": "html"
    },
    "focus(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "focusableAreas()": {
    "focusableAreas()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    },
    "focusableAreas(option)": {
      "args": [
        "option"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    }
  },
  "formData()": {
    "formData()": {
      "args": [],
      "for": [
        "Body"
      ],
      "shortname": "fetch"
    }
  },
  "forward()": {
    "forward()": {
      "args": [],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "fr()": {
    "fr(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "fromFloat32Array()": {
    "fromFloat32Array(array32)": {
      "args": [
        "array32"
      ],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromFloat64Array()": {
    "fromFloat64Array(array64)": {
      "args": [
        "array64"
      ],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromMatrix()": {
    "fromMatrix()": {
      "args": [],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "fromMatrix(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromPoint()": {
    "fromPoint()": {
      "args": [],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "fromPoint(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromQuad()": {
    "fromQuad()": {
      "args": [],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "fromQuad(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    }
  },
  "fromRdf()": {
    "fromRdf()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "fromRdf(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "fromRdf(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    }
  },
  "fromRect()": {
    "fromRect()": {
      "args": [],
      "for": [
        "DOMQuad",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "fromRect(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMQuad",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "generateCertificate()": {
    "generateCertificate()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "generateCertificate(keygenAlgorithm)": {
      "args": [
        "keygenAlgorithm"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "generateKey()": {
    "generateKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "generateKey(algorithm, extractable, keyUsages)": {
      "args": [
        "algorithm",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "get()": {
    "get()": {
      "args": [],
      "for": [
        "CredentialsContainer",
        "NamedFlowMap"
      ],
      "shortname": "credential-management"
    },
    "get(flowName)": {
      "args": [
        "flowName"
      ],
      "for": [
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "get(id)": {
      "args": [
        "id"
      ],
      "for": [
        "Clients"
      ],
      "shortname": "service-workers"
    },
    "get(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CustomElementRegistry",
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "get(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    },
    "get(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap",
        "StylePropertyMapReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "get(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "getAll()": {
    "getAll()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "getAll(name)": {
      "args": [
        "name"
      ],
      "for": [
        "FormData",
        "URLSearchParams"
      ],
      "shortname": "url"
    },
    "getAll(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap",
        "StylePropertyMapReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "getAll(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "getAll(query, count)": {
      "args": [
        "query",
        "count"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "getAllKeys()": {
    "getAllKeys()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "getAllKeys(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "getAllKeys(query, count)": {
      "args": [
        "query",
        "count"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "getAllResponseHeaders()": {
    "getAllResponseHeaders()": {
      "args": [],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "getAllowlistForFeature()": {
    "getAllowlistForFeature(feature)": {
      "args": [
        "feature"
      ],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "getAnimations()": {
    "getAnimations()": {
      "args": [],
      "for": [
        "Animatable",
        "Document",
        "DocumentOrShadowRoot"
      ],
      "shortname": "web-animations"
    },
    "getAnimations(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Animatable"
      ],
      "shortname": "web-animations"
    }
  },
  "getAsFile()": {
    "getAsFile()": {
      "args": [],
      "for": [
        "DataTransferItem"
      ],
      "shortname": "html"
    }
  },
  "getAsString()": {
    "getAsString(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "DataTransferItem"
      ],
      "shortname": "html"
    }
  },
  "getAttribute()": {
    "getAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeNS()": {
    "getAttributeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeNames()": {
    "getAttributeNames()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeNode()": {
    "getAttributeNode(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeNodeNS()": {
    "getAttributeNodeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAudioTracks()": {
    "getAudioTracks()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getAuthenticatorData()": {
    "getAuthenticatorData()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getAvailability()": {
    "getAvailability()": {
      "args": [],
      "for": [
        "Bluetooth"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getBattery()": {
    "getBattery()": {
      "args": [],
      "for": [],
      "shortname": "html"
    }
  },
  "getBoundingClientRect()": {
    "getBoundingClientRect()": {
      "args": [],
      "for": [
        "Element",
        "Range"
      ],
      "shortname": "cssom-view"
    }
  },
  "getBounds()": {
    "getBounds()": {
      "args": [],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    }
  },
  "getBoxQuads()": {
    "getBoxQuads()": {
      "args": [],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "getBoxQuads(options)": {
      "args": [
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "getByteFrequencyData()": {
    "getByteFrequencyData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getByteTimeDomainData()": {
    "getByteTimeDomainData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getCapabilities()": {
    "getCapabilities()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "InputDeviceInfo",
        "MediaStreamTrack",
        "RTCRtpReceiver",
        "RTCRtpSender"
      ],
      "shortname": "mediacapture-streams"
    },
    "getCapabilities(kind)": {
      "args": [
        "kind"
      ],
      "for": [
        "RTCRtpReceiver",
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "getChannelData()": {
    "getChannelData(channel)": {
      "args": [
        "channel"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "getCharacteristic()": {
    "getCharacteristic(characteristic)": {
      "args": [
        "characteristic"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    },
    "getCharacteristic(name)": {
      "args": [
        "name"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getCharacteristics()": {
    "getCharacteristics()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    },
    "getCharacteristics(characteristic)": {
      "args": [
        "characteristic"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getChildren()": {
    "getChildren()": {
      "args": [],
      "for": [
        "WorkletGroupEffect"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "getClientExtensionResults()": {
    "getClientExtensionResults()": {
      "args": [],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "getClientRect()": {
    "getClientRect()": {
      "args": [],
      "for": [
        "CaretPosition"
      ],
      "shortname": "cssom-view"
    }
  },
  "getClientRects()": {
    "getClientRects()": {
      "args": [],
      "for": [
        "Element",
        "Range"
      ],
      "shortname": "cssom-view"
    }
  },
  "getCoalescedEvents()": {
    "getCoalescedEvents()": {
      "args": [],
      "for": [
        "PointerEvent"
      ],
      "shortname": "pointerevents"
    }
  },
  "getComputedStyle()": {
    "getComputedStyle(elt)": {
      "args": [
        "elt"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom"
    },
    "getComputedStyle(elt, pseudoElt)": {
      "args": [
        "elt",
        "pseudoElt"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom"
    }
  },
  "getComputedTiming()": {
    "getComputedTiming()": {
      "args": [],
      "for": [
        "AnimationEffect",
        "WorkletAnimationEffect"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "getConfiguration()": {
    "getConfiguration()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getConstraints()": {
    "getConstraints()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getContent()": {
    "getContent()": {
      "args": [],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    }
  },
  "getContext()": {
    "getContext(contextId)": {
      "args": [
        "contextId"
      ],
      "for": [
        "HTMLCanvasElement",
        "OffscreenCanvas"
      ],
      "shortname": "html"
    }
  },
  "getContextAttributes()": {
    "getContextAttributes()": {
      "args": [],
      "for": [
        "CanvasRenderingContext2D"
      ],
      "shortname": "html"
    }
  },
  "getContributingSources()": {
    "getContributingSources()": {
      "args": [],
      "for": [
        "RTCRtpReceiver"
      ],
      "shortname": "webrtc"
    }
  },
  "getCueById()": {
    "getCueById(id)": {
      "args": [
        "id"
      ],
      "for": [
        "TextTrackCueList"
      ],
      "shortname": "html"
    }
  },
  "getData()": {
    "getData(format)": {
      "args": [
        "format"
      ],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "getDescriptor()": {
    "getDescriptor(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    },
    "getDescriptor(name)": {
      "args": [
        "name"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getDescriptors()": {
    "getDescriptors()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    },
    "getDescriptors(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getDevices()": {
    "getDevices()": {
      "args": [],
      "for": [
        "Bluetooth",
        "USB"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getElementById()": {
    "getElementById()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "getElementById(elementId)": {
      "args": [
        "elementId"
      ],
      "for": [
        "NonElementParentNode"
      ],
      "shortname": "dom"
    }
  },
  "getElementsByClassName()": {
    "getElementsByClassName()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "getElementsByClassName(classNames)": {
      "args": [
        "classNames"
      ],
      "for": [
        "Document",
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getElementsByName()": {
    "getElementsByName(name)": {
      "args": [
        "name"
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "getElementsByTagName()": {
    "getElementsByTagName(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Document",
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getElementsByTagNameNS()": {
    "getElementsByTagNameNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Document",
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getFeature()": {
    "getFeature()": {
      "args": [],
      "for": [
        "DOMImplementation",
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "getFingerprints()": {
    "getFingerprints()": {
      "args": [],
      "for": [
        "RTCCertificate"
      ],
      "shortname": "webrtc"
    }
  },
  "getFloatFrequencyData()": {
    "getFloatFrequencyData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getFloatTimeDomainData()": {
    "getFloatTimeDomainData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getFragmentInformation()": {
    "getFragmentInformation(filter)": {
      "args": [
        "filter"
      ],
      "for": [
        "Element"
      ],
      "shortname": "box-tree-api"
    }
  },
  "getFrequencyResponse()": {
    "getFrequencyResponse(frequencyHz, magResponse, phaseResponse)": {
      "args": [
        "frequencyHz",
        "magResponse",
        "phaseResponse"
      ],
      "for": [
        "BiquadFilterNode",
        "IIRFilterNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getHitTestResults()": {
    "getHitTestResults(hitTestSource)": {
      "args": [
        "hitTestSource"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "getHitTestResultsForTransientInput()": {
    "getHitTestResultsForTransientInput(hitTestSource)": {
      "args": [
        "hitTestSource"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "getImageData()": {
    "getImageData(sx, sy, sw, sh)": {
      "args": [
        "sx",
        "sy",
        "sw",
        "sh"
      ],
      "for": [
        "CanvasImageData"
      ],
      "shortname": "html"
    }
  },
  "getIncludedService()": {
    "getIncludedService(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getIncludedServices()": {
    "getIncludedServices()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    },
    "getIncludedServices(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getItem()": {
    "getItem(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "getJointPose()": {
    "getJointPose(XRJointSpace joint, XRSpace baseSpace)": {
      "args": [
        "XRJointSpace joint",
        "XRSpace baseSpace"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    },
    "getJointPose(joint, baseSpace)": {
      "args": [
        "joint",
        "baseSpace"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    }
  },
  "getKey()": {
    "getKey(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "getKeyframes()": {
    "getKeyframes()": {
      "args": [],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "getLineDash()": {
    "getLineDash()": {
      "args": [],
      "for": [
        "CanvasPathDrawingStyles"
      ],
      "shortname": "html"
    }
  },
  "getLocalCandidates()": {
    "getLocalCandidates()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getLocalParameters()": {
    "getLocalParameters()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getModifierState()": {
    "getModifierState(keyArg)": {
      "args": [
        "keyArg"
      ],
      "for": [
        "KeyboardEvent",
        "MouseEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "getNamedItem()": {
    "getNamedItem(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "getNamedItemNS()": {
    "getNamedItemNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "getNativeFramebufferScaleFactor()": {
    "getNativeFramebufferScaleFactor(session)": {
      "args": [
        "session"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    }
  },
  "getOffsetReferenceSpace()": {
    "getOffsetReferenceSpace(originOffset)": {
      "args": [
        "originOffset"
      ],
      "for": [
        "XRReferenceSpace"
      ],
      "shortname": "webxr"
    }
  },
  "getOutputTimestamp()": {
    "getOutputTimestamp()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "getParameters()": {
    "getParameters()": {
      "args": [],
      "for": [
        "RTCRtpReceiver",
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "getPose()": {
    "getPose(baseSpace)": {
      "args": [
        "baseSpace"
      ],
      "for": [
        "XRHitTestResult"
      ],
      "shortname": "webxr-hit-test"
    },
    "getPose(space, baseSpace)": {
      "args": [
        "space",
        "baseSpace"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr"
    }
  },
  "getPredictedEvents()": {
    "getPredictedEvents()": {
      "args": [],
      "for": [
        "PointerEvent"
      ],
      "shortname": "pointerevents"
    }
  },
  "getPrimaryService()": {
    "getPrimaryService(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTServer"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getPrimaryServices()": {
    "getPrimaryServices()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTServer"
      ],
      "shortname": "web-bluetooth"
    },
    "getPrimaryServices(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTServer"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getPropertyPriority()": {
    "getPropertyPriority(property)": {
      "args": [
        "property"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "getPropertyValue()": {
    "getPropertyValue(property)": {
      "args": [
        "property"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "getPublicKey()": {
    "getPublicKey()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getPublicKeyAlgorithm()": {
    "getPublicKeyAlgorithm()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getRandomValues()": {
    "getRandomValues()": {
      "args": [],
      "for": [
        "Crypto"
      ],
      "shortname": "webcryptoapi"
    },
    "getRandomValues(array)": {
      "args": [
        "array"
      ],
      "for": [
        "Crypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "getReader()": {
    "getReader()": {
      "args": [],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "getReader(options)": {
      "args": [
        "options"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "getReceivers()": {
    "getReceivers()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getRegionFlowRanges()": {
    "getRegionFlowRanges()": {
      "args": [],
      "for": [
        "Region"
      ],
      "shortname": "css-regions"
    }
  },
  "getRegions()": {
    "getRegions()": {
      "args": [],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    }
  },
  "getRegionsByContent()": {
    "getRegionsByContent()": {
      "args": [],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    },
    "getRegionsByContent(node)": {
      "args": [
        "node"
      ],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    }
  },
  "getRegistration()": {
    "getRegistration()": {
      "args": [],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    },
    "getRegistration(clientURL)": {
      "args": [
        "clientURL"
      ],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    }
  },
  "getRegistrations()": {
    "getRegistrations()": {
      "args": [],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    }
  },
  "getRemoteCandidates()": {
    "getRemoteCandidates()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getRemoteCertificates()": {
    "getRemoteCertificates()": {
      "args": [],
      "for": [
        "RTCDtlsTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getRemoteParameters()": {
    "getRemoteParameters()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getResponseHeader()": {
    "getResponseHeader(name)": {
      "args": [
        "name"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "getRootNode()": {
    "getRootNode()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    },
    "getRootNode(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "getSVGDocument()": {
    "getSVGDocument()": {
      "args": [],
      "for": [
        "HTMLObjectElement"
      ],
      "shortname": "html"
    }
  },
  "getSelectedCandidatePair()": {
    "getSelectedCandidatePair()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getSenders()": {
    "getSenders()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getService()": {
    "getService(name)": {
      "args": [
        "name"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getSettings()": {
    "getSettings()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getSpatialNavigationContainer()": {
    "getSpatialNavigationContainer()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    }
  },
  "getStartDate()": {
    "getStartDate()": {
      "args": [],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "getState()": {
    "getState()": {
      "args": [],
      "for": [
        "NavigationPreloadManager"
      ],
      "shortname": "service-workers"
    }
  },
  "getStats()": {
    "getStats()": {
      "args": [],
      "for": [
        "RTCPeerConnection",
        "RTCRtpReceiver",
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "getStats(, selector)": {
      "args": [
        "",
        "selector"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getSubImage()": {
    "getSubImage(XRCompositionLayer layer, XRFrame frame, optional XREye eye = \"none\")": {
      "args": [
        "XRCompositionLayer layer",
        "XRFrame frame",
        "optional XREye eye = \"none\""
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "getSubImage(layer, frame)": {
      "args": [
        "layer",
        "frame"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "getSubImage(layer, frame, eye)": {
      "args": [
        "layer",
        "frame",
        "eye"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "getSupportedConstraints()": {
    "getSupportedConstraints()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getSynchronizationSources()": {
    "getSynchronizationSources()": {
      "args": [],
      "for": [
        "RTCRtpReceiver"
      ],
      "shortname": "webrtc"
    }
  },
  "getTags()": {
    "getTags()": {
      "args": [],
      "for": [
        "SyncManager"
      ],
      "shortname": "web-background-sync"
    }
  },
  "getTiming()": {
    "getTiming()": {
      "args": [],
      "for": [
        "AnimationEffect",
        "WorkletAnimationEffect"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "getTrackById()": {
    "getTrackById()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    },
    "getTrackById(id)": {
      "args": [
        "id"
      ],
      "for": [
        "TextTrackList",
        "VideoTrackList"
      ],
      "shortname": "html"
    },
    "getTrackById(trackId)": {
      "args": [
        "trackId"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getTracks()": {
    "getTracks()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getTransceivers()": {
    "getTransceivers()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getTransform()": {
    "getTransform()": {
      "args": [],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "getTransports()": {
    "getTransports()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getUserData()": {
    "getUserData()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "getUserMedia()": {
    "getUserMedia()": {
      "args": [],
      "for": [
        "MediaDevices",
        "Navigator"
      ],
      "shortname": "mediacapture-streams"
    },
    "getUserMedia(, constraints)": {
      "args": [
        "",
        "constraints"
      ],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-streams"
    },
    "getUserMedia(constraints, successCallback, errorCallback)": {
      "args": [
        "constraints",
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getVideoTracks()": {
    "getVideoTracks()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getViewSubImage()": {
    "getViewSubImage(XRProjectionLayer layer, XRView view)": {
      "args": [
        "XRProjectionLayer layer",
        "XRView view"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    },
    "getViewSubImage(layer, view)": {
      "args": [
        "layer",
        "view"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-layers"
    }
  },
  "getViewerPose()": {
    "getViewerPose(referenceSpace)": {
      "args": [
        "referenceSpace"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr"
    }
  },
  "getViewport()": {
    "getViewport(view)": {
      "args": [
        "view"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    }
  },
  "getWriter()": {
    "getWriter()": {
      "args": [],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    }
  },
  "go()": {
    "go()": {
      "args": [],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "grad()": {
    "grad(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "group()": {
    "group()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "group(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "groupCollapsed()": {
    "groupCollapsed()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "groupCollapsed(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "groupEnd()": {
    "groupEnd()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "handleEvent()": {
    "handleEvent(event)": {
      "args": [
        "event"
      ],
      "for": [
        "EventListener"
      ],
      "shortname": "dom"
    }
  },
  "has()": {
    "has()": {
      "args": [],
      "for": [
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "has(cacheName)": {
      "args": [
        "cacheName"
      ],
      "for": [
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "has(flowName)": {
      "args": [
        "flowName"
      ],
      "for": [
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "has(name)": {
      "args": [
        "name"
      ],
      "for": [
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "has(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap",
        "StylePropertyMapReadOnly"
      ],
      "shortname": "css-typed-om"
    }
  },
  "hasAttribute()": {
    "hasAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "hasAttributeNS()": {
    "hasAttributeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "hasAttributes()": {
    "hasAttributes()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "hasChildNodes()": {
    "hasChildNodes()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "hasFeature()": {
    "hasFeature()": {
      "args": [],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    }
  },
  "hasFocus()": {
    "hasFocus()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "hasPointerCapture()": {
    "hasPointerCapture()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    },
    "hasPointerCapture(pointerId)": {
      "args": [
        "pointerId"
      ],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    }
  },
  "ic()": {
    "ic(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "importKey()": {
    "importKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "importKey(format, keyData, algorithm, extractable, keyUsages)": {
      "args": [
        "format",
        "keyData",
        "algorithm",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "importNode()": {
    "importNode()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "importNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "importNode(node, deep)": {
      "args": [
        "node",
        "deep"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "importScripts()": {
    "importScripts(urls)": {
      "args": [
        "urls"
      ],
      "for": [
        "ServiceWorkerGlobalScope",
        "WorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "in()": {
    "in(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "includes()": {
    "includes(key)": {
      "args": [
        "key"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "index()": {
    "index(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "info()": {
    "info()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "info(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "initCompositionEvent()": {
    "initCompositionEvent()": {
      "args": [],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "initCustomEvent()": {
    "initCustomEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "initCustomEvent(type, bubbles)": {
      "args": [
        "type",
        "bubbles"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "initCustomEvent(type, bubbles, cancelable)": {
      "args": [
        "type",
        "bubbles",
        "cancelable"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "initCustomEvent(type, bubbles, cancelable, detail)": {
      "args": [
        "type",
        "bubbles",
        "cancelable",
        "detail"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    }
  },
  "initEvent()": {
    "initEvent()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "initEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    },
    "initEvent(type, bubbles)": {
      "args": [
        "type",
        "bubbles"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    },
    "initEvent(type, bubbles, cancelable)": {
      "args": [
        "type",
        "bubbles",
        "cancelable"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "initKeyboardEvent()": {
    "initKeyboardEvent()": {
      "args": [],
      "for": [
        "KeyboardEveng"
      ],
      "shortname": "ui-events"
    }
  },
  "initMessageEvent()": {
    "initMessageEvent()": {
      "args": [],
      "for": [
        "MessageEvent"
      ],
      "shortname": "html"
    }
  },
  "initMouseEvent()": {
    "initMouseEvent()": {
      "args": [],
      "for": [
        "MouseEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "initMutationEvent()": {
    "initMutationEvent()": {
      "args": [],
      "for": [
        "MutationEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "initStorageEvent()": {
    "initStorageEvent()": {
      "args": [],
      "for": [
        "StorageEvent"
      ],
      "shortname": "html"
    }
  },
  "initUIEvent()": {
    "initUIEvent()": {
      "args": [],
      "for": [
        "UIEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "initWheelEvent()": {
    "initWheelEvent()": {
      "args": [],
      "for": [
        "WheelEvent"
      ],
      "shortname": "ui-events"
    }
  },
  "insertAdjacentElement()": {
    "insertAdjacentElement(where, element)": {
      "args": [
        "where",
        "element"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "insertAdjacentText()": {
    "insertAdjacentText(where, data)": {
      "args": [
        "where",
        "data"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "insertBefore()": {
    "insertBefore(node, child)": {
      "args": [
        "node",
        "child"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "insertCell()": {
    "insertCell()": {
      "args": [],
      "for": [
        "HTMLTableRowElement"
      ],
      "shortname": "html"
    }
  },
  "insertDTMF()": {
    "insertDTMF()": {
      "args": [],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    },
    "insertDTMF(tones)": {
      "args": [
        "tones"
      ],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    },
    "insertDTMF(tones, duration)": {
      "args": [
        "tones",
        "duration"
      ],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    },
    "insertDTMF(tones, duration, interToneGap)": {
      "args": [
        "tones",
        "duration",
        "interToneGap"
      ],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    }
  },
  "insertData()": {
    "insertData(offset, data)": {
      "args": [
        "offset",
        "data"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "insertNode()": {
    "insertNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "insertRow()": {
    "insertRow()": {
      "args": [],
      "for": [
        "HTMLTableElement",
        "HTMLTableSectionElement"
      ],
      "shortname": "html"
    }
  },
  "insertRule()": {
    "insertRule(rule)": {
      "args": [
        "rule"
      ],
      "for": [
        "CSSGroupingRule",
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "insertRule(rule, index)": {
      "args": [
        "rule",
        "index"
      ],
      "for": [
        "CSSGroupingRule",
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    }
  },
  "intersectsNode()": {
    "intersectsNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "intrinsicSizes()": {
    "intrinsicSizes()": {
      "args": [],
      "for": [
        "LayoutChild"
      ],
      "shortname": "css-layout-api"
    }
  },
  "inverse()": {
    "inverse()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "invertSelf()": {
    "invertSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "isActive()": {
    "isActive()": {
      "args": [],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    }
  },
  "isDefaultNamespace()": {
    "isDefaultNamespace(namespace)": {
      "args": [
        "namespace"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "isEqualNode()": {
    "isEqualNode(otherNode)": {
      "args": [
        "otherNode"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "isPointInPath()": {
    "isPointInPath()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "isPointInRange()": {
    "isPointInRange(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "isPointInStroke()": {
    "isPointInStroke()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "isSameNode()": {
    "isSameNode(otherNode)": {
      "args": [
        "otherNode"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "isSessionSupported()": {
    "isSessionSupported(mode)": {
      "args": [
        "mode"
      ],
      "for": [
        "XRSystem"
      ],
      "shortname": "webxr"
    }
  },
  "isUserVerifyingPlatformAuthenticatorAvailable()": {
    "isUserVerifyingPlatformAuthenticatorAvailable()": {
      "args": [],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "isochronousTransferIn()": {
    "isochronousTransferIn(endpointNumber, packetLengths)": {
      "args": [
        "endpointNumber",
        "packetLengths"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "isochronousTransferOut()": {
    "isochronousTransferOut(endpointNumber, data, packetLengths)": {
      "args": [
        "endpointNumber",
        "data",
        "packetLengths"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "item()": {
    "item()": {
      "args": [],
      "for": [
        "HTMLAllCollection",
        "Plugin"
      ],
      "shortname": "html"
    },
    "item(index)": {
      "args": [
        "index"
      ],
      "for": [
        "CSSRuleList",
        "CSSStyleDeclaration",
        "DOMRectList",
        "DOMStringList",
        "DOMTokenList",
        "FileList",
        "HTMLCollection",
        "HTMLSelectElement",
        "MediaList",
        "NamedNodeMap",
        "NodeList",
        "StyleSheetList"
      ],
      "shortname": "cssom"
    }
  },
  "iterateNext()": {
    "iterateNext()": {
      "args": [],
      "for": [
        "XPathResult"
      ],
      "shortname": "dom"
    }
  },
  "joint()": {
    "joint(jointIndex)": {
      "args": [
        "jointIndex"
      ],
      "for": [
        "XRHand",
        "XRJointSpace"
      ],
      "shortname": "webxr-hand-input"
    }
  },
  "json()": {
    "json()": {
      "args": [],
      "for": [
        "Body"
      ],
      "shortname": "fetch"
    }
  },
  "kHz()": {
    "kHz(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "key()": {
    "key(n)": {
      "args": [
        "n"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "keys()": {
    "keys()": {
      "args": [],
      "for": [
        "Cache",
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "keys(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "keys(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    }
  },
  "lastChild()": {
    "lastChild()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "layoutNextFragment()": {
    "layoutNextFragment(constraints, breakToken)": {
      "args": [
        "constraints",
        "breakToken"
      ],
      "for": [
        "LayoutChild"
      ],
      "shortname": "css-layout-api"
    }
  },
  "layoutNow()": {
    "layoutNow()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "box-tree-api"
    }
  },
  "lh()": {
    "lh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "lineTo()": {
    "lineTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "linearRampToValueAtTime()": {
    "linearRampToValueAtTime(value, endTime)": {
      "args": [
        "value",
        "endTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "load()": {
    "load()": {
      "args": [],
      "for": [
        "FontFace",
        "FontFaceSet",
        "HTMLMediaElement"
      ],
      "shortname": "css-font-loading"
    },
    "load(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "load(font, text)": {
      "args": [
        "font",
        "text"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    }
  },
  "lock()": {
    "lock()": {
      "args": [],
      "for": [
        "ScreenOrientation"
      ],
      "shortname": "screen-orientation"
    },
    "lock(orientation)": {
      "args": [
        "orientation"
      ],
      "for": [
        "ScreenOrientation"
      ],
      "shortname": "screen-orientation"
    }
  },
  "log()": {
    "log()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "log(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "lookupNamespaceURI()": {
    "lookupNamespaceURI(prefix)": {
      "args": [
        "prefix"
      ],
      "for": [
        "Node",
        "XPathNSResolver"
      ],
      "shortname": "dom"
    }
  },
  "lookupPrefix()": {
    "lookupPrefix(namespace)": {
      "args": [
        "namespace"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "lowerBound()": {
    "lowerBound(lower)": {
      "args": [
        "lower"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "lowerBound(lower, open)": {
      "args": [
        "lower",
        "open"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "makeXRCompatible()": {
    "makeXRCompatible()": {
      "args": [],
      "for": [
        "WebGLRenderingContextBase"
      ],
      "shortname": "webxr"
    }
  },
  "match()": {
    "match(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache",
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "match(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "Cache",
        "CacheStorage"
      ],
      "shortname": "service-workers"
    }
  },
  "matchAll()": {
    "matchAll()": {
      "args": [],
      "for": [
        "Cache",
        "Clients"
      ],
      "shortname": "service-workers"
    },
    "matchAll(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Clients"
      ],
      "shortname": "service-workers"
    },
    "matchAll(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "matchAll(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    }
  },
  "matchMedia()": {
    "matchMedia(query)": {
      "args": [
        "query"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "matches()": {
    "matches(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "matrixTransform()": {
    "matrixTransform()": {
      "args": [],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "matrixTransform(matrix)": {
      "args": [
        "matrix"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "max()": {
    "max()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "max(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "measureElement()": {
    "measureElement(element)": {
      "args": [
        "element"
      ],
      "for": [
        "Document"
      ],
      "shortname": "font-metrics-api"
    }
  },
  "measureText()": {
    "measureText()": {
      "args": [],
      "for": [
        "CanvasText"
      ],
      "shortname": "html"
    },
    "measureText(text, styleMap)": {
      "args": [
        "text",
        "styleMap"
      ],
      "for": [
        "Document"
      ],
      "shortname": "font-metrics-api"
    }
  },
  "min()": {
    "min()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "min(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "mm()": {
    "mm(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "moveBy()": {
    "moveBy(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "moveTo()": {
    "moveTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasPath",
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "ms()": {
    "ms(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "mul()": {
    "mul()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "mul(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "multiply()": {
    "multiply()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "multiply(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "multiplySelf()": {
    "multiplySelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "multiplySelf(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "namedItem()": {
    "namedItem()": {
      "args": [],
      "for": [
        "Plugin"
      ],
      "shortname": "html"
    },
    "namedItem(key)": {
      "args": [
        "key"
      ],
      "for": [
        "HTMLCollection"
      ],
      "shortname": "dom"
    },
    "namedItem(name)": {
      "args": [
        "name"
      ],
      "for": [
        "HTMLAllCollection",
        "HTMLCollection",
        "HTMLFormControlsCollection",
        "HTMLSelectElement"
      ],
      "shortname": "dom"
    }
  },
  "navigate()": {
    "navigate(dir)": {
      "args": [
        "dir"
      ],
      "for": [
        "Window"
      ],
      "shortname": "css-nav"
    },
    "navigate(url)": {
      "args": [
        "url"
      ],
      "for": [
        "WindowClient"
      ],
      "shortname": "service-workers"
    }
  },
  "navigator.javaEnabled()": {
    "navigator.javaEnabled()": {
      "args": [],
      "for": [],
      "shortname": "html"
    }
  },
  "nextNode()": {
    "nextNode()": {
      "args": [],
      "for": [
        "NodeIterator",
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "nextSibling()": {
    "nextSibling()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "normalize()": {
    "normalize()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "normalizeDocument()": {
    "normalizeDocument()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "now()": {
    "now()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "hr-time"
    }
  },
  "number()": {
    "number(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "objectStore()": {
    "objectStore(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBTransaction"
      ],
      "shortname": "indexeddb"
    }
  },
  "observe()": {
    "observe()": {
      "args": [],
      "for": [
        "ReportingObserver"
      ],
      "shortname": "reporting"
    },
    "observe(target)": {
      "args": [
        "target"
      ],
      "for": [
        "IntersectionObserver",
        "MutationObserver",
        "ResizeObserver"
      ],
      "shortname": "dom"
    },
    "observe(target, options)": {
      "args": [
        "target",
        "options"
      ],
      "for": [
        "MutationObserver",
        "ResizeObserver"
      ],
      "shortname": "dom"
    }
  },
  "only()": {
    "only(value)": {
      "args": [
        "value"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "open()": {
    "open()": {
      "args": [],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    },
    "open(cacheName)": {
      "args": [
        "cacheName"
      ],
      "for": [
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "open(method, url)": {
      "args": [
        "method",
        "url"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(method, url, async)": {
      "args": [
        "method",
        "url",
        "async"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(method, url, async, username)": {
      "args": [
        "method",
        "url",
        "async",
        "username"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(method, url, async, username, password)": {
      "args": [
        "method",
        "url",
        "async",
        "username",
        "password"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    },
    "open(name, version)": {
      "args": [
        "name",
        "version"
      ],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    },
    "open(unused1, unused2)": {
      "args": [
        "unused1",
        "unused2"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    },
    "open(url, name, features)": {
      "args": [
        "url",
        "name",
        "features"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    },
    "open(url, target, features)": {
      "args": [
        "url",
        "target",
        "features"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "openCursor()": {
    "openCursor()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openCursor(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openCursor(query, direction)": {
      "args": [
        "query",
        "direction"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "openKeyCursor()": {
    "openKeyCursor()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openKeyCursor(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openKeyCursor(query, direction)": {
      "args": [
        "query",
        "direction"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "openWindow()": {
    "openWindow(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Clients"
      ],
      "shortname": "service-workers"
    }
  },
  "overrideMimeType()": {
    "overrideMimeType(mime)": {
      "args": [
        "mime"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "parentNode()": {
    "parentNode()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "parse()": {
    "parse(cssText)": {
      "args": [
        "cssText"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "parse(property, cssText)": {
      "args": [
        "property",
        "cssText"
      ],
      "for": [
        "CSSStyleValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "parseAll()": {
    "parseAll(property, cssText)": {
      "args": [
        "property",
        "cssText"
      ],
      "for": [
        "CSSStyleValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "parseFromString()": {
    "parseFromString(string, type)": {
      "args": [
        "string",
        "type"
      ],
      "for": [
        "DOMParser"
      ],
      "shortname": "html"
    }
  },
  "pause()": {
    "pause()": {
      "args": [],
      "for": [
        "Animation",
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "pc()": {
    "pc(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "percent()": {
    "percent(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "persist()": {
    "persist()": {
      "args": [],
      "for": [
        "Animation",
        "StorageManager"
      ],
      "shortname": "storage"
    }
  },
  "persisted()": {
    "persisted()": {
      "args": [],
      "for": [
        "StorageManager"
      ],
      "shortname": "storage"
    }
  },
  "pipeThrough()": {
    "pipeThrough(transform)": {
      "args": [
        "transform"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "pipeThrough(transform, options)": {
      "args": [
        "transform",
        "options"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "pipeTo()": {
    "pipeTo(destination)": {
      "args": [
        "destination"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "pipeTo(destination, options)": {
      "args": [
        "destination",
        "options"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "play()": {
    "play()": {
      "args": [],
      "for": [
        "Animation",
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "postMessage()": {
    "postMessage(message)": {
      "args": [
        "message"
      ],
      "for": [
        "BroadcastChannel",
        "Client",
        "DedicatedWorkerGlobalScope",
        "MessagePort",
        "ServiceWorker"
      ],
      "shortname": "html"
    },
    "postMessage(message, options)": {
      "args": [
        "message",
        "options"
      ],
      "for": [
        "Client",
        "ServiceWorker",
        "Window",
        "Worker"
      ],
      "shortname": "html"
    },
    "postMessage(message, targetOrigin, transfer)": {
      "args": [
        "message",
        "targetOrigin",
        "transfer"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    },
    "postMessage(message, transfer)": {
      "args": [
        "message",
        "transfer"
      ],
      "for": [
        "Client",
        "DedicatedWorkerGlobalScope",
        "MessagePort",
        "ServiceWorker",
        "Worker"
      ],
      "shortname": "html"
    }
  },
  "preMultiplySelf()": {
    "preMultiplySelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "preMultiplySelf(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "prepend()": {
    "prepend()": {
      "args": [],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "prepend(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "prepend(nodes)": {
      "args": [
        "nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "preventDefault()": {
    "preventDefault()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "preventSilentAccess()": {
    "preventSilentAccess()": {
      "args": [],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    }
  },
  "previousNode()": {
    "previousNode()": {
      "args": [],
      "for": [
        "NodeIterator",
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "previousSibling()": {
    "previousSibling()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "print()": {
    "print()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "process()": {
    "process(inputs, outputs, parameters)": {
      "args": [
        "inputs",
        "outputs",
        "parameters"
      ],
      "for": [
        "AudioWorkletProcessor"
      ],
      "shortname": "webaudio"
    }
  },
  "prompt()": {
    "prompt(message, default)": {
      "args": [
        "message",
        "default"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "pseudo()": {
    "pseudo(CSSOMString type)": {
      "args": [
        "CSSOMString type"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-pseudo"
    },
    "pseudo(type)": {
      "args": [
        "type"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-pseudo"
    }
  },
  "pt()": {
    "pt(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "pushState()": {
    "pushState(data, title)": {
      "args": [
        "data",
        "title"
      ],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "put()": {
    "put(request, response)": {
      "args": [
        "request",
        "response"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "put(value)": {
      "args": [
        "value"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "put(value, key)": {
      "args": [
        "value",
        "key"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "putImageData()": {
    "putImageData()": {
      "args": [],
      "for": [
        "CanvasImageData"
      ],
      "shortname": "html"
    }
  },
  "px()": {
    "px(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "quadraticCurveTo()": {
    "quadraticCurveTo(cpx, cpy, x, y)": {
      "args": [
        "cpx",
        "cpy",
        "x",
        "y"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "query()": {
    "query(permissionDesc)": {
      "args": [
        "permissionDesc"
      ],
      "for": [
        "Permissions"
      ],
      "shortname": "permissions"
    }
  },
  "queryCommandEnabled()": {
    "queryCommandEnabled()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "queryCommandIndeterm()": {
    "queryCommandIndeterm()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "queryCommandState()": {
    "queryCommandState()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "queryCommandSupported()": {
    "queryCommandSupported()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "queryCommandValue()": {
    "queryCommandValue()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "querySelector()": {
    "querySelector(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "querySelectorAll()": {
    "querySelectorAll(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "queueMicrotask()": {
    "queueMicrotask(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "rad()": {
    "rad(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "read()": {
    "read()": {
      "args": [],
      "for": [
        "ReadableStreamDefaultReader"
      ],
      "shortname": "streams"
    },
    "read(view)": {
      "args": [
        "view"
      ],
      "for": [
        "ReadableStreamBYOBReader"
      ],
      "shortname": "streams"
    }
  },
  "readAsArrayBuffer()": {
    "readAsArrayBuffer(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readAsBinaryString()": {
    "readAsBinaryString(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readAsDataURL()": {
    "readAsDataURL(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readAsText()": {
    "readAsText(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    },
    "readAsText(blob, encoding)": {
      "args": [
        "blob",
        "encoding"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readValue()": {
    "readValue()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic",
        "BluetoothRemoteGATTDescriptor"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "ready()": {
    "ready()": {
      "args": [],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    }
  },
  "rect()": {
    "rect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "redirect()": {
    "redirect(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "redirect(url, status)": {
      "args": [
        "url",
        "status"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    }
  },
  "refresh()": {
    "refresh()": {
      "args": [],
      "for": [
        "PluginArray"
      ],
      "shortname": "html"
    }
  },
  "register()": {
    "register(scriptURL)": {
      "args": [
        "scriptURL"
      ],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    },
    "register(scriptURL, options)": {
      "args": [
        "scriptURL",
        "options"
      ],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    },
    "register(tag)": {
      "args": [
        "tag"
      ],
      "for": [
        "SyncManager"
      ],
      "shortname": "web-background-sync"
    }
  },
  "registerAnArbitaryClass()": {
    "registerAnArbitaryClass(type, classConstructor)": {
      "args": [
        "type",
        "classConstructor"
      ],
      "for": [
        "FakeWorkletGlobalScope"
      ],
      "shortname": "worklets"
    }
  },
  "registerAnimator()": {
    "registerAnimator(name, animatorCtor)": {
      "args": [
        "name",
        "animatorCtor"
      ],
      "for": [
        "AnimationWorkletGlobalScope"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "registerFake()": {
    "registerFake(type, classConstructor)": {
      "args": [
        "type",
        "classConstructor"
      ],
      "for": [
        "FakeWorkletGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "registerLayout()": {
    "registerLayout(name, layoutCtor)": {
      "args": [
        "name",
        "layoutCtor"
      ],
      "for": [
        "LayoutWorkletGlobalScope"
      ],
      "shortname": "css-layout-api"
    }
  },
  "registerPaint()": {
    "registerPaint(name, paintCtor)": {
      "args": [
        "name",
        "paintCtor"
      ],
      "for": [
        "PaintWorkletGlobalScope"
      ],
      "shortname": "css-paint-api"
    }
  },
  "registerProcessor()": {
    "registerProcessor(name, processorCtor)": {
      "args": [
        "name",
        "processorCtor"
      ],
      "for": [
        "AudioWorkletGlobalScope"
      ],
      "shortname": "webaudio"
    }
  },
  "registerProperty()": {
    "registerProperty(PropertyDefinition definition)": {
      "args": [
        "PropertyDefinition definition"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-properties-values-api"
    },
    "registerProperty(definition)": {
      "args": [
        "definition"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-properties-values-api"
    }
  },
  "registerProtocolHandler()": {
    "registerProtocolHandler(scheme, url)": {
      "args": [
        "scheme",
        "url"
      ],
      "for": [
        "NavigatorContentUtils"
      ],
      "shortname": "html"
    }
  },
  "releaseEvents()": {
    "releaseEvents()": {
      "args": [],
      "for": [
        "Document",
        "Window"
      ],
      "shortname": "html"
    }
  },
  "releaseInterface()": {
    "releaseInterface(interfaceNumber)": {
      "args": [
        "interfaceNumber"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "releaseLock()": {
    "releaseLock()": {
      "args": [],
      "for": [
        "ReadableStreamBYOBReader",
        "ReadableStreamDefaultReader",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    }
  },
  "releasePointerCapture()": {
    "releasePointerCapture()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    },
    "releasePointerCapture(pointerId)": {
      "args": [
        "pointerId"
      ],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    }
  },
  "reload()": {
    "reload()": {
      "args": [],
      "for": [
        "Location"
      ],
      "shortname": "html"
    }
  },
  "rem()": {
    "rem(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "remove()": {
    "remove()": {
      "args": [],
      "for": [
        "ChildNode",
        "DOMTokenList",
        "DataTransferItemList",
        "HTMLSelectElement"
      ],
      "shortname": "dom"
    },
    "remove(...tokens)": {
      "args": [
        "...tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "remove(index)": {
      "args": [
        "index"
      ],
      "for": [
        "HTMLOptionsCollection"
      ],
      "shortname": "html"
    },
    "remove(tokens)": {
      "args": [
        "tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    }
  },
  "removeAttribute()": {
    "removeAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "removeAttributeNS()": {
    "removeAttributeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "removeAttributeNode()": {
    "removeAttributeNode(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "removeChild()": {
    "removeChild(child)": {
      "args": [
        "child"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "removeCue()": {
    "removeCue(cue)": {
      "args": [
        "cue"
      ],
      "for": [
        "TextTrack"
      ],
      "shortname": "html"
    }
  },
  "removeEventListener()": {
    "removeEventListener(type, callback)": {
      "args": [
        "type",
        "callback"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    },
    "removeEventListener(type, callback, options)": {
      "args": [
        "type",
        "callback",
        "options"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "removeItem()": {
    "removeItem(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "removeListener()": {
    "removeListener(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    },
    "removeListener(listener)": {
      "args": [
        "listener"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    }
  },
  "removeNamedItem()": {
    "removeNamedItem(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "removeNamedItemNS()": {
    "removeNamedItemNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "removeProperty()": {
    "removeProperty(property)": {
      "args": [
        "property"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "removeRule()": {
    "removeRule()": {
      "args": [],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "removeRule(index)": {
      "args": [
        "index"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    }
  },
  "removeTrack()": {
    "removeTrack()": {
      "args": [],
      "for": [
        "MediaStream",
        "RTCPeerConnection"
      ],
      "shortname": "mediacapture-streams"
    },
    "removeTrack(sender)": {
      "args": [
        "sender"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "removeTrack(track)": {
      "args": [
        "track"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "renameNode()": {
    "renameNode()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "replace()": {
    "replace(token, newToken)": {
      "args": [
        "token",
        "newToken"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "replace(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Location"
      ],
      "shortname": "html"
    }
  },
  "replaceChild()": {
    "replaceChild(node, child)": {
      "args": [
        "node",
        "child"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "replaceChildren()": {
    "replaceChildren()": {
      "args": [],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "replaceChildren(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "replaceChildren(nodes)": {
      "args": [
        "nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "replaceData()": {
    "replaceData(offset, count, data)": {
      "args": [
        "offset",
        "count",
        "data"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "replaceState()": {
    "replaceState(data, title)": {
      "args": [
        "data",
        "title"
      ],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "replaceTrack()": {
    "replaceTrack()": {
      "args": [],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "replaceTrack(withTrack)": {
      "args": [
        "withTrack"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "replaceWholeText()": {
    "replaceWholeText()": {
      "args": [],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    }
  },
  "replaceWith()": {
    "replaceWith()": {
      "args": [],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "replaceWith(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "replaceWith(nodes)": {
      "args": [
        "nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    }
  },
  "reportValidity()": {
    "reportValidity()": {
      "args": [],
      "for": [
        "HTMLFieldSetElement",
        "HTMLFormElement"
      ],
      "shortname": "html"
    }
  },
  "request()": {
    "request(permissionDesc)": {
      "args": [
        "permissionDesc"
      ],
      "for": [
        "Permissions"
      ],
      "shortname": "permissions-request"
    }
  },
  "requestAnimationFrame()": {
    "requestAnimationFrame(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "AnimationFrameProvider",
        "XRSession"
      ],
      "shortname": "html"
    }
  },
  "requestDevice()": {
    "requestDevice()": {
      "args": [],
      "for": [
        "Bluetooth"
      ],
      "shortname": "web-bluetooth"
    },
    "requestDevice(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Bluetooth",
        "USB"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "requestFullscreen()": {
    "requestFullscreen()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "fullscreen"
    },
    "requestFullscreen(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "fullscreen"
    }
  },
  "requestHitTestSource()": {
    "requestHitTestSource(options)": {
      "args": [
        "options"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "requestHitTestSourceForTransientInput()": {
    "requestHitTestSourceForTransientInput(options)": {
      "args": [
        "options"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "requestReferenceSpace()": {
    "requestReferenceSpace(type)": {
      "args": [
        "type"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    }
  },
  "requestSession()": {
    "requestSession(mode)": {
      "args": [
        "mode"
      ],
      "for": [
        "XRSystem"
      ],
      "shortname": "webxr"
    },
    "requestSession(mode, options)": {
      "args": [
        "mode",
        "options"
      ],
      "for": [
        "XRSystem"
      ],
      "shortname": "webxr"
    }
  },
  "requestSubmit()": {
    "requestSubmit()": {
      "args": [],
      "for": [
        "HTMLFormElement"
      ],
      "shortname": "html"
    }
  },
  "requestViewportScale()": {
    "requestViewportScale(scale)": {
      "args": [
        "scale"
      ],
      "for": [
        "XRView"
      ],
      "shortname": "webxr"
    }
  },
  "reset()": {
    "reset()": {
      "args": [],
      "for": [
        "HTMLFormElement",
        "USBDevice"
      ],
      "shortname": "html"
    }
  },
  "resetTransform()": {
    "resetTransform()": {
      "args": [],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "resizeBy()": {
    "resizeBy(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "resizeTo()": {
    "resizeTo(width, height)": {
      "args": [
        "width",
        "height"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "resizeTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "respond()": {
    "respond(bytesWritten)": {
      "args": [
        "bytesWritten"
      ],
      "for": [
        "ReadableStreamBYOBRequest"
      ],
      "shortname": "streams"
    }
  },
  "respondWith()": {
    "respondWith(r)": {
      "args": [
        "r"
      ],
      "for": [
        "FetchEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "respondWithNewView()": {
    "respondWithNewView(view)": {
      "args": [
        "view"
      ],
      "for": [
        "ReadableStreamBYOBRequest"
      ],
      "shortname": "streams"
    }
  },
  "restartIce()": {
    "restartIce()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "restore()": {
    "restore()": {
      "args": [],
      "for": [
        "CanvasState"
      ],
      "shortname": "html"
    }
  },
  "resume()": {
    "resume()": {
      "args": [],
      "for": [
        "AudioContext",
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "retry()": {
    "retry()": {
      "args": [],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    }
  },
  "reverse()": {
    "reverse()": {
      "args": [],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "revoke()": {
    "revoke(permissionDesc)": {
      "args": [
        "permissionDesc"
      ],
      "for": [
        "Permissions"
      ],
      "shortname": "permissions-revoke"
    }
  },
  "revokeObjectURL()": {
    "revokeObjectURL(url)": {
      "args": [
        "url"
      ],
      "for": [
        "URL"
      ],
      "shortname": "fileapi"
    }
  },
  "rlh()": {
    "rlh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "rotate()": {
    "rotate()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotate(angle)": {
      "args": [
        "angle"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    },
    "rotate(rotX)": {
      "args": [
        "rotX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotate(rotX, rotY)": {
      "args": [
        "rotX",
        "rotY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotate(rotX, rotY, rotZ)": {
      "args": [
        "rotX",
        "rotY",
        "rotZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "rotateAxisAngle()": {
    "rotateAxisAngle()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "rotateAxisAngleSelf()": {
    "rotateAxisAngleSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "rotateFromVector()": {
    "rotateFromVector()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateFromVector(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateFromVector(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "rotateFromVectorSelf()": {
    "rotateFromVectorSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateFromVectorSelf(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateFromVectorSelf(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "rotateSelf()": {
    "rotateSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateSelf(rotX)": {
      "args": [
        "rotX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateSelf(rotX, rotY)": {
      "args": [
        "rotX",
        "rotY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateSelf(rotX, rotY, rotZ)": {
      "args": [
        "rotX",
        "rotY",
        "rotZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "s()": {
    "s(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "save()": {
    "save()": {
      "args": [],
      "for": [
        "CanvasState"
      ],
      "shortname": "html"
    }
  },
  "scale()": {
    "scale()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX)": {
      "args": [
        "scaleX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY)": {
      "args": [
        "scaleX",
        "scaleY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ, originX, originY, originZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "scale3d()": {
    "scale3d()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale)": {
      "args": [
        "scale"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale, originX)": {
      "args": [
        "scale",
        "originX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale, originX, originY)": {
      "args": [
        "scale",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale, originX, originY, originZ)": {
      "args": [
        "scale",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "scale3dSelf()": {
    "scale3dSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale)": {
      "args": [
        "scale"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale, originX)": {
      "args": [
        "scale",
        "originX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale, originX, originY)": {
      "args": [
        "scale",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale, originX, originY, originZ)": {
      "args": [
        "scale",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "scaleNonUniform()": {
    "scaleNonUniform()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scaleNonUniform(scaleX)": {
      "args": [
        "scaleX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scaleNonUniform(scaleX, scaleY)": {
      "args": [
        "scaleX",
        "scaleY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "scaleSelf()": {
    "scaleSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX)": {
      "args": [
        "scaleX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY)": {
      "args": [
        "scaleX",
        "scaleY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY, originZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "scroll()": {
    "scroll()": {
      "args": [],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scroll(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scroll(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "scrollBy()": {
    "scrollBy()": {
      "args": [],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollBy(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollBy(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "scrollIntoView()": {
    "scrollIntoView()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "cssom-view"
    },
    "scrollIntoView(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "Element"
      ],
      "shortname": "cssom-view"
    }
  },
  "scrollPathIntoView()": {
    "scrollPathIntoView()": {
      "args": [],
      "for": [
        "CanvasUserInterface"
      ],
      "shortname": "html"
    }
  },
  "scrollTo()": {
    "scrollTo()": {
      "args": [],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollTo(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "select()": {
    "select()": {
      "args": [],
      "for": [
        "HTMLInputElement",
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "selectAlternateInterface()": {
    "selectAlternateInterface(interfaceNumber, alternateSetting)": {
      "args": [
        "interfaceNumber",
        "alternateSetting"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "selectConfiguration()": {
    "selectConfiguration(configurationValue)": {
      "args": [
        "configurationValue"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "selectNode()": {
    "selectNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "selectNodeContents()": {
    "selectNodeContents(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "send!overload-1()": {
    "send!overload-1()": {
      "args": [],
      "for": [
        "RTCDataChannel"
      ],
      "shortname": "webrtc"
    },
    "send!overload-1(data)": {
      "args": [
        "data"
      ],
      "for": [
        "RTCDataChannel"
      ],
      "shortname": "webrtc"
    }
  },
  "send!overload-2()": {
    "send!overload-2()": {
      "args": [],
      "for": [
        "RTCDataChannel"
      ],
      "shortname": "webrtc"
    },
    "send!overload-2(data)": {
      "args": [
        "data"
      ],
      "for": [
        "RTCDataChannel"
      ],
      "shortname": "webrtc"
    }
  },
  "send!overload-3()": {
    "send!overload-3()": {
      "args": [],
      "for": [
        "RTCDataChannel"
      ],
      "shortname": "webrtc"
    },
    "send!overload-3(data)": {
      "args": [
        "data"
      ],
      "for": [
        "RTCDataChannel"
      ],
      "shortname": "webrtc"
    }
  },
  "send()": {
    "send()": {
      "args": [],
      "for": [
        "RTCDataChannel",
        "XMLHttpRequest"
      ],
      "shortname": "webrtc"
    },
    "send(body)": {
      "args": [
        "body"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "send(data)": {
      "args": [
        "data"
      ],
      "for": [
        "RTCDataChannel",
        "WebSocket"
      ],
      "shortname": "html"
    }
  },
  "set()": {
    "set()": {
      "args": [],
      "for": [
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "set(featureValueName, values)": {
      "args": [
        "featureValueName",
        "values"
      ],
      "for": [
        "CSSFontFeatureValuesMap"
      ],
      "shortname": "css-fonts"
    },
    "set(flowName, flowValue)": {
      "args": [
        "flowName",
        "flowValue"
      ],
      "for": [
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "set(name, blobValue)": {
      "args": [
        "name",
        "blobValue"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "set(name, blobValue, filename)": {
      "args": [
        "name",
        "blobValue",
        "filename"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "set(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "set(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    },
    "set(property, ...values)": {
      "args": [
        "property",
        "...values"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    }
  },
  "setAttribute()": {
    "setAttribute()": {
      "args": [],
      "for": [],
      "shortname": "html"
    },
    "setAttribute(qualifiedName, value)": {
      "args": [
        "qualifiedName",
        "value"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setAttributeNS()": {
    "setAttributeNS(namespace, qualifiedName, value)": {
      "args": [
        "namespace",
        "qualifiedName",
        "value"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setAttributeNode()": {
    "setAttributeNode(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setAttributeNodeNS()": {
    "setAttributeNodeNS(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setCodecPreferences()": {
    "setCodecPreferences()": {
      "args": [],
      "for": [
        "RTCRtpTransceiver"
      ],
      "shortname": "webrtc"
    },
    "setCodecPreferences(codecs)": {
      "args": [
        "codecs"
      ],
      "for": [
        "RTCRtpTransceiver"
      ],
      "shortname": "webrtc"
    }
  },
  "setConfiguration()": {
    "setConfiguration()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setConfiguration(, configuration)": {
      "args": [
        "",
        "configuration"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setCustomValidity()": {
    "setCustomValidity(message)": {
      "args": [
        "message"
      ],
      "for": [
        "HTMLFieldSetElement"
      ],
      "shortname": "html"
    }
  },
  "setData()": {
    "setData(format, data)": {
      "args": [
        "format",
        "data"
      ],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "setDragImage()": {
    "setDragImage(element, x, y)": {
      "args": [
        "element",
        "x",
        "y"
      ],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "setEnd()": {
    "setEnd(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setEndAfter()": {
    "setEndAfter(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setEndBefore()": {
    "setEndBefore(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setFormValue()": {
    "setFormValue(value, state)": {
      "args": [
        "value",
        "state"
      ],
      "for": [
        "ElementInternals"
      ],
      "shortname": "html"
    }
  },
  "setHeaderValue()": {
    "setHeaderValue(value)": {
      "args": [
        "value"
      ],
      "for": [
        "NavigationPreloadManager"
      ],
      "shortname": "service-workers"
    }
  },
  "setIdAttribute()": {
    "setIdAttribute()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setIdAttributeNS()": {
    "setIdAttributeNS()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setIdAttributeNode()": {
    "setIdAttributeNode()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setInterval()": {
    "setInterval()": {
      "args": [],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "setItem()": {
    "setItem(key, value)": {
      "args": [
        "key",
        "value"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "setKeyframes()": {
    "setKeyframes(keyframes)": {
      "args": [
        "keyframes"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "setLineDash()": {
    "setLineDash()": {
      "args": [],
      "for": [
        "CanvasPathDrawingStyles"
      ],
      "shortname": "html"
    }
  },
  "setLocalDescription!overload-1()": {
    "setLocalDescription!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setLocalDescription!overload-1(successCallback, failureCallback)": {
      "args": [
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setLocalDescription!overload-1(successCallback, failureCallback, description)": {
      "args": [
        "successCallback",
        "failureCallback",
        "description"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setLocalDescription()": {
    "setLocalDescription()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setLocalDescription(, description)": {
      "args": [
        "",
        "description"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setMatrixValue()": {
    "setMatrixValue(transformList)": {
      "args": [
        "transformList"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "setNamedItem()": {
    "setNamedItem(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "setNamedItemNS()": {
    "setNamedItemNS(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "setOrientation()": {
    "setOrientation(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "PannerNode"
      ],
      "shortname": "webaudio"
    },
    "setOrientation(x, y, z, xUp, yUp, zUp)": {
      "args": [
        "x",
        "y",
        "z",
        "xUp",
        "yUp",
        "zUp"
      ],
      "for": [
        "AudioListener"
      ],
      "shortname": "webaudio"
    }
  },
  "setParameters()": {
    "setParameters()": {
      "args": [],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "setParameters(parameters)": {
      "args": [
        "parameters"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "setPeriodicWave()": {
    "setPeriodicWave(periodicWave)": {
      "args": [
        "periodicWave"
      ],
      "for": [
        "OscillatorNode"
      ],
      "shortname": "webaudio"
    }
  },
  "setPointerCapture()": {
    "setPointerCapture()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    },
    "setPointerCapture(pointerId)": {
      "args": [
        "pointerId"
      ],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    }
  },
  "setPosition()": {
    "setPosition(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "AudioListener",
        "PannerNode"
      ],
      "shortname": "webaudio"
    }
  },
  "setProperty()": {
    "setProperty(property, value)": {
      "args": [
        "property",
        "value"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    },
    "setProperty(property, value, priority)": {
      "args": [
        "property",
        "value",
        "priority"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "setPropertyPriority()": {
    "setPropertyPriority(property, priority)": {
      "args": [
        "property",
        "priority"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "setPropertyValue()": {
    "setPropertyValue(property, value)": {
      "args": [
        "property",
        "value"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "setRangeText()": {
    "setRangeText(replacement, start, end, selectMode)": {
      "args": [
        "replacement",
        "start",
        "end",
        "selectMode"
      ],
      "for": [
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "setRemoteDescription!overload-1()": {
    "setRemoteDescription!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setRemoteDescription!overload-1(description, successCallback, failureCallback)": {
      "args": [
        "description",
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setRemoteDescription()": {
    "setRemoteDescription()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setRemoteDescription(description)": {
      "args": [
        "description"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setRequestHeader()": {
    "setRequestHeader(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "setSelectionRange()": {
    "setSelectionRange(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "setStart()": {
    "setStart(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setStartAfter()": {
    "setStartAfter(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setStartBefore()": {
    "setStartBefore(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setStdDeviation()": {
    "setStdDeviation(stdDeviationX, stdDeviationY)": {
      "args": [
        "stdDeviationX",
        "stdDeviationY"
      ],
      "for": [
        "SVGFEDropShadowElement",
        "SVGFEGaussianBlurElement"
      ],
      "shortname": "filter-effects"
    }
  },
  "setStreams()": {
    "setStreams()": {
      "args": [],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "setStreams(, streams)": {
      "args": [
        "",
        "streams"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "setTargetAtTime()": {
    "setTargetAtTime(target, startTime, timeConstant)": {
      "args": [
        "target",
        "startTime",
        "timeConstant"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "setTimeout()": {
    "setTimeout()": {
      "args": [],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "setTransform()": {
    "setTransform()": {
      "args": [],
      "for": [
        "CanvasPattern"
      ],
      "shortname": "html"
    },
    "setTransform(a, b, c, d, e, f)": {
      "args": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f"
      ],
      "for": [
        "CanvasPattern"
      ],
      "shortname": "html"
    }
  },
  "setUserData()": {
    "setUserData()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "setValidity()": {
    "setValidity(flags, message, anchor)": {
      "args": [
        "flags",
        "message",
        "anchor"
      ],
      "for": [
        "ElementInternals"
      ],
      "shortname": "html"
    }
  },
  "setValueAtTime()": {
    "setValueAtTime(value, startTime)": {
      "args": [
        "value",
        "startTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "setValueCurveAtTime()": {
    "setValueCurveAtTime(values, startTime, duration)": {
      "args": [
        "values",
        "startTime",
        "duration"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "share()": {
    "share()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "web-share"
    },
    "share(, data)": {
      "args": [
        "",
        "data"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "web-share"
    }
  },
  "show()": {
    "show()": {
      "args": [],
      "for": [
        "HTMLDialogElement",
        "PaymentRequest"
      ],
      "shortname": "html"
    }
  },
  "showModal()": {
    "showModal()": {
      "args": [],
      "for": [
        "HTMLDialogElement"
      ],
      "shortname": "html"
    }
  },
  "sign()": {
    "sign()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "sign(algorithm, key, data)": {
      "args": [
        "algorithm",
        "key",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "skewX()": {
    "skewX()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "skewX(sx)": {
      "args": [
        "sx"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "skewXSelf()": {
    "skewXSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "skewXSelf(sx)": {
      "args": [
        "sx"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "skewY()": {
    "skewY()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "skewY(sy)": {
      "args": [
        "sy"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "skewYSelf()": {
    "skewYSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "skewYSelf(sy)": {
      "args": [
        "sy"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "skipWaiting()": {
    "skipWaiting()": {
      "args": [],
      "for": [
        "ServiceWorkerGlobalScope"
      ],
      "shortname": "service-workers"
    }
  },
  "slice()": {
    "slice()": {
      "args": [],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "slice(start)": {
      "args": [
        "start"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "slice(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "slice(start, end, contentType)": {
      "args": [
        "start",
        "end",
        "contentType"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "slice(start, end, contentType), slice(start, end), slice(start), slice()": {
      "args": [
        "start",
        "end",
        "contentType)",
        "slice(start",
        "end)",
        "slice(start)",
        "slice("
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    }
  },
  "snapshotItem()": {
    "snapshotItem(index)": {
      "args": [
        "index"
      ],
      "for": [
        "XPathResult"
      ],
      "shortname": "dom"
    }
  },
  "sort()": {
    "sort()": {
      "args": [],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    }
  },
  "spatialNavigationSearch()": {
    "spatialNavigationSearch(dir)": {
      "args": [
        "dir"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    },
    "spatialNavigationSearch(dir, options)": {
      "args": [
        "dir",
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    },
    "spatialNavigationSearch(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    }
  },
  "splitText()": {
    "splitText(offset)": {
      "args": [
        "offset"
      ],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    }
  },
  "start()": {
    "start()": {
      "args": [],
      "for": [
        "AudioBufferSourceNode",
        "AudioScheduledSourceNode",
        "HTMLMarqueeElement",
        "MessagePort",
        "Sensor"
      ],
      "shortname": "generic-sensor"
    },
    "start(index)": {
      "args": [
        "index"
      ],
      "for": [
        "TimeRanges"
      ],
      "shortname": "html"
    },
    "start(when)": {
      "args": [
        "when"
      ],
      "for": [
        "AudioBufferSourceNode",
        "AudioScheduledSourceNode"
      ],
      "shortname": "webaudio"
    },
    "start(when, offset)": {
      "args": [
        "when",
        "offset"
      ],
      "for": [
        "AudioBufferSourceNode"
      ],
      "shortname": "webaudio"
    },
    "start(when, offset, duration)": {
      "args": [
        "when",
        "offset",
        "duration"
      ],
      "for": [
        "AudioBufferSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "startMessages()": {
    "startMessages()": {
      "args": [],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    }
  },
  "startNotifications()": {
    "startNotifications()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "startRendering()": {
    "startRendering()": {
      "args": [],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "state()": {
    "state()": {
      "args": [],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "stepDown()": {
    "stepDown()": {
      "args": [],
      "for": [
        "HTMLInputElement"
      ],
      "shortname": "html"
    }
  },
  "stepUp()": {
    "stepUp()": {
      "args": [],
      "for": [
        "HTMLInputElement"
      ],
      "shortname": "html"
    }
  },
  "stop()": {
    "stop()": {
      "args": [],
      "for": [
        "AudioScheduledSourceNode",
        "HTMLMarqueeElement",
        "MediaStreamTrack",
        "RTCRtpTransceiver",
        "Sensor",
        "Window"
      ],
      "shortname": "generic-sensor"
    },
    "stop(when)": {
      "args": [
        "when"
      ],
      "for": [
        "AudioScheduledSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "stopImmediatePropagation()": {
    "stopImmediatePropagation()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "stopNotifications()": {
    "stopNotifications()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "stopPropagation()": {
    "stopPropagation()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "store()": {
    "store()": {
      "args": [],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    },
    "store(credential)": {
      "args": [
        "credential"
      ],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    }
  },
  "stream()": {
    "stream()": {
      "args": [],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    }
  },
  "stroke()": {
    "stroke()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "strokeRect()": {
    "strokeRect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasRect"
      ],
      "shortname": "html"
    }
  },
  "strokeText()": {
    "strokeText()": {
      "args": [],
      "for": [
        "CanvasText"
      ],
      "shortname": "html"
    }
  },
  "sub()": {
    "sub()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "sub(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "submit()": {
    "submit()": {
      "args": [],
      "for": [
        "HTMLFormElement"
      ],
      "shortname": "html"
    }
  },
  "substringData()": {
    "substringData(offset, count)": {
      "args": [
        "offset",
        "count"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "supports()": {
    "supports(conditionText)": {
      "args": [
        "conditionText"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-conditional"
    },
    "supports(property, value)": {
      "args": [
        "property",
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-conditional"
    },
    "supports(token)": {
      "args": [
        "token"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    }
  },
  "surroundContents()": {
    "surroundContents(newParent)": {
      "args": [
        "newParent"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "suspend()": {
    "suspend()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    },
    "suspend(suspendTime)": {
      "args": [
        "suspendTime"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "swapCache()": {
    "swapCache()": {
      "args": [],
      "for": [
        "ApplicationCache"
      ],
      "shortname": "html"
    }
  },
  "table()": {
    "table()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "table(tabularData)": {
      "args": [
        "tabularData"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "table(tabularData, properties)": {
      "args": [
        "tabularData",
        "properties"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "taintEnabled()": {
    "taintEnabled()": {
      "args": [],
      "for": [
        "NavigatorID"
      ],
      "shortname": "html"
    }
  },
  "takeRecords()": {
    "takeRecords()": {
      "args": [],
      "for": [
        "IntersectionObserver",
        "MutationObserver",
        "ReportingObserver"
      ],
      "shortname": "dom"
    }
  },
  "tee()": {
    "tee()": {
      "args": [],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "terminate()": {
    "terminate()": {
      "args": [],
      "for": [
        "TransformStreamDefaultController",
        "Worker"
      ],
      "shortname": "html"
    }
  },
  "text()": {
    "text()": {
      "args": [],
      "for": [
        "Blob",
        "Body"
      ],
      "shortname": "fetch"
    }
  },
  "time()": {
    "time()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "time(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "timeEnd()": {
    "timeEnd()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "timeEnd(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "timeLog()": {
    "timeLog()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "timeLog(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "timeLog(label, ...data)": {
      "args": [
        "label",
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "to()": {
    "to(unit)": {
      "args": [
        "unit"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "toBlob()": {
    "toBlob(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    },
    "toBlob(callback, type)": {
      "args": [
        "callback",
        "type"
      ],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    }
  },
  "toDataURL()": {
    "toDataURL()": {
      "args": [],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    },
    "toDataURL(type)": {
      "args": [
        "type"
      ],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    }
  },
  "toFloat32Array()": {
    "toFloat32Array()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "toFloat64Array()": {
    "toFloat64Array()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "toJSON()": {
    "toJSON()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly",
        "DOMPointReadOnly",
        "DOMQuad",
        "DOMRectReadOnly",
        "MediaDeviceInfo",
        "PaymentAddress",
        "PaymentResponse",
        "Performance",
        "PerformanceNavigation",
        "PerformanceNavigationTiming",
        "PerformanceTiming",
        "RTCIceCandidate",
        "RTCSessionDescription",
        "Report",
        "ReportBody",
        "URL"
      ],
      "shortname": "geometry"
    }
  },
  "toMatrix()": {
    "toMatrix()": {
      "args": [],
      "for": [
        "CSSTransformComponent",
        "CSSTransformValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "toRdf()": {
    "toRdf()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "toRdf(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    },
    "toRdf(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld11-api"
    }
  },
  "toSum()": {
    "toSum()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "toSum(...units)": {
      "args": [
        "...units"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "toggle()": {
    "toggle(token)": {
      "args": [
        "token"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "toggle(token, force)": {
      "args": [
        "token",
        "force"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    }
  },
  "toggleAttribute()": {
    "toggleAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    },
    "toggleAttribute(qualifiedName, force)": {
      "args": [
        "qualifiedName",
        "force"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "trace()": {
    "trace()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "trace(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "transaction()": {
    "transaction(storeNames)": {
      "args": [
        "storeNames"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    },
    "transaction(storeNames, mode)": {
      "args": [
        "storeNames",
        "mode"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    },
    "transaction(storeNames, mode, options)": {
      "args": [
        "storeNames",
        "mode",
        "options"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    }
  },
  "transferControlToOffscreen()": {
    "transferControlToOffscreen()": {
      "args": [],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    }
  },
  "transferFromImageBitmap()": {
    "transferFromImageBitmap(imageBitmap)": {
      "args": [
        "imageBitmap"
      ],
      "for": [
        "ImageBitmapRenderingContext"
      ],
      "shortname": "html"
    }
  },
  "transferIn()": {
    "transferIn(endpointNumber, length)": {
      "args": [
        "endpointNumber",
        "length"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "transferOut()": {
    "transferOut(endpointNumber, data)": {
      "args": [
        "endpointNumber",
        "data"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "transferToImageBitmap()": {
    "transferToImageBitmap()": {
      "args": [],
      "for": [
        "OffscreenCanvas"
      ],
      "shortname": "html"
    }
  },
  "transform()": {
    "transform(a, b, c, d, e, f)": {
      "args": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "transformPoint()": {
    "transformPoint()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "transformPoint(point)": {
      "args": [
        "point"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "transformToDocument()": {
    "transformToDocument()": {
      "args": [],
      "for": [],
      "shortname": "html"
    }
  },
  "transformToFragment()": {
    "transformToFragment()": {
      "args": [],
      "for": [],
      "shortname": "html"
    }
  },
  "translate()": {
    "translate()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(tx)": {
      "args": [
        "tx"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(tx, ty)": {
      "args": [
        "tx",
        "ty"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(tx, ty, tz)": {
      "args": [
        "tx",
        "ty",
        "tz"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "translateSelf()": {
    "translateSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "translateSelf(tx)": {
      "args": [
        "tx"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "translateSelf(tx, ty)": {
      "args": [
        "tx",
        "ty"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "translateSelf(tx, ty, tz)": {
      "args": [
        "tx",
        "ty",
        "tz"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "turn()": {
    "turn(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "type()": {
    "type()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "unlock()": {
    "unlock()": {
      "args": [],
      "for": [
        "ScreenOrientation"
      ],
      "shortname": "screen-orientation"
    }
  },
  "unobserve()": {
    "unobserve(target)": {
      "args": [
        "target"
      ],
      "for": [
        "IntersectionObserver",
        "ResizeObserver"
      ],
      "shortname": "intersection-observer"
    }
  },
  "unregister()": {
    "unregister()": {
      "args": [],
      "for": [
        "ServiceWorkerRegistration"
      ],
      "shortname": "service-workers"
    }
  },
  "unregisterProtocolHandler()": {
    "unregisterProtocolHandler(scheme, url)": {
      "args": [
        "scheme",
        "url"
      ],
      "for": [
        "NavigatorContentUtils"
      ],
      "shortname": "html"
    }
  },
  "unwrapKey()": {
    "unwrapKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages)": {
      "args": [
        "format",
        "wrappedKey",
        "unwrappingKey",
        "unwrapAlgorithm",
        "unwrappedKeyAlgorithm",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "update()": {
    "update()": {
      "args": [],
      "for": [
        "ApplicationCache",
        "ServiceWorkerRegistration"
      ],
      "shortname": "html"
    },
    "update(value)": {
      "args": [
        "value"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "updatePlaybackRate()": {
    "updatePlaybackRate(playbackRate)": {
      "args": [
        "playbackRate"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "updateRenderState()": {
    "updateRenderState()": {
      "args": [],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    },
    "updateRenderState(newState)": {
      "args": [
        "newState"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    },
    "updateRenderState(state)": {
      "args": [
        "state"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    }
  },
  "updateTiming()": {
    "updateTiming()": {
      "args": [],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    },
    "updateTiming(timing)": {
      "args": [
        "timing"
      ],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "updateWith()": {
    "updateWith()": {
      "args": [],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    },
    "updateWith(detailsPromise)": {
      "args": [
        "detailsPromise"
      ],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "upgrade()": {
    "upgrade(root)": {
      "args": [
        "root"
      ],
      "for": [
        "CustomElementRegistry"
      ],
      "shortname": "html"
    }
  },
  "upperBound()": {
    "upperBound(upper)": {
      "args": [
        "upper"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "upperBound(upper, open)": {
      "args": [
        "upper",
        "open"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "vb()": {
    "vb(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "verify()": {
    "verify()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "verify(algorithm, key, signature, data)": {
      "args": [
        "algorithm",
        "key",
        "signature",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "vh()": {
    "vh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "vi()": {
    "vi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "vmax()": {
    "vmax(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "vmin()": {
    "vmin(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "void setKeyframes()": {
    "void setKeyframes(object? keyframes)": {
      "args": [
        "object? keyframes"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "vw()": {
    "vw(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "waitUntil()": {
    "waitUntil(f)": {
      "args": [
        "f"
      ],
      "for": [
        "ExtendableEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "warn()": {
    "warn()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "warn(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "watchAdvertisements()": {
    "watchAdvertisements()": {
      "args": [],
      "for": [
        "BluetoothDevice"
      ],
      "shortname": "web-bluetooth"
    },
    "watchAdvertisements(options)": {
      "args": [
        "options"
      ],
      "for": [
        "BluetoothDevice"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "webkitMatchesSelector()": {
    "webkitMatchesSelector(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "whenDefined()": {
    "whenDefined(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CustomElementRegistry"
      ],
      "shortname": "html"
    }
  },
  "wrapKey()": {
    "wrapKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "wrapKey(format, key, wrappingKey, wrapAlgorithm)": {
      "args": [
        "format",
        "key",
        "wrappingKey",
        "wrapAlgorithm"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "write()": {
    "write()": {
      "args": [],
      "for": [
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    },
    "write(chunk)": {
      "args": [
        "chunk"
      ],
      "for": [
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    }
  },
  "writeValue()": {
    "writeValue(value)": {
      "args": [
        "value"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic",
        "BluetoothRemoteGATTDescriptor"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "writeValueWithResponse()": {
    "writeValueWithResponse(value)": {
      "args": [
        "value"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "writeValueWithoutResponse()": {
    "writeValueWithoutResponse(value)": {
      "args": [
        "value"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  }
}